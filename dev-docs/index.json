[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/App.js",
    "content": "import { TodoListDom } from './ToDoList/TodoListDom.js';\nimport { Timer } from './Timer/Timer.js';\nimport { Statistics } from './Statistics/Statistics.js';\nimport { Distraction } from './Distraction/Distraction.js';\nimport { longBreakColors, shortBreakColors, workModeColors } from './Misc/ChangeColors.js';\nimport { breakModeSound, workModeSound } from './Misc/Sounds.js';\nimport { classNames } from './ToDoList/TaskVariables.js';\nimport { DistractedByDevice } from './Distraction/DistractedByDevice.js';\n\n/**\n * Used to see if data needs to be cleared or not (if timer is started after 3 a.m. or not)\n * @returns True if the current time is 03:00:00 or later. False otherwise.\n */\nfunction after3amToday() {\n  const currDate = new Date();\n  return currDate.getHours() >= 3;\n}\n\n/**\n * Navigation bar\n * @type {HTMLElement}\n */\nconst navBar = document.querySelector('nav');\n\n/**\n * Location where time is displayed\n * @type {HTMLParagraphElement}\n */\nconst timeDisplay = document.getElementById('timeDisplay');\n\n/**\n *  Location where current pomo session type  is displayed\n * @type {HTMLParagraphElement}\n */\nconst modeDisplay = document.getElementById('modeDisplay');\n\n/**\n * Table where ToDo List is housed\n * @type {HTMLTableElement}\n */\nconst todoTable = document.getElementById('todo');\n\n/**\n * Form for inputting new tasks\n * @type {HTMLFormElement}\n */\nconst addTodoForm = document.getElementById('add-todo');\n\n/**\n * Button to submit addTodoForm\n * @type {HTMLButtonElement}\n */\nconst addTodoButton = document.getElementById('add-button');\n\n/**\n * Button to start the timer\n * @type {HTMLButtonElement}\n */\nconst startTimerButton = document.getElementById('startTimer');\n\n/**\n * Button to display the statistics popup\n * @type {HTMLButtonElement}\n */\nconst statsButton = document.getElementById('statsButton');\n\n/**\n * Button to log a distraction\n * @type {HTMLButtonElement}\n */\nconst distractButton = document.getElementById('distractionButton');\n\n/**\n * Section which houses the distraction popup\n * @type {HTMLElement}\n */\nconst distractPopUp = document.getElementById('distract-popup');\n\n/**\n * Button to cancel logging a distraction\n * @type {HTMLButtonElement}\n */\nconst cancelButton = document.getElementById('cancel-button');\n\n/**\n * Form for entering a new distraction\n * @type {HTMLFormElement}\n */\nconst distractForm = document.getElementById('distract-form');\n\n/**\n * Input element for logging a distraction\n * @type {HTMLInputElement}\n */\nconst description = document.getElementById('description');\n\n/**\n * Section which houses the statistics popup\n * @type {HTMLElement}\n */\nconst statsPopUp = document.getElementById('stats-section');\n\n/**\n * Div which houses the text elements inside the statistics popup\n * @type {HTMLDivElement}\n */\nconst parentDiv = document.getElementById('parentDiv');\n\n/**\n * Button to close the statitics popup\n * @type {HTMLButtonElement}\n */\nconst closeStatsButton = document.getElementById('close-stats-button');\n\n/**\n * Button to delete all tasks\n * @type {HTMLButtonElement}\n */\nconst deleteAllButton = document.getElementById('delete-all-button');\n\n/**\n * Overlay to darken popup backgrounds\n * @type {HTMLDivElement}\n */\nconst overlay = document.getElementById('overlay');\n\n/**\n * Button to toggle \"Data\" tab within the Statistics popup\n * @type {HTMLButtonElement}\n */\nconst statsTabBtn = document.getElementById('data');\n/**\n * Section for showing which task is currently in progress\n * @type {HTMLElement}\n */\nconst currentTaskDiv = document.getElementById('currentTask');\n\n/**\n * Button to start the tour of the page\n * @type {HTMLButtonElement}\n */\nconst tourButton = document.getElementById('onboardingButton');\n\n/**\n * Button to complete current task (replaces checkbox functionality)\n * @type {HTMLButtonElement}\n */\nconst finishTaskBtn = document.getElementById('finishTask');\n/**\n * @type {Statistics}\n */\nconst StatsPage = new Statistics();\n/**\n * @type {TodoListDom} DOM handler for the ToDo List data structure\n */\nconst TDLDom = new TodoListDom(todoTable, addTodoForm, addTodoButton,\n  deleteAllButton, finishTaskBtn, currentTaskDiv);\n\n/**\n * @type {Timer}\n */\nconst TimerObj = new Timer(startTimerButton, timeDisplay, modeDisplay);\n/**\n * @type {Distraction}\n */\nconst DistractionPage = new Distraction(distractButton, distractPopUp,\n  cancelButton, distractForm, description, overlay);\n/**\n * The switch element in settings for this feature\n * @type {HTMLInputElement}\n */\nconst noDeviceSwitch = document.getElementById('noDeviceSwitch');\n/**\n * For handling device distractions\n * @type {DistractedByDevice}\n */\nconst distractedByDevice = new DistractedByDevice(noDeviceSwitch, modeDisplay);\n/**\n * For hiding/showing the nav buttons\n * @type {Array}\n */\nconst navButtons = [document.getElementById('faqButton'),\n  document.getElementById('statsButton'),\n  document.getElementById('settingsButton'),\n  document.getElementById('onboardingButton')];\n\n// if the user has not already visited the page, run the introduction\nif (localStorage.getItem('onboarding') === null) {\n  // eslint-disable-next-line\n  introJs().start();\n  localStorage.setItem('onboarding', 'true');\n}\n\n/**\n * Event listener for the tour button to play the tour\n */\ntourButton.addEventListener('click', () => {\n  // eslint-disable-next-line\n  introJs().start();\n});\n\n/**\n * Update session indicator icons based on how many pomos are left until long break\n */\nfunction updateSessionIndicators(location) {\n  const indicators = document.querySelectorAll('.indicator');\n  // Long break finished, reset all indicators\n  if (location === 7) {\n    for (let i = 0; i < indicators.length; i += 1) {\n      indicators[i].textContent = 'trip_origin';\n    }\n  } else {\n    // fill in the appropriate indicator\n    indicators[6 - location].textContent = 'circle';\n  }\n}\n\n/**\n * When timer is complete, if a work session was completed then:\n * 1. Increment current task pomo sessions\n * 2. Add work time to stats\n * 3. Increment completed pomo sessions in stats\n *\n * If a break session was just completed, the add to total time spent in stats\n *\n * Then change colors accordingly\n */\nTimerObj.addEventListener('timer-complete', (e) => {\n  if (e.detail.sessionIsWork) { // if it was a work mode\n    distractedByDevice.endPomoTime();\n    TDLDom.onSessionComplete();\n    StatsPage.addWorkTime(e.detail.duration);\n    StatsPage.incrementActualPomoSessions();\n\n    if (e.detail.nextSessionName === 'Short Break') {\n      shortBreakColors();\n    } else {\n      longBreakColors();\n    }\n    breakModeSound();\n  } else {\n    StatsPage.addTimeSpent(e.detail.duration);\n    workModeColors();\n    workModeSound();\n  }\n  updateSessionIndicators(e.detail.longBreakLocation);\n});\n\n/**\n * When the start/stop timer button is clicked:\n * 1. If there is old data, compress it and clear it\n * 2. If you are clicking stop timer:\n *  a. Compress statistics\n *  b. Set session start time to a past date so it resets when start button is fixed.\n */\nstartTimerButton.addEventListener('click', () => {\n  if (StatsPage.dataToCompressExists()) {\n    StatsPage.clearData();\n  }\n  if (startTimerButton.childNodes[0].nodeValue === 'Start') { // Button text updates before this\n    StatsPage.compressStats();\n    // Definitely in the past so data is cleared when Start Day is clicked\n    const newDate = new Date(2000, 0, 1);\n    localStorage.setItem('startDateTime', newDate);\n    StatsPage.sessionStartDateTime = newDate;\n  }\n});\n\nfunction enterFocusMode() {\n  todoTable.parentElement.style.opacity = '0';\n  todoTable.parentElement.style.visibility = 'hidden';\n  todoTable.parentElement.style.transition = 'visibility 0s 0.25s, opacity 0.25s linear';\n  timeDisplay.parentElement.parentElement.classList.add('focus');\n  currentTaskDiv.classList.add('focus');\n  navBar.style.transitionDuration = '0.2s';\n  navBar.classList.add('focus');\n  document.getElementById('sessionIndicator').style.opacity = 0;\n  document.getElementById('sessionIndicator').classList.add('focus');\n}\n\nfunction exitFocusMode() {\n  todoTable.parentElement.style.opacity = '1';\n  todoTable.parentElement.style.visibility = 'visible';\n  todoTable.parentElement.style.transition = 'opacity 1s linear';\n  todoTable.parentElement.style.transitionDelay = '1s';\n  timeDisplay.parentElement.parentElement.classList.remove('focus');\n  currentTaskDiv.classList.remove('focus');\n  navBar.style.transitionDuration = '0.2s';\n  navBar.classList.remove('focus');\n  document.getElementById('sessionIndicator').style.opacity = 1;\n  document.getElementById('sessionIndicator').classList.remove('focus');\n}\n\n/**\n * When a session is started:\n * If it is a work session, disable distraction button, otherwise enable the distraction button\n */\nTimerObj.addEventListener('timer-start', (e) => {\n  if (e.detail.sessionIsWork) {\n    distractButton.disabled = false;\n    // hide all buttons on focus\n    navButtons.forEach((element) => {\n      element.style.opacity = '0';\n      element.style.pointerEvents = 'none';\n    });\n    distractedByDevice.startPomoTime();\n    enterFocusMode();\n  } else {\n    distractButton.disabled = true;\n    DistractionPage.resetPopUp();\n    // unhide buttons on break time\n    navButtons.forEach((element) => {\n      element.style.opacity = '1';\n      element.style.pointerEvents = 'auto';\n    });\n    exitFocusMode();\n  }\n});\n\n/**\n * If the timer isn't ticking, you cannot log a distraction so disable the distraction button\n */\nTimerObj.addEventListener('timer-end', () => {\n  distractButton.disabled = true;\n\n  distractedByDevice.endPomoTime();\n  DistractionPage.resetPopUp();\n  // show all buttons when timer ends\n  navButtons.forEach((element) => {\n    element.style.opacity = '1';\n    element.style.pointerEvents = 'auto';\n  });\n  exitFocusMode();\n});\n\ndocument.body.addEventListener('task-up', (e) => {\n  TDLDom.moveTaskUp(e.detail.taskID);\n  TDLDom.updateCurrentTask();\n});\n\ndocument.body.addEventListener('task-down', (e) => {\n  TDLDom.moveTaskDown(e.detail.taskID);\n  TDLDom.updateCurrentTask();\n});\n\n/**\n * Event that fires when someone focuses on a certain task\n */\ndocument.body.addEventListener('focus-task', (e) => {\n  TDLDom.onFocusTask(e.detail.taskID);\n  TDLDom.updateCurrentTask();\n});\n\n/**\n * Event that fires when someone deletes a task\n */\ndocument.body.addEventListener('task-deleted', (e) => {\n  TDLDom.todoList.removeTask(e.detail.taskID);\n  TDLDom.updateCurrentTask();\n});\n\n/**\n * Event that fires when someone checks/unchecks checkbox\n */\ndocument.body.addEventListener('checkbox-updated', (e) => {\n  // chechBoxstate is the updated checkbox state (state after event happened)\n  if (e.detail.checkBoxState === true) {\n    TDLDom.onCompletedTask();\n  } else {\n    TDLDom.onUncheckedTask(e.detail.taskID);\n  }\n  TDLDom.updateCurrentTask();\n});\n\n/**\n * This function determines if someone clicked the area where the delete\n * and the focus button show up, in order to hide them if the cursor was\n * clicked somewhere else\n */\nwindow.addEventListener('click', (e) => {\n  const lastColumnElements = document.getElementsByClassName(classNames.lastCol);\n  let touchedButton = false;\n\n  for (let i = 0; i < lastColumnElements.length && !touchedButton; i += 1) {\n    if (lastColumnElements[i].contains(e.target)) touchedButton = true;\n  }\n\n  if (!touchedButton) {\n    const buttonPairList = document.getElementsByClassName(classNames.doubleButtons);\n    const threeDotButtonList = document.getElementsByClassName(classNames.threeDotsWrapper);\n    for (let i = 0; i < buttonPairList.length; i += 1) {\n      buttonPairList[i].style.display = 'none';\n      threeDotButtonList[i].style.display = 'flex';\n    }\n  }\n});\n\n/**\n * When a task is created, add the expected pomo-duration to stats\n */\nTDLDom.todoList.addEventListener('task-added', (e) => {\n  StatsPage.addExpectedPomoSessions(e.detail.duration);\n});\n\n/**\n * When a task is checked off, update the number of completed tasks in stats\n */\nTDLDom.todoList.addEventListener('task-checked-off', () => {\n  StatsPage.incrementTasksCompleted();\n});\n\n/**\n * When a task is un-checked, update the number of completed tasks in stats\n */\nTDLDom.todoList.addEventListener('task-unchecked', () => {\n  StatsPage.decrementTasksCompleted();\n});\n\n/**\n * When a task is deleted, subtract the expected pomo-duration from stats\n */\nTDLDom.todoList.addEventListener('task-deleted', (e) => {\n  StatsPage.deleteExpectedPomoSessions(e.detail.pomoSessions);\n});\n\n/**\n * When a distraction is logged:\n * 1. Store the id of the session during which it occurred\n * 2. Reset the current work session\n * 3. Store the distraction in task\n */\nfunction distractionCreated(e) {\n  e.detail.pomoSessionId = TimerObj.sessionId;\n  TimerObj.resetSession();\n  StatsPage.addDistraction(e.detail);\n}\n\nDistractionPage.addEventListener('distraction-created', distractionCreated);\ndistractedByDevice.addEventListener('distraction-created', distractionCreated);\n\n/**\n * When End Day is clicked, set pomo session id back to zero to restart distraction count\n */\nStatsPage.addEventListener('reset-timer', () => {\n  TimerObj.resetPomoSessionId();\n});\n\n/**\n * Makes the Statistics button in the header  responsive\n */\nstatsButton.addEventListener('click', () => {\n  StatsPage.updateDom();\n  statsPopUp.style.display = 'block';\n  parentDiv.style.display = 'block';\n  statsPopUp.style.animation = 'fadeEffect-popup 1s';\n  overlay.style.animation = 'fadeEffect-overlay 1s';\n  parentDiv.setAttribute('class', 'slide-in');\n  document.getElementById('overlay').style.display = 'block';\n});\n\n/**\n * Makes the Statistics close button responsive\n */\ncloseStatsButton.addEventListener('click', () => {\n  parentDiv.setAttribute('class', 'slide-out');\n  statsPopUp.style.display = 'none';\n  document.getElementById('overlay').style.display = 'none';\n});\n\n/**\n * If it's after 3a.m. today and the last time that \"Start Day\" was clicked was\n * before 3a.m. today, compress stats and clear data\n */\nif (after3amToday() && StatsPage.dataToCompressExists()) {\n  StatsPage.compressStats();\n  StatsPage.clearData();\n}\n\n/**\n * Makes the Data tab default when Statistics popup appears\n */\nstatsTabBtn.click();\n\nnavBar.addEventListener('transitionend', () => {\n  navBar.style.transitionDuration = '0.2s';\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "after3amToday",
    "memberof": "js/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/App.js~after3amToday",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Used to see if data needs to be cleared or not (if timer is started after 3 a.m. or not)",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "True if the current time is 03:00:00 or later. False otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "True if the current time is 03:00:00 or later. False otherwise."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "navBar",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~navBar",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Navigation bar",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "timeDisplay",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~timeDisplay",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Location where time is displayed",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "modeDisplay",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~modeDisplay",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": " Location where current pomo session type  is displayed",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "todoTable",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~todoTable",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Table where ToDo List is housed",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "HTMLTableElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "addTodoForm",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~addTodoForm",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Form for inputting new tasks",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "HTMLFormElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "addTodoButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~addTodoButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to submit addTodoForm",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "startTimerButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~startTimerButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to start the timer",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "statsButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~statsButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to display the statistics popup",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "distractButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~distractButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to log a distraction",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "distractPopUp",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~distractPopUp",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Section which houses the distraction popup",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "cancelButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~cancelButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to cancel logging a distraction",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "distractForm",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~distractForm",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Form for entering a new distraction",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "HTMLFormElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "description",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~description",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Input element for logging a distraction",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "statsPopUp",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~statsPopUp",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Section which houses the statistics popup",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "parentDiv",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~parentDiv",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Div which houses the text elements inside the statistics popup",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "closeStatsButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~closeStatsButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to close the statitics popup",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "deleteAllButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~deleteAllButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to delete all tasks",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "overlay",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~overlay",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Overlay to darken popup backgrounds",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "statsTabBtn",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~statsTabBtn",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to toggle \"Data\" tab within the Statistics popup",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "currentTaskDiv",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~currentTaskDiv",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Section for showing which task is currently in progress",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "tourButton",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~tourButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to start the tour of the page",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "finishTaskBtn",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~finishTaskBtn",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Button to complete current task (replaces checkbox functionality)",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "StatsPage",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~StatsPage",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "Statistics"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "TDLDom",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~TDLDom",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "TodoListDom"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "TimerObj",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~TimerObj",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "Timer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "DistractionPage",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~DistractionPage",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "Distraction"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "noDeviceSwitch",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~noDeviceSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "The switch element in settings for this feature",
    "lineNumber": 172,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "distractedByDevice",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~distractedByDevice",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "For handling device distractions",
    "lineNumber": 177,
    "type": {
      "nullable": null,
      "types": [
        "DistractedByDevice"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "navButtons",
    "memberof": "js/App.js",
    "static": true,
    "longname": "js/App.js~navButtons",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "For hiding/showing the nav buttons",
    "lineNumber": 182,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "updateSessionIndicators",
    "memberof": "js/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/App.js~updateSessionIndicators",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "Update session indicator icons based on how many pomos are left until long break",
    "lineNumber": 205,
    "params": [
      {
        "name": "location",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "enterFocusMode",
    "memberof": "js/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/App.js~enterFocusMode",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "exitFocusMode",
    "memberof": "js/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/App.js~exitFocusMode",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "distractionCreated",
    "memberof": "js/App.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/App.js~distractionCreated",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/App.js",
    "importStyle": null,
    "description": "When a distraction is logged:\n1. Store the id of the session during which it occurred\n2. Reset the current work session\n3. Store the distraction in task",
    "lineNumber": 432,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "js/Distraction/DistractedByDevice.js",
    "content": "/**\n * DistractedByDevice object, handles everything related to tracking mouse\n * & keyboard activity\n */\nclass DistractedByDevice extends HTMLElement {\n  constructor(noDeviceSwitch, displayStatus) {\n    super();\n    /**\n     * The switch element in settings for this feature\n     * @type {HTMLInputElement}\n     */\n    this.noDeviceSwitch = noDeviceSwitch;\n    /**\n     * Keeps track of the timeout ID so that timeout can be interrupted\n     * @type {Number}\n     */\n    this.timeoutID = 0;\n    /**\n     * HTML Tag that is reponsible for displaying the mode of the timer\n     * @type {HTMLElement}\n     */\n    this.displayStatus = displayStatus;\n    /**\n     * Records whether this feature is currently running\n     * @type {Boolean}\n     */\n    this.running = false;\n  }\n\n  /**\n   * Called when a pomo session starts, and adds event listeners accordingly\n   */\n  startPomoTime() {\n    // locks the option when pomo session starts\n    // TODO: There's no UI that indicates the switch is disabled, user might be confused\n    this.noDeviceSwitch.disabled = true;\n    if (!this.running && !this.noDeviceSwitch.checked) {\n      const text = 'Working Away From Device';\n      this.countdownMessage(5, text);\n    }\n  }\n\n  /**\n   * Called when a pomo session ends, removes event listeners if necessary\n   */\n  endPomoTime() {\n    this.noDeviceSwitch.disabled = false;\n    clearTimeout(this.timeoutID);\n    this.running = false;\n  }\n\n  /**\n   * Method that handles anythinig that shoudl happen if user is distracted\n   * by their device\n   */\n  userDistracted() {\n    if (this.running) {\n      const event = new CustomEvent('distraction-created', {\n        detail: {\n          date: new Date(),\n          description: 'Distracted by device',\n          pomoSessionId: null,\n        },\n      });\n\n      this.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Display warning message after session starts\n   * @param {Number} duration Duration of the message\n   * @param {String} text Text to be set after count down\n   */\n  countdownMessage(duration, text) {\n    if (duration > 0) {\n      this.displayStatus.textContent = `Do not touch device after ${duration}s`;\n      this.timeoutID = setTimeout(() => {\n        this.countdownMessage(duration - 1, text);\n      }, 1000);\n    } else {\n      this.displayStatus.textContent = text;\n      this.running = true;\n      document.addEventListener('mousemove', () => this.userDistracted(), { once: true });\n      document.addEventListener('click', () => this.userDistracted(), { once: true });\n      document.addEventListener('keydown', () => this.userDistracted(), { once: true });\n    }\n  }\n}\n\ncustomElements.define('device-distraction', DistractedByDevice);\nexport { DistractedByDevice };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Distraction/DistractedByDevice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "DistractedByDevice",
    "memberof": "js/Distraction/DistractedByDevice.js",
    "static": true,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Distraction/DistractedByDevice.js",
    "importStyle": "{DistractedByDevice}",
    "description": "DistractedByDevice object, handles everything related to tracking mouse\n& keyboard activity",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "noDeviceSwitch",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#noDeviceSwitch",
    "access": "public",
    "description": "The switch element in settings for this feature",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "timeoutID",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#timeoutID",
    "access": "public",
    "description": "Keeps track of the timeout ID so that timeout can be interrupted",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "displayStatus",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#displayStatus",
    "access": "public",
    "description": "HTML Tag that is reponsible for displaying the mode of the timer",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "running",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#running",
    "access": "public",
    "description": "Records whether this feature is currently running",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "startPomoTime",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#startPomoTime",
    "access": "public",
    "description": "Called when a pomo session starts, and adds event listeners accordingly",
    "lineNumber": 33,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "endPomoTime",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#endPomoTime",
    "access": "public",
    "description": "Called when a pomo session ends, removes event listeners if necessary",
    "lineNumber": 46,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "userDistracted",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#userDistracted",
    "access": "public",
    "description": "Method that handles anythinig that shoudl happen if user is distracted\nby their device",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "countdownMessage",
    "memberof": "js/Distraction/DistractedByDevice.js~DistractedByDevice",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/DistractedByDevice.js~DistractedByDevice#countdownMessage",
    "access": "public",
    "description": "Display warning message after session starts",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Duration of the message"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text to be set after count down"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "js/Distraction/Distraction.js",
    "content": "/**\n * Distraction object, displayed when distraction button is clicked\n * allow user to input distractions. Hide when other area is clicked.\n */\nclass Distraction extends HTMLElement {\n  /**\n   * Constructor for the distraction element\n   * @param {HTMLButton} distractButton - button to click to log distraction\n   * @param {HTMLSection} distractPopUp - pop up that should show for distraction\n   * @param {HTMLButton} cancelButton - button to cancel inputting a distraction\n   * @param {HTMLFormElement} distractForm - form to input distraction\n   * @param {HTMLInputElement} description - where users input the distracton\n   * @param {HTMLDivElement} overlay  - overlay to darken background\n   */\n  constructor(distractButton, distractPopUp, cancelButton, distractForm, description, overlay) {\n    super();\n    /**\n     * The button where users click to submit their distractions\n     * @type {HTMLButtonElement}\n     */\n    this.distractButton = distractButton;\n\n    /**\n     * The section for displaying distraction form\n     * @type {HTMLSectionElement}\n     */\n    this.distractPopUp = distractPopUp;\n\n    /**\n     * The button where users click to cancel their distractions\n     * @type {HTMLButtonElement}\n     */\n    this.cancelButton = cancelButton;\n\n    /**\n     * The form where users input their distractions\n     * @type {HTMLFormElement}\n     */\n    this.distractForm = distractForm;\n\n    /**\n     * Input element for logging a distraction\n     * @type {HTMLInputElement}\n     */\n    this.description = description;\n\n    /**\n     * Overlay to darken popup backgrounds\n     * @type {HTMLDivElement}\n     */\n    this.overlay = overlay;\n\n    /**\n     * Array of distractions\n     * @type {array}\n     */\n    this.distractions = [];\n    this.setupEventListeners();\n  }\n\n  /**\n  * Sets up event listeners to make distraction appear, submit, etc.\n  */\n  setupEventListeners() {\n    // Distraction button makes distraction popup appear\n    this.distractButton.addEventListener('click', () => {\n      if (this.distractPopUp.style.display === 'block') {\n        this.resetPopUp();\n      } else {\n        this.distractPopUp.style.display = 'block';\n        this.distractPopUp.style.animationName = 'distraction-animation-in';\n        this.overlay.style.display = 'block';\n        this.overlay.style.animationName = 'overlay-animation-in';\n      }\n    });\n\n    // Cancel makes popup go away\n    this.cancelButton.addEventListener('click', () => {\n      this.resetPopUp();\n    });\n\n    // Submit button fires event that App.js will catch and log\n    this.distractForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n      const event = new CustomEvent('distraction-created', {\n        detail: {\n          date: new Date(),\n          description: this.description.value,\n          pomoSessionId: null,\n        },\n      });\n      this.dispatchEvent(event);\n      this.resetPopUp();\n    });\n\n    /**\n    * These event listeners trigger when the animation is finished. It resets\n    * the popup animations and sets hides them when done.\n    */\n    this.distractPopUp.addEventListener('animationend', (e) => {\n      if (e.animationName === 'distraction-animation-out') {\n        this.distractPopUp.style.animationName = '';\n        this.distractPopUp.style.display = 'none';\n      }\n    });\n\n    this.overlay.addEventListener('animationend', (e) => {\n      if (e.animationName === 'overlay-animation-out') {\n        this.overlay.style.animationName = '';\n        this.overlay.style.display = 'none';\n      }\n    });\n\n    this.overlay.addEventListener('click', () => {\n      this.resetPopUp();\n    });\n  }\n\n  /**\n   * Makes popup disappear and clears input field\n   */\n  resetPopUp() {\n    this.distractPopUp.style.animationName = 'distraction-animation-out';\n    this.overlay.style.animationName = 'overlay-animation-out';\n    document.getElementById('description').value = '';\n  }\n\n  /**\n   * Makes distraction button disappear (during breaks)\n   */\n  hideButton() {\n    this.distractButton.style.display = 'none';\n  }\n\n  /**\n   * Makes distraction button appear (during work sessions)\n   */\n  showButton() {\n    this.distractButton.style.display = 'block';\n  }\n}\n\ncustomElements.define('distraction-page', Distraction);\nexport { Distraction };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Distraction/Distraction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "Distraction",
    "memberof": "js/Distraction/Distraction.js",
    "static": true,
    "longname": "js/Distraction/Distraction.js~Distraction",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Distraction/Distraction.js",
    "importStyle": "{Distraction}",
    "description": "Distraction object, displayed when distraction button is clicked\nallow user to input distractions. Hide when other area is clicked.",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#constructor",
    "access": "public",
    "description": "Constructor for the distraction element",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLButton"
        ],
        "spread": false,
        "optional": false,
        "name": "distractButton",
        "description": "button to click to log distraction"
      },
      {
        "nullable": null,
        "types": [
          "HTMLSection"
        ],
        "spread": false,
        "optional": false,
        "name": "distractPopUp",
        "description": "pop up that should show for distraction"
      },
      {
        "nullable": null,
        "types": [
          "HTMLButton"
        ],
        "spread": false,
        "optional": false,
        "name": "cancelButton",
        "description": "button to cancel inputting a distraction"
      },
      {
        "nullable": null,
        "types": [
          "HTMLFormElement"
        ],
        "spread": false,
        "optional": false,
        "name": "distractForm",
        "description": "form to input distraction"
      },
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "where users input the distracton"
      },
      {
        "nullable": null,
        "types": [
          "HTMLDivElement"
        ],
        "spread": false,
        "optional": false,
        "name": "overlay",
        "description": "overlay to darken background"
      }
    ]
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "distractButton",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#distractButton",
    "access": "public",
    "description": "The button where users click to submit their distractions",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "distractPopUp",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#distractPopUp",
    "access": "public",
    "description": "The section for displaying distraction form",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSectionElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "cancelButton",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#cancelButton",
    "access": "public",
    "description": "The button where users click to cancel their distractions",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "distractForm",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#distractForm",
    "access": "public",
    "description": "The form where users input their distractions",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "HTMLFormElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "description",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#description",
    "access": "public",
    "description": "Input element for logging a distraction",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "overlay",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#overlay",
    "access": "public",
    "description": "Overlay to darken popup backgrounds",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "distractions",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#distractions",
    "access": "public",
    "description": "Array of distractions",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "setupEventListeners",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#setupEventListeners",
    "access": "public",
    "description": "Sets up event listeners to make distraction appear, submit, etc.",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "resetPopUp",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#resetPopUp",
    "access": "public",
    "description": "Makes popup disappear and clears input field",
    "lineNumber": 122,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "hideButton",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#hideButton",
    "access": "public",
    "description": "Makes distraction button disappear (during breaks)",
    "lineNumber": 131,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "showButton",
    "memberof": "js/Distraction/Distraction.js~Distraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Distraction/Distraction.js~Distraction#showButton",
    "access": "public",
    "description": "Makes distraction button appear (during work sessions)",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "js/FAQ/FAQ.js",
    "content": "/**\n * @type {HTMLDivElement} Get the modal\n */\nconst modalFAQ = document.getElementById('myModal');\n\n/**\n * @type {HTMLButtonElement} Get the button that opens the modal\n */\nconst btn = document.getElementById('faqButton');\n\n/**\n * @type {HTMLElement} Get the <span> element that closes the modal\n */\nconst span = document.getElementsByClassName('close')[0];\n\n/**\n * When the user clicks the button, open the modal\n */\nbtn.addEventListener('click', () => {\n  modalFAQ.style.display = 'block';\n});\n/**\n * When the user clicks on <span> (x), close the modal\n */\nspan.addEventListener('click', () => {\n  modalFAQ.style.display = 'none';\n});\n\n/**\n * When the user clicks anywhere outside of the modal, close it\n */\nwindow.addEventListener('click', (event) => {\n  if (event.target === modalFAQ) {\n    modalFAQ.style.display = 'none';\n  }\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/FAQ/FAQ.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "modalFAQ",
    "memberof": "js/FAQ/FAQ.js",
    "static": true,
    "longname": "js/FAQ/FAQ.js~modalFAQ",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/FAQ/FAQ.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 4,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "btn",
    "memberof": "js/FAQ/FAQ.js",
    "static": true,
    "longname": "js/FAQ/FAQ.js~btn",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/FAQ/FAQ.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "span",
    "memberof": "js/FAQ/FAQ.js",
    "static": true,
    "longname": "js/FAQ/FAQ.js~span",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/FAQ/FAQ.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "js/Misc/ChangeColors.js",
    "content": "import { breakNames } from './MiscVariables.js';\n\nconst body = document.getElementsByTagName('body')[0];\n/**\n * Function that adds a class name to the body for\n * transitioning to short break\n */\nexport function shortBreakColors() {\n  body.classList.add(breakNames.short);\n}\n\n/**\n * Function that removes class names from body for transitioning back to work\n * session\n */\nexport function workModeColors() {\n  body.classList.remove(breakNames.short);\n  body.classList.remove(breakNames.long);\n}\n\n/**\n * Function that adds class name to the body\n * for transitioning to the long break, currently not used.\n */\nexport function longBreakColors() {\n  body.classList.add(breakNames.long);\n}\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Misc/ChangeColors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "body",
    "memberof": "js/Misc/ChangeColors.js",
    "static": true,
    "longname": "js/Misc/ChangeColors.js~body",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/ChangeColors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "shortBreakColors",
    "memberof": "js/Misc/ChangeColors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/ChangeColors.js~shortBreakColors",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/ChangeColors.js",
    "importStyle": "{shortBreakColors}",
    "description": "Function that adds a class name to the body for\ntransitioning to short break",
    "lineNumber": 8,
    "params": [],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "workModeColors",
    "memberof": "js/Misc/ChangeColors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/ChangeColors.js~workModeColors",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/ChangeColors.js",
    "importStyle": "{workModeColors}",
    "description": "Function that removes class names from body for transitioning back to work\nsession",
    "lineNumber": 16,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "longBreakColors",
    "memberof": "js/Misc/ChangeColors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/ChangeColors.js~longBreakColors",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/ChangeColors.js",
    "importStyle": "{longBreakColors}",
    "description": "Function that adds class name to the body\nfor transitioning to the long break, currently not used.",
    "lineNumber": 25,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "js/Misc/MiscVariables.js",
    "content": "/**\n * Names for break\n * @type {Object}\n*/\nconst breakNames = {\n  short: 'short-break',\n  long: 'long-break',\n};\n\n/**\n * Background color for the page\n * @type {Object}\n */\nconst pageBGColor = {\n  name: '--page-bg-color',\n  shortName: '--page-bg-color-short',\n  longName: '--page-bg-color-long',\n  val: localStorage.getItem('--page-bg-color'),\n  shortVal: localStorage.getItem('--page-bg-color-short'),\n  longVal: localStorage.getItem('--page-bg-color-long'),\n  darkVal: '#363636',\n};\n\n/**\n * Color for the header\n * @type {Object}\n */\nconst headerColor = {\n  name: '--header-color',\n  shortName: '--header-color-short',\n  longName: '--header-color-long',\n  val: localStorage.getItem('--header-color'),\n  shortVal: localStorage.getItem('--header-color-short'),\n  longVal: localStorage.getItem('--header-color-long'),\n  darkVal: '#2d2c2b',\n};\n\n/**\n * Color for even tr\n * @type {Object}\n */\nconst evenColor = {\n  name: '--even-color',\n  shortName: '--even-color-short',\n  longName: '--even-color-long',\n  val: localStorage.getItem('--btn-icon-color'),\n  shortVal: localStorage.getItem('--btn-icon-color-short'),\n  longVal: localStorage.getItem('--btn-icon-color-long'),\n  darkVal: 'lightslategray',\n};\n\n/**\n * font color for the page\n * @type {Object}\n */\nconst fontColor = {\n  name: '--font-color',\n  shortName: '--font-color-short',\n  longName: '--font-color-long',\n  val: localStorage.getItem('--font-color'),\n  shortVal: localStorage.getItem('--font-color-short'),\n  longVal: localStorage.getItem('--font-color-long'),\n  darkVal: 'white',\n};\n\n/**\n * Toothpaste-esque colors\n * @type {Object}\n */\nconst toothpaste = {\n  name: '--toothpaste',\n  val: 'rgb(2, 177, 177)',\n  darkVal: '#2d2c2b',\n};\n\n/**\n * Background color for table\n * @type {Object}\n */\nconst tableBG = {\n  name: '--table-bg=color-short',\n  val: '#60afcc',\n  darkVal: '#2d2c2b',\n};\n\n/**\n * Modal background color\n * @type {Object}\n */\nconst modalBGColor = {\n  name: '--modal-bg-color',\n  val: '#f1f1f1',\n  darkVal: '#2d2c2b',\n};\n\n/**\n * Font for modal\n * @type {Object}\n */\nconst modalFontColor = {\n  name: '--modal-font-color',\n  val: 'black',\n  darkVal: 'white',\n};\n\nexport {\n  breakNames, pageBGColor, headerColor, toothpaste, tableBG, evenColor,\n  modalBGColor, modalFontColor, fontColor,\n};\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Misc/MiscVariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "breakNames",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~breakNames",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{breakNames}",
    "description": "Names for break",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "pageBGColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~pageBGColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{pageBGColor}",
    "description": "Background color for the page",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "headerColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~headerColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{headerColor}",
    "description": "Color for the header",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "toothpaste",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~toothpaste",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{toothpaste}",
    "description": "Toothpaste-esque colors",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "tableBG",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~tableBG",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{tableBG}",
    "description": "Background color for table",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "evenColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~evenColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{evenColor}",
    "description": "Color for even tr",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "modalBGColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~modalBGColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{modalBGColor}",
    "description": "Modal background color",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "modalFontColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~modalFontColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{modalFontColor}",
    "description": "Font for modal",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "fontColor",
    "memberof": "js/Misc/MiscVariables.js",
    "static": true,
    "longname": "js/Misc/MiscVariables.js~fontColor",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/MiscVariables.js",
    "importStyle": "{fontColor}",
    "description": "font color for the page",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "js/Misc/Settings.js",
    "content": "import {\n  pageBGColor, headerColor, evenColor, toothpaste,\n  tableBG, modalBGColor, modalFontColor, fontColor,\n} from './MiscVariables.js';\n\nimport {\n  changeSound,\n} from './Sounds.js';\n/**\n * @type {HTMLButtonElement}\n */\nconst settingsButton = document.getElementById('settingsButton');\n/**\n * @type {HTMLButtonElement}\n */\nconst settingsPopup = document.getElementById('settingsPopup');\n/**\n * @type {HTMLButtonElement}\n */\nconst timeInputs = document.querySelectorAll('#customTimeGroup input');\n/**\n * @type {HTMLInputElement}\n */\nconst darkModeSwitch = document.getElementById('darkModeSwitch');\n/**\n * @type {HTMLInputElement}\n */\nconst workColorPicker = document.getElementById('workColorPicker');\n/**\n * @type {HTMLInputElement}\n */\nconst shortColorPicker = document.getElementById('shortColorPicker');\n/**\n * @type {HTMLInputElement}\n */\nconst longColorPicker = document.getElementById('longColorPicker');\nconst autoStartSwitch = document.getElementById('autoStartSwitch');\n/**\n * @type {HTMLInputElement}\n */\nconst muteSwitch = document.getElementById('muteSwitch');\n/**\n * @type {HTMLInputElement}\n */\nconst noDeviceSwitch = document.getElementById('noDeviceSwitch');\n/**\n * the selector for work sound\n * @type {HTMLSelectElement}\n */\nconst workSoundSelector = document.getElementById('workSoundSelector');\n/**\n * the selector for break sound\n * @type {HTMLSelectElement}\n */\nconst breakSoundSelector = document.getElementById('breakSoundSelector');\n/**\n * @type {HTMLElement}\n */\nconst root = document.querySelector(':root');\n/**\n * handle the settings popup display\n */\n\ndocument.addEventListener('click', (event) => {\n  if (settingsPopup.style.display === 'block') {\n    if (!settingsPopup.contains(event.target) && (event.target.id !== 'settingsButton' && event.target.id !== 'settingsButtonIcon')) {\n      settingsPopup.style.display = 'none';\n    }\n  }\n});\n\nsettingsButton.addEventListener('click', () => {\n  if (settingsPopup.style.display === 'block') {\n    settingsPopup.style.display = 'none';\n  } else {\n    settingsPopup.style.display = 'block';\n  }\n});\n\n/**\n * Simple timer length validation. Only allow whole numbers\n */\nfor (let i = 0; i < timeInputs.length; i += 1) {\n  timeInputs[i].addEventListener('keypress', (event) => {\n    if (!(event.which >= 48 && event.which <= 57) && (event.which !== 13)) {\n      event.preventDefault();\n    }\n    if (event.which === 48 && event.target.value === '') {\n      event.preventDefault();\n    }\n  });\n}\n\n/**\n * Anon function that shades a color.\n * col = input color you want to change in #RRGGBB format\n * amt = percentage amount you want to shade (-ve is darker)\n */\nconst colorShade = (col, amt) => {\n  col = col.replace(/^#/, '');\n  if (col.length === 3) col = col[0] + col[0] + col[1] + col[1] + col[2] + col[2];\n\n  let [r, g, b] = col.match(/.{2}/g);\n  ([r, g, b] = [parseInt(r, 16) + amt, parseInt(g, 16) + amt, parseInt(b, 16) + amt]);\n\n  r = Math.max(Math.min(255, r), 0).toString(16);\n  g = Math.max(Math.min(255, g), 0).toString(16);\n  b = Math.max(Math.min(255, b), 0).toString(16);\n\n  const rr = (r.length < 2 ? '0' : '') + r;\n  const gg = (g.length < 2 ? '0' : '') + g;\n  const bb = (b.length < 2 ? '0' : '') + b;\n\n  return `#${rr}${gg}${bb}`;\n};\n\nfunction getFontColor(hex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  const arr = [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];\n  if (0.213 * arr[0] + 0.715 * arr[1] + 0.072 * arr[2] > 200) {\n    return 'black';\n  }\n  return 'white';\n}\n\nif (localStorage.getItem('--page-bg-color') === null) {\n  localStorage.setItem('--page-bg-color', '#d9645f');\n  localStorage.setItem('--header-color', colorShade(localStorage.getItem('--page-bg-color'), -60));\n  localStorage.setItem('--btn-icon-color', colorShade(localStorage.getItem('--page-bg-color'), 10));\n  localStorage.setItem('--font-color', getFontColor(localStorage.getItem('--page-bg-color')));\n  pageBGColor.val = localStorage.getItem('--page-bg-color');\n  headerColor.val = localStorage.getItem('--header-color');\n  evenColor.val = localStorage.getItem('--btn-icon-color');\n  fontColor.val = localStorage.getItem('--font-color');\n}\n\nroot.style.setProperty('--page-bg-color', localStorage.getItem('--page-bg-color'));\nroot.style.setProperty('--header-color', localStorage.getItem('--header-color'));\nroot.style.setProperty('--table-bg-color', colorShade(localStorage.getItem('--page-bg-color'), -10));\nroot.style.setProperty('--btn-icon-color', colorShade(localStorage.getItem('--page-bg-color'), 10));\nroot.style.setProperty('--btn-icon-hover-color', colorShade(localStorage.getItem('--page-bg-color'), 100));\nroot.style.setProperty('--font-color', localStorage.getItem('--font-color'));\nworkColorPicker.value = localStorage.getItem('--page-bg-color');\n\nif (localStorage.getItem('--page-bg-color-short') === null) {\n  localStorage.setItem('--page-bg-color-short', '#76a662');\n  localStorage.setItem('--header-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), -60));\n  localStorage.setItem('--btn-icon-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), 10));\n  localStorage.setItem('--font-color-short', getFontColor(localStorage.getItem('--page-bg-color-short')));\n  pageBGColor.shortVal = localStorage.getItem('--page-bg-color-short');\n  headerColor.shortVal = localStorage.getItem('--header-color-short');\n  evenColor.shortVal = localStorage.getItem('--btn-icon-color-short');\n  fontColor.shortVal = localStorage.getItem('--font-color-short');\n}\n\nroot.style.setProperty('--page-bg-color-short', localStorage.getItem('--page-bg-color-short'));\nroot.style.setProperty('--header-color-short', localStorage.getItem('--header-color-short'));\nroot.style.setProperty('--table-bg-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), -10));\nroot.style.setProperty('--btn-icon-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), 10));\nroot.style.setProperty('--btn-icon-hover-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), 100));\nroot.style.setProperty('--font-color-short', localStorage.getItem('--font-color-short'));\nshortColorPicker.value = localStorage.getItem('--page-bg-color-short');\n\nif (localStorage.getItem('--page-bg-color-long') === null) {\n  localStorage.setItem('--page-bg-color-long', '#66b4db');\n  localStorage.setItem('--header-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), -60));\n  localStorage.setItem('--btn-icon-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), 10));\n  localStorage.setItem('--font-color-long', getFontColor(localStorage.getItem('--page-bg-color-long')));\n  pageBGColor.longVal = localStorage.getItem('--page-bg-color-long');\n  headerColor.longVal = localStorage.getItem('--header-color-long');\n  evenColor.longVal = localStorage.getItem('--btn-icon-color-long');\n  fontColor.longVal = localStorage.getItem('--font-color-long');\n}\n\nroot.style.setProperty('--page-bg-color-long', localStorage.getItem('--page-bg-color-long'));\nroot.style.setProperty('--header-color-long', localStorage.getItem('--header-color-long'));\nroot.style.setProperty('--table-bg-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), -10));\nroot.style.setProperty('--btn-icon-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), 10));\nroot.style.setProperty('--btn-icon-hover-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), 100));\nroot.style.setProperty('--font-color-long', localStorage.getItem('--font-color-long'));\nlongColorPicker.value = localStorage.getItem('--page-bg-color-long');\n\n/**\n * Update the theme of the page based on darkModeSwitch\n */\nfunction updateDarkMode() {\n  if (darkModeSwitch.checked) {\n    document.getElementsByTagName('body')[0].classList.add('dark-mode');\n    root.style.setProperty(pageBGColor.name, pageBGColor.darkVal);\n    root.style.setProperty(pageBGColor.shortName, pageBGColor.darkVal);\n    root.style.setProperty(pageBGColor.longName, pageBGColor.darkVal);\n    root.style.setProperty(headerColor.name, headerColor.darkVal);\n    root.style.setProperty(headerColor.shortName, headerColor.darkVal);\n    root.style.setProperty(headerColor.longName, headerColor.darkVal);\n    root.style.setProperty(evenColor.name, evenColor.darkVal);\n    root.style.setProperty(evenColor.shortName, evenColor.darkVal);\n    root.style.setProperty(evenColor.longName, evenColor.darkVal);\n    root.style.setProperty(fontColor.name, fontColor.darkVal);\n    root.style.setProperty(fontColor.shortName, fontColor.darkVal);\n    root.style.setProperty(fontColor.longName, fontColor.darkVal);\n    root.style.setProperty(toothpaste.name, toothpaste.darkVal);\n    root.style.setProperty(tableBG.name, tableBG.darkVal);\n    root.style.setProperty(modalBGColor.name, modalBGColor.darkVal);\n    root.style.setProperty(modalFontColor.name, modalFontColor.darkVal);\n    document.getElementById('nav-wrapper').style.backgroundColor = 'rgb(32, 32, 32)';\n    const heads = document.querySelectorAll('#taskListHeader th');\n    for (let i = 0; i < heads.length; i += 1) {\n      heads[i].style.backgroundColor = 'rgb(32, 32, 32)';\n    }\n    document.getElementById('add-todo').style.backgroundColor = 'rgb(32, 32, 32)';\n    document.getElementById('todo').style.backgroundColor = 'rgb(62, 62, 62)';\n  } else {\n    document.getElementsByTagName('body')[0].classList.remove('dark-mode');\n    root.style.setProperty(pageBGColor.name, pageBGColor.val);\n    root.style.setProperty(pageBGColor.shortName, pageBGColor.shortVal);\n    root.style.setProperty(pageBGColor.longName, pageBGColor.longVal);\n    root.style.setProperty(headerColor.name, headerColor.val);\n    root.style.setProperty(headerColor.shortName, headerColor.shortVal);\n    root.style.setProperty(headerColor.longName, headerColor.longVal);\n    root.style.setProperty(evenColor.name, evenColor.val);\n    root.style.setProperty(evenColor.shortName, evenColor.shortVal);\n    root.style.setProperty(evenColor.longName, evenColor.longVal);\n    root.style.setProperty(fontColor.name, fontColor.val);\n    root.style.setProperty(fontColor.shortName, fontColor.shortVal);\n    root.style.setProperty(fontColor.longName, fontColor.longVal);\n    root.style.setProperty(toothpaste.name, toothpaste.val);\n    root.style.setProperty(tableBG.name, tableBG.val);\n    root.style.setProperty(modalBGColor.name, modalBGColor.val);\n    root.style.setProperty(modalFontColor.name, modalFontColor.val);\n    document.getElementById('nav-wrapper').style.backgroundColor = null;\n    const heads = document.querySelectorAll('#taskListHeader th');\n    for (let i = 0; i < heads.length; i += 1) {\n      heads[i].style.backgroundColor = null;\n    }\n    document.getElementById('add-todo').style.backgroundColor = null;\n    document.getElementById('todo').style.backgroundColor = null;\n  }\n}\n\n/**\n * handle darkmode by changing root variables and update localStorage\n */\ndarkModeSwitch.addEventListener('change', () => {\n  localStorage.setItem('darkModeSwitch', darkModeSwitch.checked);\n  updateDarkMode();\n});\n\n/**\n * Update localStorage whenever settings are changed\n */\nautoStartSwitch.addEventListener('change', () => {\n  localStorage.setItem('autoStartSwitch', autoStartSwitch.checked);\n});\nmuteSwitch.addEventListener('change', () => {\n  localStorage.setItem('muteSwitch', muteSwitch.checked);\n});\nnoDeviceSwitch.addEventListener('change', () => {\n  localStorage.setItem('noDeviceSwitch', noDeviceSwitch.checked);\n});\n\n/**\n * handle color picker for work color\n */\nworkColorPicker.addEventListener('change', () => {\n  if (!darkModeSwitch.checked) {\n    root.style.setProperty('--page-bg-color', workColorPicker.value);\n    root.style.setProperty('--header-color', colorShade(workColorPicker.value, -60));\n    root.style.setProperty('--even-color', colorShade(workColorPicker.value, 10));\n    root.style.setProperty('--font-color', getFontColor(workColorPicker.value));\n  }\n  root.style.setProperty('--table-bg-color', colorShade(workColorPicker.value, -10));\n  root.style.setProperty('--btn-icon-color', colorShade(workColorPicker.value, 10));\n  localStorage.setItem('--page-bg-color', workColorPicker.value);\n  localStorage.setItem('--header-color', colorShade(localStorage.getItem('--page-bg-color'), -60));\n  localStorage.setItem('--btn-icon-color', colorShade(localStorage.getItem('--page-bg-color'), 10));\n  localStorage.setItem('--font-color', getFontColor(localStorage.getItem('--page-bg-color')));\n  root.style.setProperty('--btn-icon-hover-color', colorShade(localStorage.getItem('--page-bg-color'), 100));\n  pageBGColor.val = localStorage.getItem('--page-bg-color');\n  headerColor.val = localStorage.getItem('--header-color');\n  evenColor.val = localStorage.getItem('--btn-icon-color');\n  fontColor.val = localStorage.getItem('--font-color');\n});\n\n/**\n * handle color picker for work color\n */\nshortColorPicker.addEventListener('change', () => {\n  if (!darkModeSwitch.checked) {\n    root.style.setProperty('--page-bg-color-short', shortColorPicker.value);\n    root.style.setProperty('--header-color-short', colorShade(shortColorPicker.value, -60));\n    root.style.setProperty('--even-color-short', colorShade(shortColorPicker.value, 10));\n    root.style.setProperty('--font-color-short', getFontColor(shortColorPicker.value));\n  }\n  root.style.setProperty('--table-bg-color-short', colorShade(shortColorPicker.value, -10));\n  root.style.setProperty('--btn-icon-color-short', colorShade(shortColorPicker.value, 10));\n  localStorage.setItem('--page-bg-color-short', shortColorPicker.value);\n  localStorage.setItem('--header-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), -60));\n  localStorage.setItem('--btn-icon-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), 10));\n  localStorage.setItem('--font-color-short', getFontColor(localStorage.getItem('--page-bg-color-short')));\n  root.style.setProperty('--btn-icon-hover-color-short', colorShade(localStorage.getItem('--page-bg-color-short'), 100));\n  pageBGColor.shortVal = localStorage.getItem('--page-bg-color-short');\n  headerColor.shortVal = localStorage.getItem('--header-color-short');\n  evenColor.shortVal = localStorage.getItem('--btn-icon-color-short');\n  fontColor.shortVal = localStorage.getItem('--font-color-short');\n});\n\n/**\n * handle color picker for work color\n */\nlongColorPicker.addEventListener('change', () => {\n  if (!darkModeSwitch.checked) {\n    root.style.setProperty('--page-bg-color-long', longColorPicker.value);\n    root.style.setProperty('--header-color-long', colorShade(longColorPicker.value, -60));\n    root.style.setProperty('--even-color-long', colorShade(longColorPicker.value, 10));\n    root.style.setProperty('--font-color-long', getFontColor(longColorPicker.value));\n  }\n  root.style.setProperty('--table-bg-color-long', colorShade(longColorPicker.value, -10));\n  root.style.setProperty('--btn-icon-color-long', colorShade(longColorPicker.value, 10));\n  localStorage.setItem('--page-bg-color-long', longColorPicker.value);\n  localStorage.setItem('--header-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), -60));\n  localStorage.setItem('--btn-icon-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), 10));\n  localStorage.setItem('--font-color-long', getFontColor(localStorage.getItem('--page-bg-color-long')));\n  root.style.setProperty('--btn-icon-hover-color-long', colorShade(localStorage.getItem('--page-bg-color-long'), 100));\n  pageBGColor.longVal = localStorage.getItem('--page-bg-color-long');\n  headerColor.longVal = localStorage.getItem('--header-color-long');\n  evenColor.longVal = localStorage.getItem('--btn-icon-color-long');\n  fontColor.longVal = localStorage.getItem('--font-color-long');\n});\n// set values from localStorage\ndarkModeSwitch.checked = localStorage.getItem('darkModeSwitch') == null ? false : localStorage.getItem('darkModeSwitch') === 'true';\nautoStartSwitch.checked = localStorage.getItem('autoStartSwitch') == null ? true : localStorage.getItem('autoStartSwitch') === 'true';\nmuteSwitch.checked = localStorage.getItem('muteSwitch') == null ? false : localStorage.getItem('muteSwitch') === 'true';\nnoDeviceSwitch.checked = localStorage.getItem('noDeviceSwitch') == null ? true : localStorage.getItem('noDeviceSwitch') === 'true';\nworkSoundSelector.value = localStorage.getItem('workSoundSelector') == null ? 'marimba' : localStorage.getItem('workSoundSelector');\nbreakSoundSelector.value = localStorage.getItem('breakSoundSelector') == null ? 'marimba' : localStorage.getItem('breakSoundSelector');\nchangeSound(workSoundSelector, false);\nchangeSound(breakSoundSelector, false);\nupdateDarkMode();\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Misc/Settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "settingsButton",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~settingsButton",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "settingsPopup",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~settingsPopup",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "timeInputs",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~timeInputs",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "darkModeSwitch",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~darkModeSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "workColorPicker",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~workColorPicker",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "shortColorPicker",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~shortColorPicker",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "longColorPicker",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~longColorPicker",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "autoStartSwitch",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~autoStartSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "muteSwitch",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~muteSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "noDeviceSwitch",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~noDeviceSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "workSoundSelector",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~workSoundSelector",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "the selector for work sound",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSelectElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "breakSoundSelector",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~breakSoundSelector",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "the selector for break sound",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSelectElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "root",
    "memberof": "js/Misc/Settings.js",
    "static": true,
    "longname": "js/Misc/Settings.js~root",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "colorShade",
    "memberof": "js/Misc/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Settings.js~colorShade",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "Anon function that shades a color.\ncol = input color you want to change in #RRGGBB format\namt = percentage amount you want to shade (-ve is darker)",
    "lineNumber": 99,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      },
      {
        "name": "amt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "getFontColor",
    "memberof": "js/Misc/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Settings.js~getFontColor",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "updateDarkMode",
    "memberof": "js/Misc/Settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Settings.js~updateDarkMode",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Settings.js",
    "importStyle": null,
    "description": "Update the theme of the page based on darkModeSwitch",
    "lineNumber": 186,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "js/Misc/Sounds.js",
    "content": "/**\n * audio element for alert\n * @type {HTMLAudioElement}\n */\nconst alert = document.getElementById('alert-sound');\n\nalert.volume = 0.3;\n/**\n * the selector for work sound\n * @type {HTMLSelectElement}\n */\nconst workSoundSelector = document.getElementById('workSoundSelector');\n/**\n * the selector for break sound\n * @type {HTMLSelectElement}\n */\nconst breakSoundSelector = document.getElementById('breakSoundSelector');\n/**\n * string constant for marimba alarm path\n * @type {String}\n */\nconst marimba = './assets/audio/marimba.mp3';\n/**\n * string constant for microwave alarm path\n * @type {String}\n */\nconst microwave = './assets/audio/microwave.mp3';\n/**\n * string constant for kitchen alarm path\n * @type {String}\n */\nconst kitchen = './assets/audio/kitchen.mp3';\n/**\n * string constant for kitchen alarm path\n * @type {String}\n */\nconst fire = './assets/audio/fire-alarm.mp3';\n/**\n* string constant for kitchen alarm path\n* @type {String}\n*/\nconst item = './assets/audio/item.mp3';\n/**\n* string constant for kitchen alarm path\n* @type {String}\n*/\nconst ringtone = './assets/audio/ringtone.mp3';\n/**\n * mute switch element\n * @type {HTMLInputElement}\n */\nconst muteSwitch = document.getElementById('muteSwitch');\n/**\n * global to hold current selected path\n * @type {String}\n */\nlet workModeSoundPath = marimba;\n/**\n * global to hold current selected path\n * @type {String}\n */\nlet breakModeSoundPath = marimba;\n\n/**\n * Function that handles the logic for playing the sound\n * upon switching to work mode.\n */\nexport function workModeSound() {\n  if (muteSwitch.checked === true) {\n    return;\n  }\n  alert.setAttribute('src', workModeSoundPath);\n  alert.play();\n}\n\n/**\n * Function that handles the logic for playing the sound\n * upon switching to break mode.\n */\nexport function breakModeSound() {\n  if (muteSwitch.checked === true) {\n    return;\n  }\n  alert.setAttribute('src', breakModeSoundPath);\n  alert.play();\n}\n\n/**\n * Handles the changing of the sounds in settings.\n * @param {HTMLSelectElement} soundSelector - the sound selector element in settings\n * @param {Boolean} playSound - whether to play sound when settings is changed\n */\nexport function changeSound(soundSelector, playSound) {\n  let path;\n  switch (soundSelector.value) {\n    /* case 'horn':\n      path = airHorn;\n      break;\n    case 'celebration':\n      path = celebration;\n      break;\n    case 'error':\n      path = error;\n      break; */\n    case 'item':\n      path = item;\n      break;\n    case 'ringtone':\n      path = ringtone;\n      break;\n    case 'marimba':\n      path = marimba;\n      break;\n    case 'kitchen':\n      path = kitchen;\n      break;\n    case 'microwave':\n      path = microwave;\n      break;\n    case 'fire':\n      path = fire;\n      break;\n    default:\n      path = marimba;\n      break;\n  }\n  if (playSound) {\n    alert.setAttribute('src', path);\n    alert.play();\n  }\n  if (soundSelector.id === 'workSoundSelector') {\n    workModeSoundPath = path;\n  } else {\n    breakModeSoundPath = path;\n  }\n}\n\n/**\n * add event listeners to the select menus and update localStorage accordingly\n */\nworkSoundSelector.addEventListener('change', () => {\n  changeSound(workSoundSelector, !muteSwitch.checked);\n  localStorage.setItem('workSoundSelector', workSoundSelector.value);\n});\nbreakSoundSelector.addEventListener('change', () => {\n  changeSound(breakSoundSelector, !muteSwitch.checked);\n  localStorage.setItem('breakSoundSelector', breakSoundSelector.value);\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Misc/Sounds.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "alert",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~alert",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "audio element for alert",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "HTMLAudioElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "workSoundSelector",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~workSoundSelector",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "the selector for work sound",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSelectElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "breakSoundSelector",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~breakSoundSelector",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "the selector for break sound",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "HTMLSelectElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "marimba",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~marimba",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for marimba alarm path",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "microwave",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~microwave",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for microwave alarm path",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "kitchen",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~kitchen",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for kitchen alarm path",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "fire",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~fire",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for kitchen alarm path",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "item",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~item",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for kitchen alarm path",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "ringtone",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~ringtone",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "string constant for kitchen alarm path",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "muteSwitch",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~muteSwitch",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "mute switch element",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "workModeSoundPath",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~workModeSoundPath",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "global to hold current selected path",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "breakModeSoundPath",
    "memberof": "js/Misc/Sounds.js",
    "static": true,
    "longname": "js/Misc/Sounds.js~breakModeSoundPath",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": null,
    "description": "global to hold current selected path",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "workModeSound",
    "memberof": "js/Misc/Sounds.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Sounds.js~workModeSound",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": "{workModeSound}",
    "description": "Function that handles the logic for playing the sound\nupon switching to work mode.",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "breakModeSound",
    "memberof": "js/Misc/Sounds.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Sounds.js~breakModeSound",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": "{breakModeSound}",
    "description": "Function that handles the logic for playing the sound\nupon switching to break mode.",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "changeSound",
    "memberof": "js/Misc/Sounds.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/Sounds.js~changeSound",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/Sounds.js",
    "importStyle": "{changeSound}",
    "description": "Handles the changing of the sounds in settings.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLSelectElement"
        ],
        "spread": false,
        "optional": false,
        "name": "soundSelector",
        "description": "the sound selector element in settings"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "playSound",
        "description": "whether to play sound when settings is changed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "js/Misc/UtilityFunctions.js",
    "content": "// Contains all utility functions that can be used across the entire app\n\n/**\n * Used to convert a time to string that can be displayed\n * @param {Number} duration Amount of seconds to convert to string\n * @returns {String} Duration converted to string\n */\nexport function timeToString(duration) {\n  const minutes = Math.floor(duration / 60);\n  const seconds = duration % 60;\n  if (seconds < 10) {\n    return `${minutes}:0${seconds}`;\n  }\n  return `${minutes}:${seconds}`;\n}\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Misc/UtilityFunctions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "timeToString",
    "memberof": "js/Misc/UtilityFunctions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Misc/UtilityFunctions.js~timeToString",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Misc/UtilityFunctions.js",
    "importStyle": "{timeToString}",
    "description": "Used to convert a time to string that can be displayed",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Duration converted to string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Amount of seconds to convert to string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Duration converted to string"
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "js/Statistics/Statistics.js",
    "content": "import { classNames, storageItemNames } from './StatisticsVariables.js';\n\n/**\n * A class for the Statistics object. Has functions for incrementing\n * and decrementing expected and actual pomo sessions,\n * total time and work time spent, and storing distractions.\n * Also handles local storage elements for stats.\n */\nclass Statistics extends HTMLElement {\n  /**\n   * Constructor of Statistics object. Initializes all variables to zero,\n   * overwrites them from memory if available, updates DOM.\n   */\n  constructor() {\n    super();\n    /**\n     * @type {Object[]} Array that stores the distraction & which pomo session it happened during\n     */\n    this.distractionList = [];\n    /**\n     * @type {Number} Total number of minutes spent\n     */\n    this.totalMins = 0;\n    /**\n    * @type {Number} Total number of minutes spent working\n    */\n    this.workMins = 0;\n    /**\n    * @type {Number} Total number of tasks completed\n    */\n    this.tasksCompleted = 0;\n    /**\n    * @type {Number} Sum of projected number of pomo sessions expected over all Tasks\n    */\n    this.expectedPomoSessions = 0;\n    /**\n    * @type {Number} Sum of actual number of pomo sessions spent on all Tasks\n    */\n    this.actualPomoSessions = 0;\n    /**\n    * @type {Date} Start date/time stamp of current work day\n    */\n    this.sessionStartDateTime = new Date();\n    this.addHTMLChildren();\n    this.addEventListeners();\n    this.loadFromLocalStorage();\n    this.flushHistory();\n  }\n\n  /**\n   *  Adds all child HTML elements to the statistics popup\n   */\n  addHTMLChildren() {\n    /**\n     * The div to which the page is appended\n     * @type {HTMLDivElement}\n     */\n    this.parentDiv = document.getElementById('stats-info');\n\n    // Tasks Completed\n    /**\n     * Number of tasks completed\n     * @type {HTMLParagraphElement}\n     */\n    this.tasksCompletedP = document.createElement('p');\n    this.tasksCompletedP.setAttribute('id', 'stats_tasksCompleted');\n    this.tasksCompletedP.setAttribute('class', classNames.statsNumberClass);\n    /**\n     *  Label for number of tasks completed\n     * @type {HTMLParagraphElement}\n     */\n    this.tasksCompletedPLabel = document.createElement('p');\n    this.tasksCompletedPLabel.setAttribute('id', 'stats_tasksCompletedLabel');\n    this.tasksCompletedPLabel.setAttribute('class', classNames.statsLabelClass);\n    this.tasksCompletedPLabel.textContent = 'Tasks Completed';\n    this.parentDiv.appendChild(this.tasksCompletedP);\n    this.parentDiv.appendChild(this.tasksCompletedPLabel);\n\n    // Total Time Spent\n    /**\n     * Total time spent\n     * @type {HTMLParagraphElement}\n     */\n    this.timeSpent = document.createElement('p');\n    this.timeSpent.setAttribute('id', 'stats_totalTime');\n    this.timeSpent.setAttribute('class', classNames.statsNumberClass);\n    /**\n     * Label for total time spent\n     * @type {HTMLParagraphElement}\n     */\n    this.timeSpentLabel = document.createElement('p');\n    this.timeSpentLabel.setAttribute('id', 'stats_timeSpentLabel');\n    this.timeSpentLabel.setAttribute('class', classNames.statsLabelClass);\n    this.timeSpentLabel.textContent = 'Total Minutes';\n    this.parentDiv.appendChild(this.timeSpent);\n    this.parentDiv.appendChild(this.timeSpentLabel);\n\n    // Time spent working\n    /**\n     *  Total time spent working\n     * @type {HTMLParagraphElement}\n     */\n    this.timeWorking = document.createElement('p');\n    this.timeWorking.setAttribute('id', 'stats_workTime');\n    this.timeWorking.setAttribute('class', classNames.statsNumberClass);\n    /**\n     * Label for total time spent working\n     * @type {HTMLParagraphElement}\n     */\n    this.timeWorkingLabel = document.createElement('p');\n    this.timeWorkingLabel.setAttribute('id', 'stats_timeWorkingLabel');\n    this.timeWorkingLabel.setAttribute('class', classNames.statsLabelClass);\n    this.timeWorkingLabel.textContent = 'Working Minutes';\n    this.parentDiv.appendChild(this.timeWorking);\n    this.parentDiv.appendChild(this.timeWorkingLabel);\n\n    // Average time per task\n    /**\n     *  Average time per task\n     * @type {HTMLParagraphElement}\n     */\n    this.timePerTask = document.createElement('p');\n    this.timePerTask.setAttribute('id', 'stats_timePerTask');\n    this.timePerTask.setAttribute('class', classNames.statsNumberClass);\n    /**\n     * Label for avg time per task\n     * @type {HTMLParagraphElement}\n     */\n    this.timePerTaskLabel = document.createElement('p');\n    this.timePerTaskLabel.setAttribute('id', 'stats_timePerTaskLabel');\n    this.timePerTaskLabel.setAttribute('class', classNames.statsLabelClass);\n    this.timePerTaskLabel.textContent = 'Minutes per Task';\n    this.parentDiv.appendChild(this.timePerTask);\n    this.parentDiv.appendChild(this.timePerTaskLabel);\n\n    /* Adding things to Distraction Tab */\n\n    // Number of Broken Session\n    /**\n     * Total number of unique broken sessions\n     * @type {HTMLParagraphElement}\n     */\n    this.brokenSessions = document.createElement('p');\n    this.brokenSessions.setAttribute('id', 'stats_numBrokenSessions');\n    this.brokenSessions.setAttribute('class', classNames.distNumberClass);\n    /**\n     * Label for total number of unique broken sessions\n     * @type {HTMLParagraphElement}\n     */\n    this.brokenSessionsLabel = document.createElement('p');\n    this.brokenSessionsLabel.setAttribute('id', 'stats_brokenSessionsLabel');\n    this.brokenSessionsLabel.setAttribute('class', classNames.distLabelClass);\n    this.brokenSessionsLabel.textContent = 'Broken Sessions';\n    this.parentDiv.appendChild(this.brokenSessions);\n    this.parentDiv.appendChild(this.brokenSessionsLabel);\n\n    // Number of Expected Pomo Sessions;\n    /**\n     * Total projected number of pomo sessions\n     * @type {HTMLParagraphElement}\n     */\n    this.expectedPomoSessionsData = document.createElement('p');\n    this.expectedPomoSessionsData.setAttribute('id', 'stats_expectedPomoSesh');\n    this.expectedPomoSessionsData.setAttribute('class', classNames.statsNumberClass);\n    /**\n     * Label for projected number of pomo sessions\n     * @type {HTMLParagraphElement}\n     */\n    this.expectedPomoSessionsLabel = document.createElement('p');\n    this.expectedPomoSessionsLabel.setAttribute('id', 'stats_expectedPomoSesLabel');\n    this.expectedPomoSessionsLabel.setAttribute('class', classNames.statsLabelClass);\n    this.expectedPomoSessionsLabel.textContent = 'Expected Pomo Sessions';\n    this.parentDiv.appendChild(this.expectedPomoSessionsData);\n    this.parentDiv.appendChild(this.expectedPomoSessionsLabel);\n\n    // Number of Actual Pomo Sessions\n    /**\n     * Total number of working pomo sessions\n     * @type {HTMLParagraphElement}\n     */\n    this.actualPomoSessionsData = document.createElement('p');\n    this.actualPomoSessionsData.setAttribute('id', 'stats_actualPomo');\n    this.actualPomoSessionsData.setAttribute('class', classNames.statsNumberClass);\n    /**\n     * Label for total number of working pomo sessions\n     * @type {HTMLParagraphElement} L\n     */\n    this.actualPomoSessionsLabel = document.createElement('p');\n    this.actualPomoSessionsLabel.setAttribute('id', 'stats_actualPomoSesLabel');\n    this.actualPomoSessionsLabel.setAttribute('class', classNames.statsLabelClass);\n    this.actualPomoSessionsLabel.textContent = 'Actual Pomo Sessions';\n    this.parentDiv.appendChild(this.actualPomoSessionsData);\n    this.parentDiv.appendChild(this.actualPomoSessionsLabel);\n\n    // Average Number of Distractions Per Task\n    /**\n     * Average number of distractions per task\n     * @type {HTMLParagraphElement}\n     */\n    this.avgDistractions = document.createElement('p');\n    this.avgDistractions.setAttribute('id', 'dist_avgDistractions');\n    this.avgDistractions.setAttribute('class', classNames.distNumberClass);\n    /**\n     * Label for average distractions per task\n     * @type {HTMLParagraphElement}\n     */\n    this.avgDistractionsLabel = document.createElement('p');\n    this.avgDistractionsLabel.setAttribute('id', 'dist_avgDistractionLabel');\n    this.avgDistractionsLabel.setAttribute('class', classNames.distLabelClass);\n    this.avgDistractionsLabel.textContent = 'Average Distractions Per Task';\n    this.parentDiv.appendChild(this.avgDistractions);\n    this.parentDiv.appendChild(this.avgDistractionsLabel);\n\n    // Distraction List\n    /**\n     * List of distractions\n     * @type {HTMLUListElement}\n     */\n    this.distList = document.createElement('ul');\n    this.distList.setAttribute('class', 'dist-list');\n    this.parentDiv.appendChild(this.distList);\n    /**\n     * @type {HTMLParagraphElement} Label for list of distractions\n     */\n    this.distListLabel = document.createElement('p');\n    this.distListLabel.setAttribute('id', 'dist_listLabel');\n    this.distListLabel.setAttribute('class', classNames.distLabelClass);\n    this.distListLabel.textContent = 'Distraction List';\n    this.parentDiv.appendChild(this.distListLabel);\n  }\n\n  /**\n   *  Creates a list item for each logged distraction\n   */\n  updateDistractionList() {\n    const content = document.getElementsByClassName('distItem');\n    let i;\n    if (content.length === 0) {\n      i = 0;\n    } else {\n      i = content.length;\n    }\n    while (i < this.distractionList.length) {\n      /**\n       * @type {HTMLLIElement} Row for distraction\n       */\n      this.listElement = document.createElement('li');\n      this.listElement.setAttribute('class', 'distItem');\n      this.listElement.textContent = this.distractionList[i].description;\n      this.distList.appendChild(this.listElement);\n      i += 1;\n    }\n  }\n\n  /**\n   *  Creates event listeners for toggling tabs within the stats popup\n   */\n  addEventListeners() {\n    const statsDistractBtn = document.getElementById('distraction');\n    const statsTabBtn = document.getElementById('data');\n\n    /*\n    Clicking the Distraction button on the Statistics popup generates the\n    distraction views and hides the data information\n    */\n    statsDistractBtn.addEventListener('click', () => {\n      statsTabBtn.className = classNames.nonActiveTabClass;\n      let content = document.getElementsByClassName(classNames.statsNumberClass);\n      let contentlabel = document.getElementsByClassName(classNames.statsLabelClass);\n      for (let i = 0; i < content.length; i += 1) {\n        content[i].style.display = 'none';\n        contentlabel[i].style.display = 'none';\n      }\n      content = document.getElementsByClassName(classNames.distNumberClass);\n      contentlabel = document.getElementsByClassName(classNames.distLabelClass);\n      document.getElementsByClassName('dist-list')[0].style.display = 'inline-block';\n      for (let i = 0; i < content.length; i += 1) {\n        content[i].style.display = 'block';\n      }\n      for (let i = 0; i < contentlabel.length; i += 1) {\n        contentlabel[i].style.display = 'block';\n      }\n      statsDistractBtn.className = classNames.activeTabClass;\n    });\n\n    /*\n      Clicking on Data button within the Statistics popup generates\n      the data views and hides distraction data\n    */\n    statsTabBtn.addEventListener('click', () => {\n      statsDistractBtn.className = classNames.nonActiveTabClass;\n      let content = document.getElementsByClassName(classNames.distNumberClass);\n      let contentlabel = document.getElementsByClassName(classNames.distLabelClass);\n      for (let i = 0; i < content.length; i += 1) {\n        content[i].style.display = 'none';\n      }\n      for (let i = 0; i < contentlabel.length; i += 1) {\n        contentlabel[i].style.display = 'none';\n      }\n      document.getElementsByClassName('dist-list')[0].style.display = 'none';\n      content = document.getElementsByClassName(classNames.statsNumberClass);\n      contentlabel = document.getElementsByClassName(classNames.statsLabelClass);\n      for (let i = 0; i < content.length; i += 1) {\n        content[i].style.display = 'block';\n        contentlabel[i].style.display = 'block';\n      }\n      statsTabBtn.className = classNames.activeTabClass;\n    });\n\n    // Clicking outside of the popup closes the popup\n    document.getElementById('overlay').addEventListener('click', () => {\n      document.getElementById('close-stats-button').click();\n      document.getElementById('overlay').style.animation = '';\n    });\n  }\n\n  /**\n   *  Updates the HTML elements to display values of local variables.\n   * Called when stats button is called.\n   */\n  updateDom() {\n    this.timePerTask.textContent = this.getAverageTimePerTask();\n    this.tasksCompletedP.textContent = this.tasksCompleted;\n    this.timeWorking.textContent = this.workMins;\n    this.timeSpent.textContent = this.totalMins;\n    this.brokenSessions.textContent = this.getNumUniqueDistractions();\n    this.avgDistractions.textContent = this.getAvgDistractionsPerTask();\n    this.expectedPomoSessionsData.textContent = this.expectedPomoSessions;\n    this.actualPomoSessionsData.textContent = this.actualPomoSessions;\n    this.updateDistractionList();\n  }\n\n  /**\n   *  Increments by one every time a task is marked as completed\n   */\n  incrementTasksCompleted() {\n    this.tasksCompleted += 1;\n    this.updateMinorLocalStorage();\n  }\n\n  /**\n   *  Decrements by one every time a task is marked as not-completed given that\n   * there are tasks that can be uncompleted. Updates local storage when called.\n   */\n  decrementTasksCompleted() {\n    if (this.tasksCompleted > 0) {\n      this.tasksCompleted -= 1;\n      this.updateMinorLocalStorage();\n    } // else I'm interested to see how you got there\n  }\n\n  /**\n   * Adds a distraction (represented by a JSON object) to the list of distractions.\n   * Updates local storage when called.\n   * @param {JSON Object} distraction Distraction to be added\n   */\n  addDistraction(distraction) {\n    this.distractionList.push(distraction);\n    this.updateMinorLocalStorage();\n  }\n\n  /**\n   *  Gets the number of broken work sessions. If multiple distractions\n   * during one work session occurred, only counts as one unique broken pomo session.\n   * @returns {Number} Number of disrupted work sessions\n   */\n  getNumUniqueDistractions() {\n    const uniqueDistractionId = new Set(this.distractionList.map((item) => item.pomoSessionId));\n    return uniqueDistractionId.size;\n  }\n\n  /**\n   *  Counts average number of distractions per task\n   * @returns {Number} Average number of distractions per task rounded to the nearest tenth\n   */\n  getAvgDistractionsPerTask() {\n    if (this.tasksCompleted === 0) {\n      return 0;\n    }\n    const rawNumber = this.distractionList.length / this.tasksCompleted;\n    return Math.round(rawNumber * 10) / 10;\n  }\n\n  /**\n   *  Increments the total time spent. Updates local storage when called.\n   * @param {Number} numMins Number of minutes to increment count by\n   */\n  addTimeSpent(numMins) {\n    this.totalMins += (numMins * 1);\n    this.updateMinorLocalStorage();\n  }\n\n  /**\n   *  Increments the work time spent. When work time incremented, so is total time spent\n   * (runs as separate method call to addTimeSpent())\n   * @param {Number} numMins Number of minutes to increment work count by\n   */\n  addWorkTime(numMins) {\n    this.workMins += (numMins * 1);\n    this.addTimeSpent(numMins);\n  }\n\n  /**\n   *  Increments the planned number of pomo sessions for the work day.\n   * Should be called each time a task is added.\n   * @param {Number} numSessions Number of sessions to increment count by\n   */\n  addExpectedPomoSessions(numSessions) {\n    this.expectedPomoSessions += numSessions;\n    this.updateMinorLocalStorage();\n  }\n\n  /**\n   *  Decrements the planned number of pomo sessions for the work day.\n   * Should be called each time a task is deleted. Only decrements if new tasks\n   * were added during the current work day.\n   * @param {Number} numSessions Number of sessions to decrement count by\n   */\n  deleteExpectedPomoSessions(numSessions) {\n    if (this.expectedPomoSessions >= numSessions) {\n      this.expectedPomoSessions -= numSessions;\n      this.updateMinorLocalStorage();\n    } // else I'm interested how you got here\n  }\n\n  /**\n   * Increments the number of completed pomo sessions for the work day.\n   * Should be called each time the timer finishes a work session.\n   * Updates local storage when called\n   */\n  incrementActualPomoSessions() {\n    this.actualPomoSessions += 1;\n    this.updateMinorLocalStorage();\n  }\n\n  /**\n   * @returns {Number} Average work minutes per completed task rounded to the nearest whole minute\n   */\n  getAverageTimePerTask() {\n    if (this.tasksCompleted > 0) {\n      return Math.round(this.workMins / this.tasksCompleted);\n    }\n    return 0;\n  }\n\n  /**\n   *  Loads all variables from local storage or sets them to zero if not found\n   */\n  loadFromLocalStorage() {\n    /**\n     * @type {Object[]} Loading variables as strings from local storage\n     */\n    this.history = JSON.parse(localStorage.getItem('statsHistory'));\n    if (this.history === null) {\n      this.history = [];\n    }\n    this.totalMins = localStorage.getItem(storageItemNames.totalMins);\n    this.workMins = localStorage.getItem(storageItemNames.workMins);\n    this.tasksCompleted = localStorage.getItem(storageItemNames.tasksCompleted);\n    this.expectedPomoSessions = localStorage.getItem(storageItemNames.expectedPomoSessions);\n    this.actualPomoSessions = localStorage.getItem(storageItemNames.actualPomoSessions);\n    this.distractionList = localStorage.getItem(storageItemNames.currDistractionList);\n    this.sessionStartDateTime = localStorage.getItem(storageItemNames.startDateTime);\n\n    /*\n    If string was not found, set to zero/empty value.\n    If string was found, parse the string for it's value\n    */\n    this.totalMins = ((this.totalMins !== null) ? parseInt(this.totalMins, 10) : 0);\n    this.workMins = ((this.workMins !== null) ? parseInt(this.workMins, 10) : 0);\n    this.tasksCompleted = ((this.tasksCompleted !== null) ? parseInt(this.tasksCompleted, 10) : 0);\n    this.expectedPomoSessions = ((this.expectedPomoSessions !== null)\n      ? parseInt(this.expectedPomoSessions, 10) : 0);\n    this.actualPomoSessions = ((this.actualPomoSessions !== null)\n      ? parseInt(this.actualPomoSessions, 10) : 0);\n    this.tasksCompleted = ((this.tasksCompleted !== null)\n      ? parseInt(this.tasksCompleted, 10) : 0);\n    this.sessionStartDateTime = ((this.sessionStartDateTime !== null)\n      ? new Date(this.sessionStartDateTime) : new Date());\n\n    /*\n    Split the list of distractions from the string into individual distractions\n    and turn date strings into date objects\n    */\n    if (this.distractionList !== null) {\n      this.distractionList = JSON.parse(this.distractionList);\n      // eslint-disable-next-line no-restricted-syntax, guard-for-in\n      for (let i = 0; i < this.distractionList.length; i += 1) {\n        // let temp = this.distractionList[i];\n        this.distractionList[i].date = new Date(this.distractionList[i].date);\n      }\n    } else {\n      this.distractionList = [];\n    }\n  }\n\n  /**\n   *  Writes all class variables to local storage\n   */\n  updateMinorLocalStorage() {\n    localStorage.setItem(storageItemNames.totalMins, this.totalMins);\n    localStorage.setItem(storageItemNames.workMins, this.workMins);\n    localStorage.setItem(storageItemNames.tasksCompleted, this.tasksCompleted);\n    localStorage.setItem(storageItemNames.expectedPomoSessions, this.expectedPomoSessions);\n    localStorage.setItem(storageItemNames.actualPomoSessions, this.actualPomoSessions);\n    localStorage.setItem(storageItemNames.currDistractionList,\n      JSON.stringify(this.distractionList));\n    localStorage.setItem(storageItemNames.startDateTime, this.sessionStartDateTime);\n  }\n\n  /**\n   *  Deletes all history records that are older than one year. To be used with\n   *  year-to-date information. Updates local storage only for history record when called.\n   */\n  flushHistory() {\n    const currDate = new Date();\n    for (let i = 0; i < this.history.length; i += 1) {\n      const diff = (currDate - new Date(this.history[i].date));\n      if (diff / (1000 * 3600 * 24 * 365) > 1) {\n        this.history.splice(i, 1);\n      }\n    }\n    localStorage.setItem('statsHistory', JSON.stringify(this.history));\n  }\n\n  /**\n   *  Sees if the last time that a day was started was earlier than 3 a.m. today.\n   * If the work day was started at 3 a.m. or later, do not clear data,\n   * treat everything as a single work day.\n   * Otherwise, would compress data into history and clear variables.\n   * @returns {Boolean} False if session started on or after 3 a.m. today. Else True.\n   */\n  dataToCompressExists() {\n    const currDate = new Date();\n    if (this.sessionStartDateTime.getFullYear() < currDate.getFullYear()) {\n      return true;\n    } if (this.sessionStartDateTime.getMonth() < currDate.getMonth()) {\n      return true;\n    } if (this.sessionStartDateTime.getDate() < currDate.getDate()) {\n      return true;\n    } if (this.sessionStartDateTime.getHours() <= 2) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Compresses necessary local variables to a history record and\n   * pushes the record to local storage.\n   * Should run when the End Day button is hit or when page loads and\n   * dataToCompressExists() true. Dispatches reset-timer event to reset timer PomoSessionId to 0.\n   */\n  compressStats() {\n    if (this.totalMins > 0) {\n      this.history.push({\n        date: this.sessionStartDateTime,\n        distractionCount: this.distractionList.length,\n        timeSpent: this.totalMins,\n      });\n      localStorage.setItem('statsHistory', JSON.stringify(this.history));\n    }\n\n    const event = new CustomEvent('reset-timer', {\n    });\n    this.dispatchEvent(event);\n  }\n\n  /**\n   *  Resets all variables back to zeroed/empty values\n   */\n  clearData() {\n    this.totalMins = 0;\n    this.workMins = 0;\n    this.tasksCompleted = 0;\n    this.expectedPomoSessions = 0;\n    this.actualPomoSessions = 0;\n    this.distractionList = [];\n    this.sessionStartDateTime = new Date();\n    this.updateMinorLocalStorage();\n  }\n}\n\ncustomElements.define('stats-block', Statistics);\nexport { Statistics };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Statistics/Statistics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "Statistics",
    "memberof": "js/Statistics/Statistics.js",
    "static": true,
    "longname": "js/Statistics/Statistics.js~Statistics",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Statistics/Statistics.js",
    "importStyle": "{Statistics}",
    "description": "A class for the Statistics object. Has functions for incrementing\nand decrementing expected and actual pomo sessions,\ntotal time and work time spent, and storing distractions.\nAlso handles local storage elements for stats.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#constructor",
    "access": "public",
    "description": "Constructor of Statistics object. Initializes all variables to zero,\noverwrites them from memory if available, updates DOM.",
    "lineNumber": 14
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "distractionList",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#distractionList",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "totalMins",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#totalMins",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "workMins",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#workMins",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "tasksCompleted",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#tasksCompleted",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "expectedPomoSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#expectedPomoSessions",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "actualPomoSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#actualPomoSessions",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "sessionStartDateTime",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#sessionStartDateTime",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "addHTMLChildren",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addHTMLChildren",
    "access": "public",
    "description": " Adds all child HTML elements to the statistics popup",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "parentDiv",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#parentDiv",
    "access": "public",
    "description": "The div to which the page is appended",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDivElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "tasksCompletedP",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#tasksCompletedP",
    "access": "public",
    "description": "Number of tasks completed",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "tasksCompletedPLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#tasksCompletedPLabel",
    "access": "public",
    "description": " Label for number of tasks completed",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "timeSpent",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timeSpent",
    "access": "public",
    "description": "Total time spent",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "timeSpentLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timeSpentLabel",
    "access": "public",
    "description": "Label for total time spent",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "timeWorking",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timeWorking",
    "access": "public",
    "description": " Total time spent working",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "timeWorkingLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timeWorkingLabel",
    "access": "public",
    "description": "Label for total time spent working",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "timePerTask",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timePerTask",
    "access": "public",
    "description": " Average time per task",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "timePerTaskLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#timePerTaskLabel",
    "access": "public",
    "description": "Label for avg time per task",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "brokenSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#brokenSessions",
    "access": "public",
    "description": "Total number of unique broken sessions",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "brokenSessionsLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#brokenSessionsLabel",
    "access": "public",
    "description": "Label for total number of unique broken sessions",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "expectedPomoSessionsData",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#expectedPomoSessionsData",
    "access": "public",
    "description": "Total projected number of pomo sessions",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "expectedPomoSessionsLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#expectedPomoSessionsLabel",
    "access": "public",
    "description": "Label for projected number of pomo sessions",
    "lineNumber": 169,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "actualPomoSessionsData",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#actualPomoSessionsData",
    "access": "public",
    "description": "Total number of working pomo sessions",
    "lineNumber": 181,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "actualPomoSessionsLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#actualPomoSessionsLabel",
    "access": "public",
    "description": "Label for total number of working pomo sessions",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "avgDistractions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#avgDistractions",
    "access": "public",
    "description": "Average number of distractions per task",
    "lineNumber": 200,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "avgDistractionsLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#avgDistractionsLabel",
    "access": "public",
    "description": "Label for average distractions per task",
    "lineNumber": 207,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "distList",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#distList",
    "access": "public",
    "description": "List of distractions",
    "lineNumber": 219,
    "type": {
      "nullable": null,
      "types": [
        "HTMLUListElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "distListLabel",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#distListLabel",
    "access": "public",
    "description": "",
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "HTMLParagraphElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "updateDistractionList",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#updateDistractionList",
    "access": "public",
    "description": " Creates a list item for each logged distraction",
    "lineNumber": 235,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "listElement",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#listElement",
    "access": "public",
    "description": "",
    "lineNumber": 247,
    "type": {
      "nullable": null,
      "types": [
        "HTMLLIElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addEventListeners",
    "access": "public",
    "description": " Creates event listeners for toggling tabs within the stats popup",
    "lineNumber": 258,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "updateDom",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#updateDom",
    "access": "public",
    "description": " Updates the HTML elements to display values of local variables.\nCalled when stats button is called.",
    "lineNumber": 321,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "incrementTasksCompleted",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#incrementTasksCompleted",
    "access": "public",
    "description": " Increments by one every time a task is marked as completed",
    "lineNumber": 336,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "decrementTasksCompleted",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#decrementTasksCompleted",
    "access": "public",
    "description": " Decrements by one every time a task is marked as not-completed given that\nthere are tasks that can be uncompleted. Updates local storage when called.",
    "lineNumber": 345,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "addDistraction",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addDistraction",
    "access": "public",
    "description": "Adds a distraction (represented by a JSON object) to the list of distractions.\nUpdates local storage when called.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSON Object"
        ],
        "spread": false,
        "optional": false,
        "name": "distraction",
        "description": "Distraction to be added"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getNumUniqueDistractions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#getNumUniqueDistractions",
    "access": "public",
    "description": " Gets the number of broken work sessions. If multiple distractions\nduring one work session occurred, only counts as one unique broken pomo session.",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Number of disrupted work sessions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Number of disrupted work sessions"
    },
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "getAvgDistractionsPerTask",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#getAvgDistractionsPerTask",
    "access": "public",
    "description": " Counts average number of distractions per task",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Average number of distractions per task rounded to the nearest tenth"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Average number of distractions per task rounded to the nearest tenth"
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "addTimeSpent",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addTimeSpent",
    "access": "public",
    "description": " Increments the total time spent. Updates local storage when called.",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numMins",
        "description": "Number of minutes to increment count by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "addWorkTime",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addWorkTime",
    "access": "public",
    "description": " Increments the work time spent. When work time incremented, so is total time spent\n(runs as separate method call to addTimeSpent())",
    "lineNumber": 398,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numMins",
        "description": "Number of minutes to increment work count by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "addExpectedPomoSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#addExpectedPomoSessions",
    "access": "public",
    "description": " Increments the planned number of pomo sessions for the work day.\nShould be called each time a task is added.",
    "lineNumber": 408,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numSessions",
        "description": "Number of sessions to increment count by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "deleteExpectedPomoSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#deleteExpectedPomoSessions",
    "access": "public",
    "description": " Decrements the planned number of pomo sessions for the work day.\nShould be called each time a task is deleted. Only decrements if new tasks\nwere added during the current work day.",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numSessions",
        "description": "Number of sessions to decrement count by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "incrementActualPomoSessions",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#incrementActualPomoSessions",
    "access": "public",
    "description": "Increments the number of completed pomo sessions for the work day.\nShould be called each time the timer finishes a work session.\nUpdates local storage when called",
    "lineNumber": 431,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "getAverageTimePerTask",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#getAverageTimePerTask",
    "access": "public",
    "description": "",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Average work minutes per completed task rounded to the nearest whole minute"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Average work minutes per completed task rounded to the nearest whole minute"
    },
    "params": []
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "loadFromLocalStorage",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#loadFromLocalStorage",
    "access": "public",
    "description": " Loads all variables from local storage or sets them to zero if not found",
    "lineNumber": 449,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "history",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#history",
    "access": "public",
    "description": "",
    "lineNumber": 453,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "updateMinorLocalStorage",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#updateMinorLocalStorage",
    "access": "public",
    "description": " Writes all class variables to local storage",
    "lineNumber": 500,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "flushHistory",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#flushHistory",
    "access": "public",
    "description": " Deletes all history records that are older than one year. To be used with\n year-to-date information. Updates local storage only for history record when called.",
    "lineNumber": 515,
    "params": [],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "dataToCompressExists",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#dataToCompressExists",
    "access": "public",
    "description": " Sees if the last time that a day was started was earlier than 3 a.m. today.\nIf the work day was started at 3 a.m. or later, do not clear data,\ntreat everything as a single work day.\nOtherwise, would compress data into history and clear variables.",
    "lineNumber": 533,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} False if session started on or after 3 a.m. today. Else True."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "False if session started on or after 3 a.m. today. Else True."
    },
    "params": []
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "compressStats",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#compressStats",
    "access": "public",
    "description": "Compresses necessary local variables to a history record and\npushes the record to local storage.\nShould run when the End Day button is hit or when page loads and\ndataToCompressExists() true. Dispatches reset-timer event to reset timer PomoSessionId to 0.",
    "lineNumber": 553,
    "params": [],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "clearData",
    "memberof": "js/Statistics/Statistics.js~Statistics",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Statistics/Statistics.js~Statistics#clearData",
    "access": "public",
    "description": " Resets all variables back to zeroed/empty values",
    "lineNumber": 571,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "js/Statistics/StatisticsVariables.js",
    "content": "/**\n * object that stores className constants\n * @type {Object}\n */\nconst classNames = {\n  statsNumberClass: 'stats-info',\n  statsLabelClass: 'stats-info-label',\n  distNumberClass: 'dist-info',\n  distLabelClass: 'dist-info-label',\n  activeTabClass: 'tab-btn-active',\n  nonActiveTabClass: 'tab-btn',\n};\n\n/**\n * object that stores local storage constants\n * @type {Object}\n */\nconst storageItemNames = {\n  totalMins: 'totalMins',\n  workMins: 'workMins',\n  tasksCompleted: 'tasksCompleted',\n  expectedPomoSessions: 'expectedPomoSessions',\n  actualPomoSessions: 'actualPomoSessions',\n  currDistractionList: 'currDistractionList',\n  startDateTime: 'startDateTime',\n};\n\nexport { classNames, storageItemNames };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Statistics/StatisticsVariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "classNames",
    "memberof": "js/Statistics/StatisticsVariables.js",
    "static": true,
    "longname": "js/Statistics/StatisticsVariables.js~classNames",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Statistics/StatisticsVariables.js",
    "importStyle": "{classNames}",
    "description": "object that stores className constants",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "storageItemNames",
    "memberof": "js/Statistics/StatisticsVariables.js",
    "static": true,
    "longname": "js/Statistics/StatisticsVariables.js~storageItemNames",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Statistics/StatisticsVariables.js",
    "importStyle": "{storageItemNames}",
    "description": "object that stores local storage constants",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "js/ThirdParty/intro.js",
    "content": "/*!\n * Intro.js v3.3.1\n * https://introjs.com\n *\n * Copyright (C) 2012-2021 Afshin Mehrabani (@afshinmeh).\n * https://raw.githubusercontent.com/usablica/intro.js/master/license.md\n *\n * Date: Sun, 07 Feb 2021 12:38:48 GMT\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.introJs = factory());\n}(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  /**\n   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically\n   *\n   * @param obj1\n   * @param obj2\n   * @returns obj3 a new object based on obj1 and obj2\n   */\n  function mergeOptions(obj1, obj2) {\n    var obj3 = {};\n    var attrname;\n\n    for (attrname in obj1) {\n      obj3[attrname] = obj1[attrname];\n    }\n\n    for (attrname in obj2) {\n      obj3[attrname] = obj2[attrname];\n    }\n\n    return obj3;\n  }\n\n  /**\n   * Mark any object with an incrementing number\n   * used for keeping track of objects\n   *\n   * @param Object obj   Any object or DOM Element\n   * @param String key\n   * @return Object\n   */\n  var stamp = function () {\n    var keys = {};\n    return function stamp(obj) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"introjs-stamp\";\n      // each group increments from 0\n      keys[key] = keys[key] || 0; // stamp only once per object\n\n      if (obj[key] === undefined) {\n        // increment key for each new object\n        obj[key] = keys[key]++;\n      }\n\n      return obj[key];\n    };\n  }();\n\n  /**\n   * Iterates arrays\n   *\n   * @param {Array} arr\n   * @param {Function} forEachFnc\n   * @param {Function} completeFnc\n   * @return {Null}\n   */\n  function forEach(arr, forEachFnc, completeFnc) {\n    // in case arr is an empty query selector node list\n    if (arr) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        forEachFnc(arr[i], i);\n      }\n    }\n\n    if (typeof completeFnc === \"function\") {\n      completeFnc();\n    }\n  }\n\n  /**\n   * DOMEvent Handles all DOM events\n   *\n   * methods:\n   *\n   * on - add event handler\n   * off - remove event\n   */\n\n  var DOMEvent = function () {\n    function DOMEvent() {\n      var events_key = \"introjs_event\";\n      /**\n       * Gets a unique ID for an event listener\n       *\n       * @param obj Object\n       * @param type event type\n       * @param listener Function\n       * @param context Object\n       * @return String\n       */\n\n      this._id = function (obj, type, listener, context) {\n        return type + stamp(listener) + (context ? \"_\".concat(stamp(context)) : \"\");\n      };\n      /**\n       * Adds event listener\n       *\n       * @param obj Object obj\n       * @param type String\n       * @param listener Function\n       * @param context Object\n       * @param useCapture Boolean\n       * @return null\n       */\n\n\n      this.on = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments);\n\n        var handler = function handler(e) {\n          return listener.call(context || obj, e || window.event);\n        };\n\n        if (\"addEventListener\" in obj) {\n          obj.addEventListener(type, handler, useCapture);\n        } else if (\"attachEvent\" in obj) {\n          obj.attachEvent(\"on\".concat(type), handler);\n        }\n\n        obj[events_key] = obj[events_key] || {};\n        obj[events_key][id] = handler;\n      };\n      /**\n       * Removes event listener\n       *\n       * @param obj Object\n       * @param type String\n       * @param listener Function\n       * @param context Object\n       * @param useCapture Boolean\n       * @return null\n       */\n\n\n      this.off = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments);\n\n        var handler = obj[events_key] && obj[events_key][id];\n\n        if (!handler) {\n          return;\n        }\n\n        if (\"removeEventListener\" in obj) {\n          obj.removeEventListener(type, handler, useCapture);\n        } else if (\"detachEvent\" in obj) {\n          obj.detachEvent(\"on\".concat(type), handler);\n        }\n\n        obj[events_key][id] = null;\n      };\n    }\n\n    return new DOMEvent();\n  }();\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var check = function (it) {\n    return it && it.Math == Math && it;\n  };\n\n  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n  var global_1 =\n    // eslint-disable-next-line no-undef\n    check(typeof globalThis == 'object' && globalThis) ||\n    check(typeof window == 'object' && window) ||\n    check(typeof self == 'object' && self) ||\n    check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n    // eslint-disable-next-line no-new-func\n    (function () { return this; })() || Function('return this')();\n\n  var fails = function (exec) {\n    try {\n      return !!exec();\n    } catch (error) {\n      return true;\n    }\n  };\n\n  // Detect IE8's incomplete defineProperty implementation\n  var descriptors = !fails(function () {\n    return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n  });\n\n  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;\n  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n  // Nashorn ~ JDK8 bug\n  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n  // `Object.prototype.propertyIsEnumerable` method implementation\n  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\n  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n    var descriptor = getOwnPropertyDescriptor(this, V);\n    return !!descriptor && descriptor.enumerable;\n  } : nativePropertyIsEnumerable;\n\n  var objectPropertyIsEnumerable = {\n  \tf: f\n  };\n\n  var createPropertyDescriptor = function (bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var toString = {}.toString;\n\n  var classofRaw = function (it) {\n    return toString.call(it).slice(8, -1);\n  };\n\n  var split = ''.split;\n\n  // fallback for non-array-like ES3 and non-enumerable old V8 strings\n  var indexedObject = fails(function () {\n    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n    // eslint-disable-next-line no-prototype-builtins\n    return !Object('z').propertyIsEnumerable(0);\n  }) ? function (it) {\n    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);\n  } : Object;\n\n  // `RequireObjectCoercible` abstract operation\n  // https://tc39.es/ecma262/#sec-requireobjectcoercible\n  var requireObjectCoercible = function (it) {\n    if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n    return it;\n  };\n\n  // toObject with fallback for non-array-like ES3 strings\n\n\n\n  var toIndexedObject = function (it) {\n    return indexedObject(requireObjectCoercible(it));\n  };\n\n  var isObject = function (it) {\n    return typeof it === 'object' ? it !== null : typeof it === 'function';\n  };\n\n  // `ToPrimitive` abstract operation\n  // https://tc39.es/ecma262/#sec-toprimitive\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n  var toPrimitive = function (input, PREFERRED_STRING) {\n    if (!isObject(input)) return input;\n    var fn, val;\n    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var hasOwnProperty = {}.hasOwnProperty;\n\n  var has = function (it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var document$1 = global_1.document;\n  // typeof document.createElement is 'object' in old IE\n  var EXISTS = isObject(document$1) && isObject(document$1.createElement);\n\n  var documentCreateElement = function (it) {\n    return EXISTS ? document$1.createElement(it) : {};\n  };\n\n  // Thank's IE8 for his funny defineProperty\n  var ie8DomDefine = !descriptors && !fails(function () {\n    return Object.defineProperty(documentCreateElement('div'), 'a', {\n      get: function () { return 7; }\n    }).a != 7;\n  });\n\n  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\n  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n    O = toIndexedObject(O);\n    P = toPrimitive(P, true);\n    if (ie8DomDefine) try {\n      return nativeGetOwnPropertyDescriptor(O, P);\n    } catch (error) { /* empty */ }\n    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);\n  };\n\n  var objectGetOwnPropertyDescriptor = {\n  \tf: f$1\n  };\n\n  var anObject = function (it) {\n    if (!isObject(it)) {\n      throw TypeError(String(it) + ' is not an object');\n    } return it;\n  };\n\n  var nativeDefineProperty = Object.defineProperty;\n\n  // `Object.defineProperty` method\n  // https://tc39.es/ecma262/#sec-object.defineproperty\n  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n    anObject(O);\n    P = toPrimitive(P, true);\n    anObject(Attributes);\n    if (ie8DomDefine) try {\n      return nativeDefineProperty(O, P, Attributes);\n    } catch (error) { /* empty */ }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n\n  var objectDefineProperty = {\n  \tf: f$2\n  };\n\n  var createNonEnumerableProperty = descriptors ? function (object, key, value) {\n    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var setGlobal = function (key, value) {\n    try {\n      createNonEnumerableProperty(global_1, key, value);\n    } catch (error) {\n      global_1[key] = value;\n    } return value;\n  };\n\n  var SHARED = '__core-js_shared__';\n  var store = global_1[SHARED] || setGlobal(SHARED, {});\n\n  var sharedStore = store;\n\n  var functionToString = Function.toString;\n\n  // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\n  if (typeof sharedStore.inspectSource != 'function') {\n    sharedStore.inspectSource = function (it) {\n      return functionToString.call(it);\n    };\n  }\n\n  var inspectSource = sharedStore.inspectSource;\n\n  var WeakMap = global_1.WeakMap;\n\n  var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n\n  var shared = createCommonjsModule(function (module) {\n  (module.exports = function (key, value) {\n    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});\n  })('versions', []).push({\n    version: '3.8.3',\n    mode:  'global',\n    copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\n  });\n  });\n\n  var id = 0;\n  var postfix = Math.random();\n\n  var uid = function (key) {\n    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n  };\n\n  var keys = shared('keys');\n\n  var sharedKey = function (key) {\n    return keys[key] || (keys[key] = uid(key));\n  };\n\n  var hiddenKeys = {};\n\n  var WeakMap$1 = global_1.WeakMap;\n  var set, get, has$1;\n\n  var enforce = function (it) {\n    return has$1(it) ? get(it) : set(it, {});\n  };\n\n  var getterFor = function (TYPE) {\n    return function (it) {\n      var state;\n      if (!isObject(it) || (state = get(it)).type !== TYPE) {\n        throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n      } return state;\n    };\n  };\n\n  if (nativeWeakMap) {\n    var store$1 = sharedStore.state || (sharedStore.state = new WeakMap$1());\n    var wmget = store$1.get;\n    var wmhas = store$1.has;\n    var wmset = store$1.set;\n    set = function (it, metadata) {\n      metadata.facade = it;\n      wmset.call(store$1, it, metadata);\n      return metadata;\n    };\n    get = function (it) {\n      return wmget.call(store$1, it) || {};\n    };\n    has$1 = function (it) {\n      return wmhas.call(store$1, it);\n    };\n  } else {\n    var STATE = sharedKey('state');\n    hiddenKeys[STATE] = true;\n    set = function (it, metadata) {\n      metadata.facade = it;\n      createNonEnumerableProperty(it, STATE, metadata);\n      return metadata;\n    };\n    get = function (it) {\n      return has(it, STATE) ? it[STATE] : {};\n    };\n    has$1 = function (it) {\n      return has(it, STATE);\n    };\n  }\n\n  var internalState = {\n    set: set,\n    get: get,\n    has: has$1,\n    enforce: enforce,\n    getterFor: getterFor\n  };\n\n  var redefine = createCommonjsModule(function (module) {\n  var getInternalState = internalState.get;\n  var enforceInternalState = internalState.enforce;\n  var TEMPLATE = String(String).split('String');\n\n  (module.exports = function (O, key, value, options) {\n    var unsafe = options ? !!options.unsafe : false;\n    var simple = options ? !!options.enumerable : false;\n    var noTargetGet = options ? !!options.noTargetGet : false;\n    var state;\n    if (typeof value == 'function') {\n      if (typeof key == 'string' && !has(value, 'name')) {\n        createNonEnumerableProperty(value, 'name', key);\n      }\n      state = enforceInternalState(value);\n      if (!state.source) {\n        state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\n      }\n    }\n    if (O === global_1) {\n      if (simple) O[key] = value;\n      else setGlobal(key, value);\n      return;\n    } else if (!unsafe) {\n      delete O[key];\n    } else if (!noTargetGet && O[key]) {\n      simple = true;\n    }\n    if (simple) O[key] = value;\n    else createNonEnumerableProperty(O, key, value);\n  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n  })(Function.prototype, 'toString', function toString() {\n    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n  });\n  });\n\n  var path = global_1;\n\n  var aFunction = function (variable) {\n    return typeof variable == 'function' ? variable : undefined;\n  };\n\n  var getBuiltIn = function (namespace, method) {\n    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])\n      : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];\n  };\n\n  var ceil = Math.ceil;\n  var floor = Math.floor;\n\n  // `ToInteger` abstract operation\n  // https://tc39.es/ecma262/#sec-tointeger\n  var toInteger = function (argument) {\n    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n  };\n\n  var min = Math.min;\n\n  // `ToLength` abstract operation\n  // https://tc39.es/ecma262/#sec-tolength\n  var toLength = function (argument) {\n    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min;\n\n  // Helper for a popular repeating case of the spec:\n  // Let integer be ? ToInteger(index).\n  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\n  var toAbsoluteIndex = function (index, length) {\n    var integer = toInteger(index);\n    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);\n  };\n\n  // `Array.prototype.{ indexOf, includes }` methods implementation\n  var createMethod = function (IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = toIndexedObject($this);\n      var length = toLength(O.length);\n      var index = toAbsoluteIndex(fromIndex, length);\n      var value;\n      // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++];\n        // eslint-disable-next-line no-self-compare\n        if (value != value) return true;\n      // Array#indexOf ignores holes, Array#includes - not\n      } else for (;length > index; index++) {\n        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n      } return !IS_INCLUDES && -1;\n    };\n  };\n\n  var arrayIncludes = {\n    // `Array.prototype.includes` method\n    // https://tc39.es/ecma262/#sec-array.prototype.includes\n    includes: createMethod(true),\n    // `Array.prototype.indexOf` method\n    // https://tc39.es/ecma262/#sec-array.prototype.indexof\n    indexOf: createMethod(false)\n  };\n\n  var indexOf = arrayIncludes.indexOf;\n\n\n  var objectKeysInternal = function (object, names) {\n    var O = toIndexedObject(object);\n    var i = 0;\n    var result = [];\n    var key;\n    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n    // Don't enum bug & hidden keys\n    while (names.length > i) if (has(O, key = names[i++])) {\n      ~indexOf(result, key) || result.push(key);\n    }\n    return result;\n  };\n\n  // IE8- don't enum bug keys\n  var enumBugKeys = [\n    'constructor',\n    'hasOwnProperty',\n    'isPrototypeOf',\n    'propertyIsEnumerable',\n    'toLocaleString',\n    'toString',\n    'valueOf'\n  ];\n\n  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');\n\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertynames\n  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n    return objectKeysInternal(O, hiddenKeys$1);\n  };\n\n  var objectGetOwnPropertyNames = {\n  \tf: f$3\n  };\n\n  var f$4 = Object.getOwnPropertySymbols;\n\n  var objectGetOwnPropertySymbols = {\n  \tf: f$4\n  };\n\n  // all object keys, includes non-enumerable and symbols\n  var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n    var keys = objectGetOwnPropertyNames.f(anObject(it));\n    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;\n    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n  };\n\n  var copyConstructorProperties = function (target, source) {\n    var keys = ownKeys(source);\n    var defineProperty = objectDefineProperty.f;\n    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  };\n\n  var replacement = /#|\\.prototype\\./;\n\n  var isForced = function (feature, detection) {\n    var value = data[normalize(feature)];\n    return value == POLYFILL ? true\n      : value == NATIVE ? false\n      : typeof detection == 'function' ? fails(detection)\n      : !!detection;\n  };\n\n  var normalize = isForced.normalize = function (string) {\n    return String(string).replace(replacement, '.').toLowerCase();\n  };\n\n  var data = isForced.data = {};\n  var NATIVE = isForced.NATIVE = 'N';\n  var POLYFILL = isForced.POLYFILL = 'P';\n\n  var isForced_1 = isForced;\n\n  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\n\n\n\n\n\n\n  /*\n    options.target      - name of the target object\n    options.global      - target is the global object\n    options.stat        - export as static methods of target\n    options.proto       - export as prototype methods of target\n    options.real        - real prototype method for the `pure` version\n    options.forced      - export even if the native feature is available\n    options.bind        - bind methods to the target, required for the `pure` version\n    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n    options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n    options.sham        - add a flag to not completely full polyfills\n    options.enumerable  - export as enumerable property\n    options.noTargetGet - prevent calling a getter on target\n  */\n  var _export = function (options, source) {\n    var TARGET = options.target;\n    var GLOBAL = options.global;\n    var STATIC = options.stat;\n    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n    if (GLOBAL) {\n      target = global_1;\n    } else if (STATIC) {\n      target = global_1[TARGET] || setGlobal(TARGET, {});\n    } else {\n      target = (global_1[TARGET] || {}).prototype;\n    }\n    if (target) for (key in source) {\n      sourceProperty = source[key];\n      if (options.noTargetGet) {\n        descriptor = getOwnPropertyDescriptor$1(target, key);\n        targetProperty = descriptor && descriptor.value;\n      } else targetProperty = target[key];\n      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n      // contained in target\n      if (!FORCED && targetProperty !== undefined) {\n        if (typeof sourceProperty === typeof targetProperty) continue;\n        copyConstructorProperties(sourceProperty, targetProperty);\n      }\n      // add a flag to not completely full polyfills\n      if (options.sham || (targetProperty && targetProperty.sham)) {\n        createNonEnumerableProperty(sourceProperty, 'sham', true);\n      }\n      // extend global\n      redefine(target, key, sourceProperty, options);\n    }\n  };\n\n  // `RegExp.prototype.flags` getter implementation\n  // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\n  var regexpFlags = function () {\n    var that = anObject(this);\n    var result = '';\n    if (that.global) result += 'g';\n    if (that.ignoreCase) result += 'i';\n    if (that.multiline) result += 'm';\n    if (that.dotAll) result += 's';\n    if (that.unicode) result += 'u';\n    if (that.sticky) result += 'y';\n    return result;\n  };\n\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n  // so we use an intermediate function.\n  function RE(s, f) {\n    return RegExp(s, f);\n  }\n\n  var UNSUPPORTED_Y = fails(function () {\n    // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n    var re = RE('a', 'y');\n    re.lastIndex = 2;\n    return re.exec('abcd') != null;\n  });\n\n  var BROKEN_CARET = fails(function () {\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n    var re = RE('^r', 'gy');\n    re.lastIndex = 2;\n    return re.exec('str') != null;\n  });\n\n  var regexpStickyHelpers = {\n  \tUNSUPPORTED_Y: UNSUPPORTED_Y,\n  \tBROKEN_CARET: BROKEN_CARET\n  };\n\n  var nativeExec = RegExp.prototype.exec;\n  // This always refers to the native implementation, because the\n  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n  // which loads this file before patching the method.\n  var nativeReplace = String.prototype.replace;\n\n  var patchedExec = nativeExec;\n\n  var UPDATES_LAST_INDEX_WRONG = (function () {\n    var re1 = /a/;\n    var re2 = /b*/g;\n    nativeExec.call(re1, 'a');\n    nativeExec.call(re2, 'a');\n    return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n  })();\n\n  var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;\n\n  // nonparticipating capturing group, copied from es5-shim's String#split patch.\n  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\n  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;\n\n  if (PATCH) {\n    patchedExec = function exec(str) {\n      var re = this;\n      var lastIndex, reCopy, match, i;\n      var sticky = UNSUPPORTED_Y$1 && re.sticky;\n      var flags = regexpFlags.call(re);\n      var source = re.source;\n      var charsAdded = 0;\n      var strCopy = str;\n\n      if (sticky) {\n        flags = flags.replace('y', '');\n        if (flags.indexOf('g') === -1) {\n          flags += 'g';\n        }\n\n        strCopy = String(str).slice(re.lastIndex);\n        // Support anchored sticky behavior.\n        if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n          source = '(?: ' + source + ')';\n          strCopy = ' ' + strCopy;\n          charsAdded++;\n        }\n        // ^(? + rx + ) is needed, in combination with some str slicing, to\n        // simulate the 'y' flag.\n        reCopy = new RegExp('^(?:' + source + ')', flags);\n      }\n\n      if (NPCG_INCLUDED) {\n        reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n      }\n      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n      match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n      if (sticky) {\n        if (match) {\n          match.input = match.input.slice(charsAdded);\n          match[0] = match[0].slice(charsAdded);\n          match.index = re.lastIndex;\n          re.lastIndex += match[0].length;\n        } else re.lastIndex = 0;\n      } else if (UPDATES_LAST_INDEX_WRONG && match) {\n        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n      }\n      if (NPCG_INCLUDED && match && match.length > 1) {\n        // Fix browsers whose `exec` methods don't consistently return `undefined`\n        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n        nativeReplace.call(match[0], reCopy, function () {\n          for (i = 1; i < arguments.length - 2; i++) {\n            if (arguments[i] === undefined) match[i] = undefined;\n          }\n        });\n      }\n\n      return match;\n    };\n  }\n\n  var regexpExec = patchedExec;\n\n  // `RegExp.prototype.exec` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype.exec\n  _export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {\n    exec: regexpExec\n  });\n\n  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {\n    // Chrome 38 Symbol has incorrect toString conversion\n    // eslint-disable-next-line no-undef\n    return !String(Symbol());\n  });\n\n  var useSymbolAsUid = nativeSymbol\n    // eslint-disable-next-line no-undef\n    && !Symbol.sham\n    // eslint-disable-next-line no-undef\n    && typeof Symbol.iterator == 'symbol';\n\n  var WellKnownSymbolsStore = shared('wks');\n  var Symbol$1 = global_1.Symbol;\n  var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;\n\n  var wellKnownSymbol = function (name) {\n    if (!has(WellKnownSymbolsStore, name)) {\n      if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];\n      else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n    } return WellKnownSymbolsStore[name];\n  };\n\n  // TODO: Remove from `core-js@4` since it's moved to entry points\n\n\n\n\n\n\n\n  var SPECIES = wellKnownSymbol('species');\n\n  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n    // #replace needs built-in support for named groups.\n    // #match works fine because it just return the exec results, even if it has\n    // a \"grops\" property.\n    var re = /./;\n    re.exec = function () {\n      var result = [];\n      result.groups = { a: '7' };\n      return result;\n    };\n    return ''.replace(re, '$<a>') !== '7';\n  });\n\n  // IE <= 11 replaces $0 with the whole match, as if it was $&\n  // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\n  var REPLACE_KEEPS_$0 = (function () {\n    return 'a'.replace(/./, '$0') === '$0';\n  })();\n\n  var REPLACE = wellKnownSymbol('replace');\n  // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n    if (/./[REPLACE]) {\n      return /./[REPLACE]('a', '$0') === '';\n    }\n    return false;\n  })();\n\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  // Weex JS has frozen built-in prototypes, so use try / catch wrapper\n  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n    var re = /(?:)/;\n    var originalExec = re.exec;\n    re.exec = function () { return originalExec.apply(this, arguments); };\n    var result = 'ab'.split(re);\n    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n  });\n\n  var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {\n    var SYMBOL = wellKnownSymbol(KEY);\n\n    var DELEGATES_TO_SYMBOL = !fails(function () {\n      // String methods call symbol-named RegEp methods\n      var O = {};\n      O[SYMBOL] = function () { return 7; };\n      return ''[KEY](O) != 7;\n    });\n\n    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n      // Symbol-named RegExp methods call .exec\n      var execCalled = false;\n      var re = /a/;\n\n      if (KEY === 'split') {\n        // We can't use real regex here since it causes deoptimization\n        // and serious performance degradation in V8\n        // https://github.com/zloirock/core-js/issues/306\n        re = {};\n        // RegExp[@@split] doesn't call the regex's exec method, but first creates\n        // a new one. We need to return the patched regex when creating the new one.\n        re.constructor = {};\n        re.constructor[SPECIES] = function () { return re; };\n        re.flags = '';\n        re[SYMBOL] = /./[SYMBOL];\n      }\n\n      re.exec = function () { execCalled = true; return null; };\n\n      re[SYMBOL]('');\n      return !execCalled;\n    });\n\n    if (\n      !DELEGATES_TO_SYMBOL ||\n      !DELEGATES_TO_EXEC ||\n      (KEY === 'replace' && !(\n        REPLACE_SUPPORTS_NAMED_GROUPS &&\n        REPLACE_KEEPS_$0 &&\n        !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n      )) ||\n      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n    ) {\n      var nativeRegExpMethod = /./[SYMBOL];\n      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }, {\n        REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n        REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n      });\n      var stringMethod = methods[0];\n      var regexMethod = methods[1];\n\n      redefine(String.prototype, KEY, stringMethod);\n      redefine(RegExp.prototype, SYMBOL, length == 2\n        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n        // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n        ? function (string, arg) { return regexMethod.call(string, this, arg); }\n        // 21.2.5.6 RegExp.prototype[@@match](string)\n        // 21.2.5.9 RegExp.prototype[@@search](string)\n        : function (string) { return regexMethod.call(string, this); }\n      );\n    }\n\n    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n  };\n\n  // `String.prototype.{ codePointAt, at }` methods implementation\n  var createMethod$1 = function (CONVERT_TO_STRING) {\n    return function ($this, pos) {\n      var S = String(requireObjectCoercible($this));\n      var position = toInteger(pos);\n      var size = S.length;\n      var first, second;\n      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n      first = S.charCodeAt(position);\n      return first < 0xD800 || first > 0xDBFF || position + 1 === size\n        || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n          ? CONVERT_TO_STRING ? S.charAt(position) : first\n          : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n    };\n  };\n\n  var stringMultibyte = {\n    // `String.prototype.codePointAt` method\n    // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n    codeAt: createMethod$1(false),\n    // `String.prototype.at` method\n    // https://github.com/mathiasbynens/String.prototype.at\n    charAt: createMethod$1(true)\n  };\n\n  var charAt = stringMultibyte.charAt;\n\n  // `AdvanceStringIndex` abstract operation\n  // https://tc39.es/ecma262/#sec-advancestringindex\n  var advanceStringIndex = function (S, index, unicode) {\n    return index + (unicode ? charAt(S, index).length : 1);\n  };\n\n  // `RegExpExec` abstract operation\n  // https://tc39.es/ecma262/#sec-regexpexec\n  var regexpExecAbstract = function (R, S) {\n    var exec = R.exec;\n    if (typeof exec === 'function') {\n      var result = exec.call(R, S);\n      if (typeof result !== 'object') {\n        throw TypeError('RegExp exec method returned something other than an Object or null');\n      }\n      return result;\n    }\n\n    if (classofRaw(R) !== 'RegExp') {\n      throw TypeError('RegExp#exec called on incompatible receiver');\n    }\n\n    return regexpExec.call(R, S);\n  };\n\n  // @@match logic\n  fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n    return [\n      // `String.prototype.match` method\n      // https://tc39.es/ecma262/#sec-string.prototype.match\n      function match(regexp) {\n        var O = requireObjectCoercible(this);\n        var matcher = regexp == undefined ? undefined : regexp[MATCH];\n        return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n      },\n      // `RegExp.prototype[@@match]` method\n      // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n      function (regexp) {\n        var res = maybeCallNative(nativeMatch, regexp, this);\n        if (res.done) return res.value;\n\n        var rx = anObject(regexp);\n        var S = String(this);\n\n        if (!rx.global) return regexpExecAbstract(rx, S);\n\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n        var A = [];\n        var n = 0;\n        var result;\n        while ((result = regexpExecAbstract(rx, S)) !== null) {\n          var matchStr = String(result[0]);\n          A[n] = matchStr;\n          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n          n++;\n        }\n        return n === 0 ? null : A;\n      }\n    ];\n  });\n\n  // `IsArray` abstract operation\n  // https://tc39.es/ecma262/#sec-isarray\n  var isArray = Array.isArray || function isArray(arg) {\n    return classofRaw(arg) == 'Array';\n  };\n\n  // `ToObject` abstract operation\n  // https://tc39.es/ecma262/#sec-toobject\n  var toObject = function (argument) {\n    return Object(requireObjectCoercible(argument));\n  };\n\n  var createProperty = function (object, key, value) {\n    var propertyKey = toPrimitive(key);\n    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));\n    else object[propertyKey] = value;\n  };\n\n  var SPECIES$1 = wellKnownSymbol('species');\n\n  // `ArraySpeciesCreate` abstract operation\n  // https://tc39.es/ecma262/#sec-arrayspeciescreate\n  var arraySpeciesCreate = function (originalArray, length) {\n    var C;\n    if (isArray(originalArray)) {\n      C = originalArray.constructor;\n      // cross-realm fallback\n      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n      else if (isObject(C)) {\n        C = C[SPECIES$1];\n        if (C === null) C = undefined;\n      }\n    } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n  };\n\n  var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';\n\n  var process = global_1.process;\n  var versions = process && process.versions;\n  var v8 = versions && versions.v8;\n  var match, version;\n\n  if (v8) {\n    match = v8.split('.');\n    version = match[0] + match[1];\n  } else if (engineUserAgent) {\n    match = engineUserAgent.match(/Edge\\/(\\d+)/);\n    if (!match || match[1] >= 74) {\n      match = engineUserAgent.match(/Chrome\\/(\\d+)/);\n      if (match) version = match[1];\n    }\n  }\n\n  var engineV8Version = version && +version;\n\n  var SPECIES$2 = wellKnownSymbol('species');\n\n  var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {\n    // We can't use this feature detection in V8 since it causes\n    // deoptimization and serious performance degradation\n    // https://github.com/zloirock/core-js/issues/677\n    return engineV8Version >= 51 || !fails(function () {\n      var array = [];\n      var constructor = array.constructor = {};\n      constructor[SPECIES$2] = function () {\n        return { foo: 1 };\n      };\n      return array[METHOD_NAME](Boolean).foo !== 1;\n    });\n  };\n\n  var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\n  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\n  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {\n    var array = [];\n    array[IS_CONCAT_SPREADABLE] = false;\n    return array.concat()[0] !== array;\n  });\n\n  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\n  var isConcatSpreadable = function (O) {\n    if (!isObject(O)) return false;\n    var spreadable = O[IS_CONCAT_SPREADABLE];\n    return spreadable !== undefined ? !!spreadable : isArray(O);\n  };\n\n  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n  // `Array.prototype.concat` method\n  // https://tc39.es/ecma262/#sec-array.prototype.concat\n  // with adding support of @@isConcatSpreadable and @@species\n  _export({ target: 'Array', proto: true, forced: FORCED }, {\n    concat: function concat(arg) { // eslint-disable-line no-unused-vars\n      var O = toObject(this);\n      var A = arraySpeciesCreate(O, 0);\n      var n = 0;\n      var i, k, length, len, E;\n      for (i = -1, length = arguments.length; i < length; i++) {\n        E = i === -1 ? O : arguments[i];\n        if (isConcatSpreadable(E)) {\n          len = toLength(E.length);\n          if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n          for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n        } else {\n          if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n          createProperty(A, n++, E);\n        }\n      }\n      A.length = n;\n      return A;\n    }\n  });\n\n  var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n  var test = {};\n\n  test[TO_STRING_TAG] = 'z';\n\n  var toStringTagSupport = String(test) === '[object z]';\n\n  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');\n  // ES3 wrong here\n  var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n  // fallback for IE11 Script Access Denied error\n  var tryGet = function (it, key) {\n    try {\n      return it[key];\n    } catch (error) { /* empty */ }\n  };\n\n  // getting tag from ES6+ `Object.prototype.toString`\n  var classof = toStringTagSupport ? classofRaw : function (it) {\n    var O, tag, result;\n    return it === undefined ? 'Undefined' : it === null ? 'Null'\n      // @@toStringTag case\n      : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag\n      // builtinTag case\n      : CORRECT_ARGUMENTS ? classofRaw(O)\n      // ES3 arguments fallback\n      : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n  };\n\n  // `Object.prototype.toString` method implementation\n  // https://tc39.es/ecma262/#sec-object.prototype.tostring\n  var objectToString = toStringTagSupport ? {}.toString : function toString() {\n    return '[object ' + classof(this) + ']';\n  };\n\n  // `Object.prototype.toString` method\n  // https://tc39.es/ecma262/#sec-object.prototype.tostring\n  if (!toStringTagSupport) {\n    redefine(Object.prototype, 'toString', objectToString, { unsafe: true });\n  }\n\n  var TO_STRING = 'toString';\n  var RegExpPrototype = RegExp.prototype;\n  var nativeToString = RegExpPrototype[TO_STRING];\n\n  var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n  // FF44- RegExp#toString has a wrong name\n  var INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n  // `RegExp.prototype.toString` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype.tostring\n  if (NOT_GENERIC || INCORRECT_NAME) {\n    redefine(RegExp.prototype, TO_STRING, function toString() {\n      var R = anObject(this);\n      var p = String(R.source);\n      var rf = R.flags;\n      var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);\n      return '/' + p + '/' + f;\n    }, { unsafe: true });\n  }\n\n  var MATCH = wellKnownSymbol('match');\n\n  // `IsRegExp` abstract operation\n  // https://tc39.es/ecma262/#sec-isregexp\n  var isRegexp = function (it) {\n    var isRegExp;\n    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');\n  };\n\n  var aFunction$1 = function (it) {\n    if (typeof it != 'function') {\n      throw TypeError(String(it) + ' is not a function');\n    } return it;\n  };\n\n  var SPECIES$3 = wellKnownSymbol('species');\n\n  // `SpeciesConstructor` abstract operation\n  // https://tc39.es/ecma262/#sec-speciesconstructor\n  var speciesConstructor = function (O, defaultConstructor) {\n    var C = anObject(O).constructor;\n    var S;\n    return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);\n  };\n\n  var arrayPush = [].push;\n  var min$2 = Math.min;\n  var MAX_UINT32 = 0xFFFFFFFF;\n\n  // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\n  var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n  // @@split logic\n  fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n    var internalSplit;\n    if (\n      'abbc'.split(/(b)*/)[1] == 'c' ||\n      'test'.split(/(?:)/, -1).length != 4 ||\n      'ab'.split(/(?:ab)*/).length != 2 ||\n      '.'.split(/(.?)(.?)/).length != 4 ||\n      '.'.split(/()()/).length > 1 ||\n      ''.split(/.?/).length\n    ) {\n      // based on es5-shim implementation, need to rework it\n      internalSplit = function (separator, limit) {\n        var string = String(requireObjectCoercible(this));\n        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n        if (lim === 0) return [];\n        if (separator === undefined) return [string];\n        // If `separator` is not a regex, use native split\n        if (!isRegexp(separator)) {\n          return nativeSplit.call(string, separator, lim);\n        }\n        var output = [];\n        var flags = (separator.ignoreCase ? 'i' : '') +\n                    (separator.multiline ? 'm' : '') +\n                    (separator.unicode ? 'u' : '') +\n                    (separator.sticky ? 'y' : '');\n        var lastLastIndex = 0;\n        // Make `global` and avoid `lastIndex` issues by working with a copy\n        var separatorCopy = new RegExp(separator.source, flags + 'g');\n        var match, lastIndex, lastLength;\n        while (match = regexpExec.call(separatorCopy, string)) {\n          lastIndex = separatorCopy.lastIndex;\n          if (lastIndex > lastLastIndex) {\n            output.push(string.slice(lastLastIndex, match.index));\n            if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n            lastLength = match[0].length;\n            lastLastIndex = lastIndex;\n            if (output.length >= lim) break;\n          }\n          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n        }\n        if (lastLastIndex === string.length) {\n          if (lastLength || !separatorCopy.test('')) output.push('');\n        } else output.push(string.slice(lastLastIndex));\n        return output.length > lim ? output.slice(0, lim) : output;\n      };\n    // Chakra, V8\n    } else if ('0'.split(undefined, 0).length) {\n      internalSplit = function (separator, limit) {\n        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n      };\n    } else internalSplit = nativeSplit;\n\n    return [\n      // `String.prototype.split` method\n      // https://tc39.es/ecma262/#sec-string.prototype.split\n      function split(separator, limit) {\n        var O = requireObjectCoercible(this);\n        var splitter = separator == undefined ? undefined : separator[SPLIT];\n        return splitter !== undefined\n          ? splitter.call(separator, O, limit)\n          : internalSplit.call(String(O), separator, limit);\n      },\n      // `RegExp.prototype[@@split]` method\n      // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n      //\n      // NOTE: This cannot be properly polyfilled in engines that don't support\n      // the 'y' flag.\n      function (regexp, limit) {\n        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n        if (res.done) return res.value;\n\n        var rx = anObject(regexp);\n        var S = String(this);\n        var C = speciesConstructor(rx, RegExp);\n\n        var unicodeMatching = rx.unicode;\n        var flags = (rx.ignoreCase ? 'i' : '') +\n                    (rx.multiline ? 'm' : '') +\n                    (rx.unicode ? 'u' : '') +\n                    (SUPPORTS_Y ? 'y' : 'g');\n\n        // ^(? + rx + ) is needed, in combination with some S slicing, to\n        // simulate the 'y' flag.\n        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n        if (lim === 0) return [];\n        if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];\n        var p = 0;\n        var q = 0;\n        var A = [];\n        while (q < S.length) {\n          splitter.lastIndex = SUPPORTS_Y ? q : 0;\n          var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));\n          var e;\n          if (\n            z === null ||\n            (e = min$2(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n          ) {\n            q = advanceStringIndex(S, q, unicodeMatching);\n          } else {\n            A.push(S.slice(p, q));\n            if (A.length === lim) return A;\n            for (var i = 1; i <= z.length - 1; i++) {\n              A.push(z[i]);\n              if (A.length === lim) return A;\n            }\n            q = p = e;\n          }\n        }\n        A.push(S.slice(p));\n        return A;\n      }\n    ];\n  }, !SUPPORTS_Y);\n\n  /**\n   * Append a class to an element\n   *\n   * @api private\n   * @method _addClass\n   * @param {Object} element\n   * @param {String} className\n   * @returns null\n   */\n\n  function addClass(element, className) {\n    if (element instanceof SVGElement) {\n      // svg\n      var pre = element.getAttribute(\"class\") || \"\";\n\n      if (!pre.match(className)) {\n        // check if element doesn't already have className\n        element.setAttribute(\"class\", \"\".concat(pre, \" \").concat(className));\n      }\n    } else {\n      if (element.classList !== undefined) {\n        // check for modern classList property\n        var classes = className.split(\" \");\n        forEach(classes, function (cls) {\n          element.classList.add(cls);\n        });\n      } else if (!element.className.match(className)) {\n        // check if element doesn't already have className\n        element.className += \" \".concat(className);\n      }\n    }\n  }\n\n  /**\n   * Get an element CSS property on the page\n   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml\n   *\n   * @api private\n   * @method _getPropValue\n   * @param {Object} element\n   * @param {String} propName\n   * @returns string property value\n   */\n  function getPropValue(element, propName) {\n    var propValue = \"\";\n\n    if (element.currentStyle) {\n      //IE\n      propValue = element.currentStyle[propName];\n    } else if (document.defaultView && document.defaultView.getComputedStyle) {\n      //Others\n      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);\n    } //Prevent exception in IE\n\n\n    if (propValue && propValue.toLowerCase) {\n      return propValue.toLowerCase();\n    } else {\n      return propValue;\n    }\n  }\n\n  /**\n   * To set the show element\n   * This function set a relative (in most cases) position and changes the z-index\n   *\n   * @api private\n   * @method _setShowElement\n   * @param {Object} targetElement\n   */\n\n  function setShowElement(_ref) {\n    var element = _ref.element;\n    addClass(element, \"introjs-showElement\");\n    var currentElementPosition = getPropValue(element, \"position\");\n\n    if (currentElementPosition !== \"absolute\" && currentElementPosition !== \"relative\" && currentElementPosition !== \"sticky\" && currentElementPosition !== \"fixed\") {\n      //change to new intro item\n      addClass(element, \"introjs-relativePosition\");\n    }\n  }\n\n  /**\n   * Find the nearest scrollable parent\n   * copied from https://stackoverflow.com/questions/35939886/find-first-scrollable-parent\n   *\n   * @param Element element\n   * @return Element\n   */\n  function getScrollParent(element) {\n    var style = window.getComputedStyle(element);\n    var excludeStaticParent = style.position === \"absolute\";\n    var overflowRegex = /(auto|scroll)/;\n    if (style.position === \"fixed\") return document.body;\n\n    for (var parent = element; parent = parent.parentElement;) {\n      style = window.getComputedStyle(parent);\n\n      if (excludeStaticParent && style.position === \"static\") {\n        continue;\n      }\n\n      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;\n    }\n\n    return document.body;\n  }\n\n  /**\n   * scroll a scrollable element to a child element\n   *\n   * @param {Object} targetElement\n   */\n\n  function scrollParentToElement(targetElement) {\n    var element = targetElement.element;\n    if (!this._options.scrollToElement) return;\n    var parent = getScrollParent(element);\n    if (parent === document.body) return;\n    parent.scrollTop = element.offsetTop - parent.offsetTop;\n  }\n\n  /**\n   * Provides a cross-browser way to get the screen dimensions\n   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight\n   *\n   * @api private\n   * @method _getWinSize\n   * @returns {Object} width and height attributes\n   */\n  function getWinSize() {\n    if (window.innerWidth !== undefined) {\n      return {\n        width: window.innerWidth,\n        height: window.innerHeight\n      };\n    } else {\n      var D = document.documentElement;\n      return {\n        width: D.clientWidth,\n        height: D.clientHeight\n      };\n    }\n  }\n\n  /**\n   * Check to see if the element is in the viewport or not\n   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport\n   *\n   * @api private\n   * @method _elementInViewport\n   * @param {Object} el\n   */\n  function elementInViewport(el) {\n    var rect = el.getBoundingClientRect();\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom + 80 <= window.innerHeight && // add 80 to get the text right\n    rect.right <= window.innerWidth;\n  }\n\n  /**\n   * To change the scroll of `window` after highlighting an element\n   *\n   * @api private\n   * @param {String} scrollTo\n   * @param {Object} targetElement\n   * @param {Object} tooltipLayer\n   */\n\n  function scrollTo(scrollTo, _ref, tooltipLayer) {\n    var element = _ref.element;\n    if (scrollTo === \"off\") return;\n    var rect;\n    if (!this._options.scrollToElement) return;\n\n    if (scrollTo === \"tooltip\") {\n      rect = tooltipLayer.getBoundingClientRect();\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n\n    if (!elementInViewport(element)) {\n      var winHeight = getWinSize().height;\n      var top = rect.bottom - (rect.bottom - rect.top); // TODO (afshinm): do we need scroll padding now?\n      // I have changed the scroll option and now it scrolls the window to\n      // the center of the target element or tooltip.\n\n      if (top < 0 || element.clientHeight > winHeight) {\n        window.scrollBy(0, rect.top - (winHeight / 2 - rect.height / 2) - this._options.scrollPadding); // 30px padding from edge to look nice\n        //Scroll down\n      } else {\n        window.scrollBy(0, rect.top - (winHeight / 2 - rect.height / 2) + this._options.scrollPadding); // 30px padding from edge to look nice\n      }\n    }\n  }\n\n  /**\n   * Setting anchors to behave like buttons\n   *\n   * @api private\n   * @method _setAnchorAsButton\n   */\n  function setAnchorAsButton(anchor) {\n    anchor.setAttribute(\"role\", \"button\");\n    anchor.tabIndex = 0;\n  }\n\n  /**\n   * Get an element position on the page\n   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966\n   *\n   * @api private\n   * @method _getOffset\n   * @param {Object} element\n   * @returns Element's position info\n   */\n  function getOffset(element) {\n    var body = document.body;\n    var docEl = document.documentElement;\n    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n    var x = element.getBoundingClientRect();\n    return {\n      top: x.top + scrollTop,\n      width: x.width,\n      height: x.height,\n      left: x.left + scrollLeft\n    };\n  }\n\n  /**\n   * Checks to see if target element (or parents) position is fixed or not\n   *\n   * @api private\n   * @method _isFixed\n   * @param {Object} element\n   * @returns Boolean\n   */\n\n  function isFixed(element) {\n    var p = element.parentNode;\n\n    if (!p || p.nodeName === \"HTML\") {\n      return false;\n    }\n\n    if (getPropValue(element, \"position\") === \"fixed\") {\n      return true;\n    }\n\n    return isFixed(p);\n  }\n\n  var floor$1 = Math.floor;\n  var replace = ''.replace;\n  var SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\n  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\n  // https://tc39.es/ecma262/#sec-getsubstitution\n  var getSubstitution = function (matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor$1(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  };\n\n  var max$1 = Math.max;\n  var min$3 = Math.min;\n\n  var maybeToString = function (it) {\n    return it === undefined ? it : String(it);\n  };\n\n  // @@replace logic\n  fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n    var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n    return [\n      // `String.prototype.replace` method\n      // https://tc39.es/ecma262/#sec-string.prototype.replace\n      function replace(searchValue, replaceValue) {\n        var O = requireObjectCoercible(this);\n        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n        return replacer !== undefined\n          ? replacer.call(searchValue, O, replaceValue)\n          : nativeReplace.call(String(O), searchValue, replaceValue);\n      },\n      // `RegExp.prototype[@@replace]` method\n      // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\n      function (regexp, replaceValue) {\n        if (\n          (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n          (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n        ) {\n          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n          if (res.done) return res.value;\n        }\n\n        var rx = anObject(regexp);\n        var S = String(this);\n\n        var functionalReplace = typeof replaceValue === 'function';\n        if (!functionalReplace) replaceValue = String(replaceValue);\n\n        var global = rx.global;\n        if (global) {\n          var fullUnicode = rx.unicode;\n          rx.lastIndex = 0;\n        }\n        var results = [];\n        while (true) {\n          var result = regexpExecAbstract(rx, S);\n          if (result === null) break;\n\n          results.push(result);\n          if (!global) break;\n\n          var matchStr = String(result[0]);\n          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        }\n\n        var accumulatedResult = '';\n        var nextSourcePosition = 0;\n        for (var i = 0; i < results.length; i++) {\n          result = results[i];\n\n          var matched = String(result[0]);\n          var position = max$1(min$3(toInteger(result.index), S.length), 0);\n          var captures = [];\n          // NOTE: This is equivalent to\n          //   captures = result.slice(1).map(maybeToString)\n          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n          // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n          var namedCaptures = result.groups;\n          if (functionalReplace) {\n            var replacerArgs = [matched].concat(captures, position, S);\n            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n            var replacement = String(replaceValue.apply(undefined, replacerArgs));\n          } else {\n            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n          }\n          if (position >= nextSourcePosition) {\n            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n            nextSourcePosition = position + matched.length;\n          }\n        }\n        return accumulatedResult + S.slice(nextSourcePosition);\n      }\n    ];\n  });\n\n  /**\n   * Remove a class from an element\n   *\n   * @api private\n   * @method _removeClass\n   * @param {Object} element\n   * @param {RegExp|String} classNameRegex can be regex or string\n   * @returns null\n   */\n  function removeClass(element, classNameRegex) {\n    if (element instanceof SVGElement) {\n      var pre = element.getAttribute(\"class\") || \"\";\n      element.setAttribute(\"class\", pre.replace(classNameRegex, \"\").replace(/^\\s+|\\s+$/g, \"\"));\n    } else {\n      element.className = element.className.replace(classNameRegex, \"\").replace(/^\\s+|\\s+$/g, \"\");\n    }\n  }\n\n  /**\n   * Sets the style of an DOM element\n   *\n   * @param {Object} element\n   * @param {Object|string} style\n   * @return null\n   */\n  function setStyle(element, style) {\n    var cssText = \"\";\n\n    if (element.style.cssText) {\n      cssText += element.style.cssText;\n    }\n\n    if (typeof style === \"string\") {\n      cssText += style;\n    } else {\n      for (var rule in style) {\n        cssText += \"\".concat(rule, \":\").concat(style[rule], \";\");\n      }\n    }\n\n    element.style.cssText = cssText;\n  }\n\n  /**\n   * Update the position of the helper layer on the screen\n   *\n   * @api private\n   * @method _setHelperLayerPosition\n   * @param {Object} helperLayer\n   */\n\n  function setHelperLayerPosition(helperLayer) {\n    if (helperLayer) {\n      //prevent error when `this._currentStep` in undefined\n      if (!this._introItems[this._currentStep]) return;\n      var currentElement = this._introItems[this._currentStep];\n      var elementPosition = getOffset(currentElement.element);\n      var widthHeightPadding = this._options.helperElementPadding; // If the target element is fixed, the tooltip should be fixed as well.\n      // Otherwise, remove a fixed class that may be left over from the previous\n      // step.\n\n      if (isFixed(currentElement.element)) {\n        addClass(helperLayer, \"introjs-fixedTooltip\");\n      } else {\n        removeClass(helperLayer, \"introjs-fixedTooltip\");\n      }\n\n      if (currentElement.position === \"floating\") {\n        widthHeightPadding = 0;\n      } //set new position to helper layer\n\n\n      setStyle(helperLayer, {\n        width: \"\".concat(elementPosition.width + widthHeightPadding, \"px\"),\n        height: \"\".concat(elementPosition.height + widthHeightPadding, \"px\"),\n        top: \"\".concat(elementPosition.top - widthHeightPadding / 2, \"px\"),\n        left: \"\".concat(elementPosition.left - widthHeightPadding / 2, \"px\")\n      });\n    }\n  }\n\n  // optional / simple context binding\n  var functionBindContext = function (fn, that, length) {\n    aFunction$1(fn);\n    if (that === undefined) return fn;\n    switch (length) {\n      case 0: return function () {\n        return fn.call(that);\n      };\n      case 1: return function (a) {\n        return fn.call(that, a);\n      };\n      case 2: return function (a, b) {\n        return fn.call(that, a, b);\n      };\n      case 3: return function (a, b, c) {\n        return fn.call(that, a, b, c);\n      };\n    }\n    return function (/* ...args */) {\n      return fn.apply(that, arguments);\n    };\n  };\n\n  var push = [].push;\n\n  // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation\n  var createMethod$2 = function (TYPE) {\n    var IS_MAP = TYPE == 1;\n    var IS_FILTER = TYPE == 2;\n    var IS_SOME = TYPE == 3;\n    var IS_EVERY = TYPE == 4;\n    var IS_FIND_INDEX = TYPE == 6;\n    var IS_FILTER_OUT = TYPE == 7;\n    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n    return function ($this, callbackfn, that, specificCreate) {\n      var O = toObject($this);\n      var self = indexedObject(O);\n      var boundFunction = functionBindContext(callbackfn, that, 3);\n      var length = toLength(self.length);\n      var index = 0;\n      var create = specificCreate || arraySpeciesCreate;\n      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;\n      var value, result;\n      for (;length > index; index++) if (NO_HOLES || index in self) {\n        value = self[index];\n        result = boundFunction(value, index, O);\n        if (TYPE) {\n          if (IS_MAP) target[index] = result; // map\n          else if (result) switch (TYPE) {\n            case 3: return true;              // some\n            case 5: return value;             // find\n            case 6: return index;             // findIndex\n            case 2: push.call(target, value); // filter\n          } else switch (TYPE) {\n            case 4: return false;             // every\n            case 7: push.call(target, value); // filterOut\n          }\n        }\n      }\n      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n    };\n  };\n\n  var arrayIteration = {\n    // `Array.prototype.forEach` method\n    // https://tc39.es/ecma262/#sec-array.prototype.foreach\n    forEach: createMethod$2(0),\n    // `Array.prototype.map` method\n    // https://tc39.es/ecma262/#sec-array.prototype.map\n    map: createMethod$2(1),\n    // `Array.prototype.filter` method\n    // https://tc39.es/ecma262/#sec-array.prototype.filter\n    filter: createMethod$2(2),\n    // `Array.prototype.some` method\n    // https://tc39.es/ecma262/#sec-array.prototype.some\n    some: createMethod$2(3),\n    // `Array.prototype.every` method\n    // https://tc39.es/ecma262/#sec-array.prototype.every\n    every: createMethod$2(4),\n    // `Array.prototype.find` method\n    // https://tc39.es/ecma262/#sec-array.prototype.find\n    find: createMethod$2(5),\n    // `Array.prototype.findIndex` method\n    // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n    findIndex: createMethod$2(6),\n    // `Array.prototype.filterOut` method\n    // https://github.com/tc39/proposal-array-filtering\n    filterOut: createMethod$2(7)\n  };\n\n  var defineProperty = Object.defineProperty;\n  var cache = {};\n\n  var thrower = function (it) { throw it; };\n\n  var arrayMethodUsesToLength = function (METHOD_NAME, options) {\n    if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n    if (!options) options = {};\n    var method = [][METHOD_NAME];\n    var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n    var argument0 = has(options, 0) ? options[0] : thrower;\n    var argument1 = has(options, 1) ? options[1] : undefined;\n\n    return cache[METHOD_NAME] = !!method && !fails(function () {\n      if (ACCESSORS && !descriptors) return true;\n      var O = { length: -1 };\n\n      if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n      else O[1] = 1;\n\n      method.call(O, argument0, argument1);\n    });\n  };\n\n  var $filter = arrayIteration.filter;\n\n\n\n  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n  // Edge 14- issue\n  var USES_TO_LENGTH = arrayMethodUsesToLength('filter');\n\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  // with adding support of @@species\n  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n    filter: function filter(callbackfn /* , thisArg */) {\n      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  // `Object.keys` method\n  // https://tc39.es/ecma262/#sec-object.keys\n  var objectKeys = Object.keys || function keys(O) {\n    return objectKeysInternal(O, enumBugKeys);\n  };\n\n  // `Object.defineProperties` method\n  // https://tc39.es/ecma262/#sec-object.defineproperties\n  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n    anObject(O);\n    var keys = objectKeys(Properties);\n    var length = keys.length;\n    var index = 0;\n    var key;\n    while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);\n    return O;\n  };\n\n  var html = getBuiltIn('document', 'documentElement');\n\n  var GT = '>';\n  var LT = '<';\n  var PROTOTYPE = 'prototype';\n  var SCRIPT = 'script';\n  var IE_PROTO = sharedKey('IE_PROTO');\n\n  var EmptyConstructor = function () { /* empty */ };\n\n  var scriptTag = function (content) {\n    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n  };\n\n  // Create object with fake `null` prototype: use ActiveX Object with cleared prototype\n  var NullProtoObjectViaActiveX = function (activeXDocument) {\n    activeXDocument.write(scriptTag(''));\n    activeXDocument.close();\n    var temp = activeXDocument.parentWindow.Object;\n    activeXDocument = null; // avoid memory leak\n    return temp;\n  };\n\n  // Create object with fake `null` prototype: use iframe Object with cleared prototype\n  var NullProtoObjectViaIFrame = function () {\n    // Thrash, waste and sodomy: IE GC bug\n    var iframe = documentCreateElement('iframe');\n    var JS = 'java' + SCRIPT + ':';\n    var iframeDocument;\n    iframe.style.display = 'none';\n    html.appendChild(iframe);\n    // https://github.com/zloirock/core-js/issues/475\n    iframe.src = String(JS);\n    iframeDocument = iframe.contentWindow.document;\n    iframeDocument.open();\n    iframeDocument.write(scriptTag('document.F=Object'));\n    iframeDocument.close();\n    return iframeDocument.F;\n  };\n\n  // Check for document.domain and active x support\n  // No need to use active x approach when document.domain is not set\n  // see https://github.com/es-shims/es5-shim/issues/150\n  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n  // avoid IE GC bug\n  var activeXDocument;\n  var NullProtoObject = function () {\n    try {\n      /* global ActiveXObject */\n      activeXDocument = document.domain && new ActiveXObject('htmlfile');\n    } catch (error) { /* ignore */ }\n    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n    var length = enumBugKeys.length;\n    while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n    return NullProtoObject();\n  };\n\n  hiddenKeys[IE_PROTO] = true;\n\n  // `Object.create` method\n  // https://tc39.es/ecma262/#sec-object.create\n  var objectCreate = Object.create || function create(O, Properties) {\n    var result;\n    if (O !== null) {\n      EmptyConstructor[PROTOTYPE] = anObject(O);\n      result = new EmptyConstructor();\n      EmptyConstructor[PROTOTYPE] = null;\n      // add \"__proto__\" for Object.getPrototypeOf polyfill\n      result[IE_PROTO] = O;\n    } else result = NullProtoObject();\n    return Properties === undefined ? result : objectDefineProperties(result, Properties);\n  };\n\n  var UNSCOPABLES = wellKnownSymbol('unscopables');\n  var ArrayPrototype = Array.prototype;\n\n  // Array.prototype[@@unscopables]\n  // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\n  if (ArrayPrototype[UNSCOPABLES] == undefined) {\n    objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {\n      configurable: true,\n      value: objectCreate(null)\n    });\n  }\n\n  // add a key to Array.prototype[@@unscopables]\n  var addToUnscopables = function (key) {\n    ArrayPrototype[UNSCOPABLES][key] = true;\n  };\n\n  var $includes = arrayIncludes.includes;\n\n\n\n  var USES_TO_LENGTH$1 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  _export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$1 }, {\n    includes: function includes(el /* , fromIndex = 0 */) {\n      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\n  addToUnscopables('includes');\n\n  var arrayMethodIsStrict = function (METHOD_NAME, argument) {\n    var method = [][METHOD_NAME];\n    return !!method && fails(function () {\n      // eslint-disable-next-line no-useless-call,no-throw-literal\n      method.call(null, argument || function () { throw 1; }, 1);\n    });\n  };\n\n  var $indexOf = arrayIncludes.indexOf;\n\n\n\n  var nativeIndexOf = [].indexOf;\n\n  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\n  var STRICT_METHOD = arrayMethodIsStrict('indexOf');\n  var USES_TO_LENGTH$2 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  _export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH$2 }, {\n    indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n      return NEGATIVE_ZERO\n        // convert -0 to +0\n        ? nativeIndexOf.apply(this, arguments) || 0\n        : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  var nativeJoin = [].join;\n\n  var ES3_STRINGS = indexedObject != Object;\n  var STRICT_METHOD$1 = arrayMethodIsStrict('join', ',');\n\n  // `Array.prototype.join` method\n  // https://tc39.es/ecma262/#sec-array.prototype.join\n  _export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$1 }, {\n    join: function join(separator) {\n      return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n    }\n  });\n\n  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('slice');\n  var USES_TO_LENGTH$3 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\n  var SPECIES$4 = wellKnownSymbol('species');\n  var nativeSlice = [].slice;\n  var max$2 = Math.max;\n\n  // `Array.prototype.slice` method\n  // https://tc39.es/ecma262/#sec-array.prototype.slice\n  // fallback for not array-like ES3 strings and DOM objects\n  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$3 }, {\n    slice: function slice(start, end) {\n      var O = toIndexedObject(this);\n      var length = toLength(O.length);\n      var k = toAbsoluteIndex(start, length);\n      var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n      // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n      var Constructor, result, n;\n      if (isArray(O)) {\n        Constructor = O.constructor;\n        // cross-realm fallback\n        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n          Constructor = undefined;\n        } else if (isObject(Constructor)) {\n          Constructor = Constructor[SPECIES$4];\n          if (Constructor === null) Constructor = undefined;\n        }\n        if (Constructor === Array || Constructor === undefined) {\n          return nativeSlice.call(O, k, fin);\n        }\n      }\n      result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));\n      for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n      result.length = n;\n      return result;\n    }\n  });\n\n  var notARegexp = function (it) {\n    if (isRegexp(it)) {\n      throw TypeError(\"The method doesn't accept regular expressions\");\n    } return it;\n  };\n\n  var MATCH$1 = wellKnownSymbol('match');\n\n  var correctIsRegexpLogic = function (METHOD_NAME) {\n    var regexp = /./;\n    try {\n      '/./'[METHOD_NAME](regexp);\n    } catch (error1) {\n      try {\n        regexp[MATCH$1] = false;\n        return '/./'[METHOD_NAME](regexp);\n      } catch (error2) { /* empty */ }\n    } return false;\n  };\n\n  // `String.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-string.prototype.includes\n  _export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {\n    includes: function includes(searchString /* , position = 0 */) {\n      return !!~String(requireObjectCoercible(this))\n        .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n    }\n  });\n\n  /**\n   * Set tooltip left so it doesn't go off the right side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleLeft is ok.  false, otherwise.\n   */\n  function checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer) {\n    if (targetOffset.left + tooltipLayerStyleLeft + tooltipOffset.width > windowSize.width) {\n      // off the right side of the window\n      tooltipLayer.left = \"\".concat(windowSize.width - tooltipOffset.width - targetOffset.left, \"px\");\n      return false;\n    }\n\n    tooltipLayer.left = \"\".concat(tooltipLayerStyleLeft, \"px\");\n    return true;\n  }\n\n  /**\n   * Set tooltip right so it doesn't go off the left side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleRight is ok.  false, otherwise.\n   */\n  function checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer) {\n    if (targetOffset.left + targetOffset.width - tooltipLayerStyleRight - tooltipOffset.width < 0) {\n      // off the left side of the window\n      tooltipLayer.style.left = \"\".concat(-targetOffset.left, \"px\");\n      return false;\n    }\n\n    tooltipLayer.style.right = \"\".concat(tooltipLayerStyleRight, \"px\");\n    return true;\n  }\n\n  var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('splice');\n  var USES_TO_LENGTH$4 = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\n  var max$3 = Math.max;\n  var min$4 = Math.min;\n  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;\n  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n  // `Array.prototype.splice` method\n  // https://tc39.es/ecma262/#sec-array.prototype.splice\n  // with adding support of @@species\n  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$4 }, {\n    splice: function splice(start, deleteCount /* , ...items */) {\n      var O = toObject(this);\n      var len = toLength(O.length);\n      var actualStart = toAbsoluteIndex(start, len);\n      var argumentsLength = arguments.length;\n      var insertCount, actualDeleteCount, A, k, from, to;\n      if (argumentsLength === 0) {\n        insertCount = actualDeleteCount = 0;\n      } else if (argumentsLength === 1) {\n        insertCount = 0;\n        actualDeleteCount = len - actualStart;\n      } else {\n        insertCount = argumentsLength - 2;\n        actualDeleteCount = min$4(max$3(toInteger(deleteCount), 0), len - actualStart);\n      }\n      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {\n        throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n      }\n      A = arraySpeciesCreate(O, actualDeleteCount);\n      for (k = 0; k < actualDeleteCount; k++) {\n        from = actualStart + k;\n        if (from in O) createProperty(A, k, O[from]);\n      }\n      A.length = actualDeleteCount;\n      if (insertCount < actualDeleteCount) {\n        for (k = actualStart; k < len - actualDeleteCount; k++) {\n          from = k + actualDeleteCount;\n          to = k + insertCount;\n          if (from in O) O[to] = O[from];\n          else delete O[to];\n        }\n        for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n      } else if (insertCount > actualDeleteCount) {\n        for (k = len - actualDeleteCount; k > actualStart; k--) {\n          from = k + actualDeleteCount - 1;\n          to = k + insertCount - 1;\n          if (from in O) O[to] = O[from];\n          else delete O[to];\n        }\n      }\n      for (k = 0; k < insertCount; k++) {\n        O[k + actualStart] = arguments[k + 2];\n      }\n      O.length = len - actualDeleteCount + insertCount;\n      return A;\n    }\n  });\n\n  /**\n   * Remove an entry from a string array if it's there, does nothing if it isn't there.\n   *\n   * @param {Array} stringArray\n   * @param {String} stringToRemove\n   */\n  function removeEntry(stringArray, stringToRemove) {\n    if (stringArray.includes(stringToRemove)) {\n      stringArray.splice(stringArray.indexOf(stringToRemove), 1);\n    }\n  }\n\n  /**\n   * auto-determine alignment\n   * @param {Integer}  offsetLeft\n   * @param {Integer}  tooltipWidth\n   * @param {Object}   windowSize\n   * @param {String}   desiredAlignment\n   * @return {String}  calculatedAlignment\n   */\n\n  function _determineAutoAlignment(offsetLeft, tooltipWidth, _ref, desiredAlignment) {\n    var width = _ref.width;\n    var halfTooltipWidth = tooltipWidth / 2;\n    var winWidth = Math.min(width, window.screen.width);\n    var possibleAlignments = [\"-left-aligned\", \"-middle-aligned\", \"-right-aligned\"];\n    var calculatedAlignment = \"\"; // valid left must be at least a tooltipWidth\n    // away from right side\n\n    if (winWidth - offsetLeft < tooltipWidth) {\n      removeEntry(possibleAlignments, \"-left-aligned\");\n    } // valid middle must be at least half\n    // width away from both sides\n\n\n    if (offsetLeft < halfTooltipWidth || winWidth - offsetLeft < halfTooltipWidth || offsetLeft + tooltipWidth > winWidth) {\n      removeEntry(possibleAlignments, \"-middle-aligned\");\n    } // valid right must be at least a tooltipWidth\n    // width away from left side\n\n\n    if (offsetLeft < tooltipWidth) {\n      removeEntry(possibleAlignments, \"-right-aligned\");\n    }\n\n    if (possibleAlignments.length) {\n      if (possibleAlignments.includes(desiredAlignment)) {\n        // the desired alignment is valid\n        calculatedAlignment = desiredAlignment;\n      } else {\n        // pick the first valid position, in order\n        calculatedAlignment = possibleAlignments[0];\n      }\n    } else {\n      // if screen width is too small\n      // for ANY alignment, right is\n      // probably the best for visibility\n      calculatedAlignment = \"-right-aligned\";\n    }\n\n    return calculatedAlignment;\n  }\n  /**\n   * Determines the position of the tooltip based on the position precedence and availability\n   * of screen space.\n   *\n   * @param {Object}    targetElement\n   * @param {Object}    tooltipLayer\n   * @param {String}    desiredTooltipPosition\n   * @return {String}   calculatedPosition\n   */\n\n\n  function _determineAutoPosition(targetElement, tooltipLayer, desiredTooltipPosition) {\n    // Take a clone of position precedence. These will be the available\n    var possiblePositions = this._options.positionPrecedence.slice();\n\n    var windowSize = getWinSize();\n    var tooltipHeight = getOffset(tooltipLayer).height + 10;\n    var tooltipWidth = getOffset(tooltipLayer).width + 20;\n    var targetElementRect = targetElement.getBoundingClientRect(); // If we check all the possible areas, and there are no valid places for the tooltip, the element\n    // must take up most of the screen real estate. Show the tooltip floating in the middle of the screen.\n\n    var calculatedPosition = \"floating\";\n    /*\n     * auto determine position\n     */\n    // Check for space below\n\n    if (targetElementRect.bottom + tooltipHeight > windowSize.height) {\n      removeEntry(possiblePositions, \"bottom\");\n    } // Check for space above\n\n\n    if (targetElementRect.top - tooltipHeight < 0) {\n      removeEntry(possiblePositions, \"top\");\n    } // Check for space to the right\n\n\n    if (targetElementRect.right + tooltipWidth > windowSize.width) {\n      removeEntry(possiblePositions, \"right\");\n    } // Check for space to the left\n\n\n    if (targetElementRect.left - tooltipWidth < 0) {\n      removeEntry(possiblePositions, \"left\");\n    } // @var {String}  ex: 'right-aligned'\n\n\n    var desiredAlignment = function (pos) {\n      var hyphenIndex = pos.indexOf(\"-\");\n\n      if (hyphenIndex !== -1) {\n        // has alignment\n        return pos.substr(hyphenIndex);\n      }\n\n      return \"\";\n    }(desiredTooltipPosition || \"\"); // strip alignment from position\n\n\n    if (desiredTooltipPosition) {\n      // ex: \"bottom-right-aligned\"\n      // should return 'bottom'\n      desiredTooltipPosition = desiredTooltipPosition.split(\"-\")[0];\n    }\n\n    if (possiblePositions.length) {\n      if (possiblePositions.includes(desiredTooltipPosition)) {\n        // If the requested position is in the list, choose that\n        calculatedPosition = desiredTooltipPosition;\n      } else {\n        // Pick the first valid position, in order\n        calculatedPosition = possiblePositions[0];\n      }\n    } // only top and bottom positions have optional alignments\n\n\n    if ([\"top\", \"bottom\"].includes(calculatedPosition)) {\n      calculatedPosition += _determineAutoAlignment(targetElementRect.left, tooltipWidth, windowSize, desiredAlignment);\n    }\n\n    return calculatedPosition;\n  }\n  /**\n   * Render tooltip box in the page\n   *\n   * @api private\n   * @method placeTooltip\n   * @param {HTMLElement} targetElement\n   * @param {HTMLElement} tooltipLayer\n   * @param {HTMLElement} arrowLayer\n   * @param {Boolean} hintMode\n   */\n\n\n  function placeTooltip(targetElement, tooltipLayer, arrowLayer, hintMode) {\n    var tooltipCssClass = \"\";\n    var currentStepObj;\n    var tooltipOffset;\n    var targetOffset;\n    var windowSize;\n    var currentTooltipPosition;\n    hintMode = hintMode || false; //reset the old style\n\n    tooltipLayer.style.top = null;\n    tooltipLayer.style.right = null;\n    tooltipLayer.style.bottom = null;\n    tooltipLayer.style.left = null;\n    tooltipLayer.style.marginLeft = null;\n    tooltipLayer.style.marginTop = null;\n    arrowLayer.style.display = \"inherit\"; //prevent error when `this._currentStep` is undefined\n\n    if (!this._introItems[this._currentStep]) return; //if we have a custom css class for each step\n\n    currentStepObj = this._introItems[this._currentStep];\n\n    if (typeof currentStepObj.tooltipClass === \"string\") {\n      tooltipCssClass = currentStepObj.tooltipClass;\n    } else {\n      tooltipCssClass = this._options.tooltipClass;\n    }\n\n    tooltipLayer.className = [\"introjs-tooltip\", tooltipCssClass].filter(Boolean).join(\" \");\n    tooltipLayer.setAttribute(\"role\", \"dialog\");\n    currentTooltipPosition = this._introItems[this._currentStep].position; // Floating is always valid, no point in calculating\n\n    if (currentTooltipPosition !== \"floating\" && this._options.autoPosition) {\n      currentTooltipPosition = _determineAutoPosition.call(this, targetElement, tooltipLayer, currentTooltipPosition);\n    }\n\n    var tooltipLayerStyleLeft;\n    targetOffset = getOffset(targetElement);\n    tooltipOffset = getOffset(tooltipLayer);\n    windowSize = getWinSize();\n    addClass(tooltipLayer, \"introjs-\".concat(currentTooltipPosition));\n\n    switch (currentTooltipPosition) {\n      case \"top-right-aligned\":\n        arrowLayer.className = \"introjs-arrow bottom-right\";\n        var tooltipLayerStyleRight = 0;\n        checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.bottom = \"\".concat(targetOffset.height + 20, \"px\");\n        break;\n\n      case \"top-middle-aligned\":\n        arrowLayer.className = \"introjs-arrow bottom-middle\";\n        var tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2; // a fix for middle aligned hints\n\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n\n        tooltipLayer.style.bottom = \"\".concat(targetOffset.height + 20, \"px\");\n        break;\n\n      case \"top-left-aligned\": // top-left-aligned is the same as the default top\n\n      case \"top\":\n        arrowLayer.className = \"introjs-arrow bottom\";\n        tooltipLayerStyleLeft = hintMode ? 0 : 15;\n        checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.bottom = \"\".concat(targetOffset.height + 20, \"px\");\n        break;\n\n      case \"right\":\n        tooltipLayer.style.left = \"\".concat(targetOffset.width + 20, \"px\");\n\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, right would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          arrowLayer.className = \"introjs-arrow left-bottom\";\n          tooltipLayer.style.top = \"-\".concat(tooltipOffset.height - targetOffset.height - 20, \"px\");\n        } else {\n          arrowLayer.className = \"introjs-arrow left\";\n        }\n\n        break;\n\n      case \"left\":\n        if (!hintMode && this._options.showStepNumbers === true) {\n          tooltipLayer.style.top = \"15px\";\n        }\n\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, left would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          tooltipLayer.style.top = \"-\".concat(tooltipOffset.height - targetOffset.height - 20, \"px\");\n          arrowLayer.className = \"introjs-arrow right-bottom\";\n        } else {\n          arrowLayer.className = \"introjs-arrow right\";\n        }\n\n        tooltipLayer.style.right = \"\".concat(targetOffset.width + 20, \"px\");\n        break;\n\n      case \"floating\":\n        arrowLayer.style.display = \"none\"; //we have to adjust the top and left of layer manually for intro items without element\n\n        tooltipLayer.style.left = \"50%\";\n        tooltipLayer.style.top = \"50%\";\n        tooltipLayer.style.marginLeft = \"-\".concat(tooltipOffset.width / 2, \"px\");\n        tooltipLayer.style.marginTop = \"-\".concat(tooltipOffset.height / 2, \"px\");\n        break;\n\n      case \"bottom-right-aligned\":\n        arrowLayer.className = \"introjs-arrow top-right\";\n        tooltipLayerStyleRight = 0;\n        checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.top = \"\".concat(targetOffset.height + 20, \"px\");\n        break;\n\n      case \"bottom-middle-aligned\":\n        arrowLayer.className = \"introjs-arrow top-middle\";\n        tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2; // a fix for middle aligned hints\n\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n\n        tooltipLayer.style.top = \"\".concat(targetOffset.height + 20, \"px\");\n        break;\n      // case 'bottom-left-aligned':\n      // Bottom-left-aligned is the same as the default bottom\n      // case 'bottom':\n      // Bottom going to follow the default behavior\n\n      default:\n        arrowLayer.className = \"introjs-arrow top\";\n        tooltipLayerStyleLeft = 0;\n        checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.top = \"\".concat(targetOffset.height + 20, \"px\");\n    }\n  }\n\n  /**\n   * To remove all show element(s)\n   *\n   * @api private\n   * @method _removeShowElement\n   */\n\n  function removeShowElement() {\n    var elms = document.querySelectorAll(\".introjs-showElement\");\n    forEach(elms, function (elm) {\n      removeClass(elm, /introjs-[a-zA-Z]+/g);\n    });\n  }\n\n  function _createElement(tagname, attrs) {\n    var element = document.createElement(tagname);\n    attrs = attrs || {}; // regex for matching attributes that need to be set with setAttribute\n\n    var setAttRegex = /^(?:role|data-|aria-)/;\n\n    for (var k in attrs) {\n      var v = attrs[k];\n\n      if (k === \"style\") {\n        setStyle(element, v);\n      } else if (k.match(setAttRegex)) {\n        element.setAttribute(k, v);\n      } else {\n        element[k] = v;\n      }\n    }\n\n    return element;\n  }\n\n  /**\n   * Appends `element` to `parentElement`\n   *\n   * @param {Element} parentElement\n   * @param {Element} element\n   * @param {Boolean} [animate=false]\n   */\n\n  function appendChild(parentElement, element, animate) {\n    if (animate) {\n      var existingOpacity = element.style.opacity || \"1\";\n      setStyle(element, {\n        opacity: \"0\"\n      });\n      window.setTimeout(function () {\n        setStyle(element, {\n          opacity: existingOpacity\n        });\n      }, 10);\n    }\n\n    parentElement.appendChild(element);\n  }\n\n  /**\n   * Gets the current progress percentage\n   *\n   * @api private\n   * @method _getProgress\n   * @returns current progress percentage\n   */\n\n  function _getProgress() {\n    // Steps are 0 indexed\n    var currentStep = parseInt(this._currentStep + 1, 10);\n    return currentStep / this._introItems.length * 100;\n  }\n  /**\n   * Add disableinteraction layer and adjust the size and position of the layer\n   *\n   * @api private\n   * @method _disableInteraction\n   */\n\n\n  function _disableInteraction() {\n    var disableInteractionLayer = document.querySelector(\".introjs-disableInteraction\");\n\n    if (disableInteractionLayer === null) {\n      disableInteractionLayer = _createElement(\"div\", {\n        className: \"introjs-disableInteraction\"\n      });\n\n      this._targetElement.appendChild(disableInteractionLayer);\n    }\n\n    setHelperLayerPosition.call(this, disableInteractionLayer);\n  }\n  /**\n   * Show an element on the page\n   *\n   * @api private\n   * @method _showElement\n   * @param {Object} targetElement\n   */\n\n\n  function _showElement(targetElement) {\n    var _this = this;\n\n    if (typeof this._introChangeCallback !== \"undefined\") {\n      this._introChangeCallback.call(this, targetElement.element);\n    }\n\n    var self = this;\n    var oldHelperLayer = document.querySelector(\".introjs-helperLayer\");\n    var oldReferenceLayer = document.querySelector(\".introjs-tooltipReferenceLayer\");\n    var highlightClass = \"introjs-helperLayer\";\n    var nextTooltipButton;\n    var prevTooltipButton;\n    var skipTooltipButton;\n\n    if (typeof targetElement.highlightClass === \"string\") {\n      highlightClass += \" \".concat(targetElement.highlightClass);\n    } //check for options highlight class\n\n\n    if (typeof this._options.highlightClass === \"string\") {\n      highlightClass += \" \".concat(this._options.highlightClass);\n    }\n\n    if (oldHelperLayer !== null) {\n      var oldHelperNumberLayer = oldReferenceLayer.querySelector(\".introjs-helperNumberLayer\");\n      var oldtooltipLayer = oldReferenceLayer.querySelector(\".introjs-tooltiptext\");\n      var oldTooltipTitleLayer = oldReferenceLayer.querySelector(\".introjs-tooltip-title\");\n      var oldArrowLayer = oldReferenceLayer.querySelector(\".introjs-arrow\");\n      var oldtooltipContainer = oldReferenceLayer.querySelector(\".introjs-tooltip\");\n      skipTooltipButton = oldReferenceLayer.querySelector(\".introjs-skipbutton\");\n      prevTooltipButton = oldReferenceLayer.querySelector(\".introjs-prevbutton\");\n      nextTooltipButton = oldReferenceLayer.querySelector(\".introjs-nextbutton\"); //update or reset the helper highlight class\n\n      oldHelperLayer.className = highlightClass; //hide the tooltip\n\n      oldtooltipContainer.style.opacity = 0;\n      oldtooltipContainer.style.display = \"none\"; // if the target element is within a scrollable element\n\n      scrollParentToElement.call(self, targetElement); // set new position to helper layer\n\n      setHelperLayerPosition.call(self, oldHelperLayer);\n      setHelperLayerPosition.call(self, oldReferenceLayer); //remove old classes if the element still exist\n\n      removeShowElement(); //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation\n\n      if (self._lastShowElementTimer) {\n        window.clearTimeout(self._lastShowElementTimer);\n      }\n\n      self._lastShowElementTimer = window.setTimeout(function () {\n        // set current step to the label\n        if (oldHelperNumberLayer !== null) {\n          oldHelperNumberLayer.innerHTML = \"\".concat(targetElement.step, \" of \").concat(_this._introItems.length);\n        } // set current tooltip text\n\n\n        oldtooltipLayer.innerHTML = targetElement.intro; // set current tooltip title\n\n        oldTooltipTitleLayer.innerHTML = targetElement.title; //set the tooltip position\n\n        oldtooltipContainer.style.display = \"block\";\n        placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer); //change active bullet\n\n        if (self._options.showBullets) {\n          oldReferenceLayer.querySelector(\".introjs-bullets li > a.active\").className = \"\";\n          oldReferenceLayer.querySelector(\".introjs-bullets li > a[data-stepnumber=\\\"\".concat(targetElement.step, \"\\\"]\")).className = \"active\";\n        }\n\n        oldReferenceLayer.querySelector(\".introjs-progress .introjs-progressbar\").style.cssText = \"width:\".concat(_getProgress.call(self), \"%;\");\n        oldReferenceLayer.querySelector(\".introjs-progress .introjs-progressbar\").setAttribute(\"aria-valuenow\", _getProgress.call(self)); //show the tooltip\n\n        oldtooltipContainer.style.opacity = 1; //reset button focus\n\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null && /introjs-donebutton/gi.test(nextTooltipButton.className)) {\n          // skip button is now \"done\" button\n          nextTooltipButton.focus();\n        } else if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          //still in the tour, focus on next\n          nextTooltipButton.focus();\n        } // change the scroll of the window, if needed\n\n\n        scrollTo.call(self, targetElement.scrollTo, targetElement, oldtooltipLayer);\n      }, 350); // end of old element if-else condition\n    } else {\n      var helperLayer = _createElement(\"div\", {\n        className: highlightClass\n      });\n      var referenceLayer = _createElement(\"div\", {\n        className: \"introjs-tooltipReferenceLayer\"\n      });\n      var arrowLayer = _createElement(\"div\", {\n        className: \"introjs-arrow\"\n      });\n      var tooltipLayer = _createElement(\"div\", {\n        className: \"introjs-tooltip\"\n      });\n      var tooltipTextLayer = _createElement(\"div\", {\n        className: \"introjs-tooltiptext\"\n      });\n      var tooltipHeaderLayer = _createElement(\"div\", {\n        className: \"introjs-tooltip-header\"\n      });\n      var tooltipTitleLayer = _createElement(\"h1\", {\n        className: \"introjs-tooltip-title\"\n      });\n      var bulletsLayer = _createElement(\"div\", {\n        className: \"introjs-bullets\"\n      });\n      var progressLayer = _createElement(\"div\");\n      var buttonsLayer = _createElement(\"div\");\n      setStyle(helperLayer, {\n        \"box-shadow\": \"0 0 1px 2px rgba(33, 33, 33, 0.8), rgba(33, 33, 33, \".concat(self._options.overlayOpacity.toString(), \") 0 0 0 5000px\")\n      }); // target is within a scrollable element\n\n      scrollParentToElement.call(self, targetElement); //set new position to helper layer\n\n      setHelperLayerPosition.call(self, helperLayer);\n      setHelperLayerPosition.call(self, referenceLayer); //add helper layer to target element\n\n      appendChild(this._targetElement, helperLayer, true);\n      appendChild(this._targetElement, referenceLayer);\n      tooltipTextLayer.innerHTML = targetElement.intro;\n      tooltipTitleLayer.innerHTML = targetElement.title;\n\n      if (this._options.showBullets === false) {\n        bulletsLayer.style.display = \"none\";\n      }\n\n      var ulContainer = _createElement(\"ul\");\n      ulContainer.setAttribute(\"role\", \"tablist\");\n\n      var anchorClick = function anchorClick() {\n        self.goToStep(this.getAttribute(\"data-stepnumber\"));\n      };\n\n      forEach(this._introItems, function (_ref, i) {\n        var step = _ref.step;\n        var innerLi = _createElement(\"li\");\n        var anchorLink = _createElement(\"a\");\n        innerLi.setAttribute(\"role\", \"presentation\");\n        anchorLink.setAttribute(\"role\", \"tab\");\n        anchorLink.onclick = anchorClick;\n\n        if (i === targetElement.step - 1) {\n          anchorLink.className = \"active\";\n        }\n\n        setAnchorAsButton(anchorLink);\n        anchorLink.innerHTML = \"&nbsp;\";\n        anchorLink.setAttribute(\"data-stepnumber\", step);\n        innerLi.appendChild(anchorLink);\n        ulContainer.appendChild(innerLi);\n      });\n      bulletsLayer.appendChild(ulContainer);\n      progressLayer.className = \"introjs-progress\";\n\n      if (this._options.showProgress === false) {\n        progressLayer.style.display = \"none\";\n      }\n\n      var progressBar = _createElement(\"div\", {\n        className: \"introjs-progressbar\"\n      });\n\n      if (this._options.progressBarAdditionalClass) {\n        progressBar.className += \" \" + this._options.progressBarAdditionalClass;\n      }\n\n      progressBar.setAttribute(\"role\", \"progress\");\n      progressBar.setAttribute(\"aria-valuemin\", 0);\n      progressBar.setAttribute(\"aria-valuemax\", 100);\n      progressBar.setAttribute(\"aria-valuenow\", _getProgress.call(this));\n      progressBar.style.cssText = \"width:\".concat(_getProgress.call(this), \"%;\");\n      progressLayer.appendChild(progressBar);\n      buttonsLayer.className = \"introjs-tooltipbuttons\";\n\n      if (this._options.showButtons === false) {\n        buttonsLayer.style.display = \"none\";\n      }\n\n      tooltipHeaderLayer.appendChild(tooltipTitleLayer);\n      tooltipLayer.appendChild(tooltipHeaderLayer);\n      tooltipLayer.appendChild(tooltipTextLayer);\n      tooltipLayer.appendChild(bulletsLayer);\n      tooltipLayer.appendChild(progressLayer); // add helper layer number\n\n      var helperNumberLayer = _createElement(\"div\");\n\n      if (this._options.showStepNumbers === true) {\n        helperNumberLayer.className = \"introjs-helperNumberLayer\";\n        helperNumberLayer.innerHTML = \"\".concat(targetElement.step, \" of \").concat(this._introItems.length);\n        tooltipLayer.appendChild(helperNumberLayer);\n      }\n\n      tooltipLayer.appendChild(arrowLayer);\n      referenceLayer.appendChild(tooltipLayer); //next button\n\n      nextTooltipButton = _createElement(\"a\");\n\n      nextTooltipButton.onclick = function () {\n        if (self._introItems.length - 1 !== self._currentStep) {\n          nextStep.call(self);\n        } else if (/introjs-donebutton/gi.test(nextTooltipButton.className)) {\n          if (typeof self._introCompleteCallback === \"function\") {\n            self._introCompleteCallback.call(self);\n          }\n\n          exitIntro.call(self, self._targetElement);\n        }\n      };\n\n      setAnchorAsButton(nextTooltipButton);\n      nextTooltipButton.innerHTML = this._options.nextLabel; //previous button\n\n      prevTooltipButton = _createElement(\"a\");\n\n      prevTooltipButton.onclick = function () {\n        if (self._currentStep !== 0) {\n          previousStep.call(self);\n        }\n      };\n\n      setAnchorAsButton(prevTooltipButton);\n      prevTooltipButton.innerHTML = this._options.prevLabel; //skip button\n\n      skipTooltipButton = _createElement(\"a\", {\n        className: \"introjs-skipbutton\"\n      });\n      setAnchorAsButton(skipTooltipButton);\n      skipTooltipButton.innerHTML = this._options.skipLabel;\n\n      skipTooltipButton.onclick = function () {\n        if (self._introItems.length - 1 === self._currentStep && typeof self._introCompleteCallback === \"function\") {\n          self._introCompleteCallback.call(self);\n        }\n\n        if (typeof self._introSkipCallback === \"function\") {\n          self._introSkipCallback.call(self);\n        }\n\n        exitIntro.call(self, self._targetElement);\n      };\n\n      tooltipHeaderLayer.appendChild(skipTooltipButton); //in order to prevent displaying previous button always\n\n      if (this._introItems.length > 1) {\n        buttonsLayer.appendChild(prevTooltipButton);\n      } // we always need the next button because this\n      // button changes to \"Done\" in the last step of the tour\n\n\n      buttonsLayer.appendChild(nextTooltipButton);\n      tooltipLayer.appendChild(buttonsLayer); //set proper position\n\n      placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer); // change the scroll of the window, if needed\n\n      scrollTo.call(this, targetElement.scrollTo, targetElement, tooltipLayer); //end of new element if-else condition\n    } // removing previous disable interaction layer\n\n\n    var disableInteractionLayer = self._targetElement.querySelector(\".introjs-disableInteraction\");\n\n    if (disableInteractionLayer) {\n      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);\n    } //disable interaction\n\n\n    if (targetElement.disableInteraction) {\n      _disableInteraction.call(self);\n    } // when it's the first step of tour\n\n\n    if (this._currentStep === 0 && this._introItems.length > 1) {\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-nextbutton\");\n        nextTooltipButton.innerHTML = this._options.nextLabel;\n      }\n\n      if (this._options.hidePrev === true) {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-prevbutton introjs-hidden\");\n        }\n\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          addClass(nextTooltipButton, \"introjs-fullbutton\");\n        }\n      } else {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-prevbutton introjs-disabled\");\n        }\n      }\n    } else if (this._introItems.length - 1 === this._currentStep || this._introItems.length === 1) {\n      // last step of tour\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-prevbutton\");\n      }\n\n      if (this._options.hideNext === true) {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          nextTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-nextbutton introjs-hidden\");\n        }\n\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          addClass(prevTooltipButton, \"introjs-fullbutton\");\n        }\n      } else {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          if (this._options.nextToDone === true) {\n            nextTooltipButton.innerHTML = this._options.doneLabel;\n            addClass(nextTooltipButton, \"\".concat(this._options.buttonClass, \" introjs-nextbutton introjs-donebutton\"));\n          } else {\n            nextTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-nextbutton introjs-disabled\");\n          }\n        }\n      }\n    } else {\n      // steps between start and end\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-prevbutton\");\n      }\n\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = \"\".concat(this._options.buttonClass, \" introjs-nextbutton\");\n        nextTooltipButton.innerHTML = this._options.nextLabel;\n      }\n    }\n\n    if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n      prevTooltipButton.setAttribute(\"role\", \"button\");\n    }\n\n    if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n      nextTooltipButton.setAttribute(\"role\", \"button\");\n    }\n\n    if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n      skipTooltipButton.setAttribute(\"role\", \"button\");\n    } //Set focus on \"next\" button, so that hitting Enter always moves you onto the next step\n\n\n    if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n      nextTooltipButton.focus();\n    }\n\n    setShowElement(targetElement);\n\n    if (typeof this._introAfterChangeCallback !== \"undefined\") {\n      this._introAfterChangeCallback.call(this, targetElement.element);\n    }\n  }\n\n  /**\n   * Go to specific step of introduction\n   *\n   * @api private\n   * @method _goToStep\n   */\n\n  function goToStep(step) {\n    //because steps starts with zero\n    this._currentStep = step - 2;\n\n    if (typeof this._introItems !== \"undefined\") {\n      nextStep.call(this);\n    }\n  }\n  /**\n   * Go to the specific step of introduction with the explicit [data-step] number\n   *\n   * @api private\n   * @method _goToStepNumber\n   */\n\n  function goToStepNumber(step) {\n    this._currentStepNumber = step;\n\n    if (typeof this._introItems !== \"undefined\") {\n      nextStep.call(this);\n    }\n  }\n  /**\n   * Go to next step on intro\n   *\n   * @api private\n   * @method _nextStep\n   */\n\n  function nextStep() {\n    var _this = this;\n\n    this._direction = \"forward\";\n\n    if (typeof this._currentStepNumber !== \"undefined\") {\n      forEach(this._introItems, function (_ref, i) {\n        var step = _ref.step;\n\n        if (step === _this._currentStepNumber) {\n          _this._currentStep = i - 1;\n          _this._currentStepNumber = undefined;\n        }\n      });\n    }\n\n    if (typeof this._currentStep === \"undefined\") {\n      this._currentStep = 0;\n    } else {\n      ++this._currentStep;\n    }\n\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof this._introBeforeChangeCallback !== \"undefined\") {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep && nextStep.element);\n    } // if `onbeforechange` returned `false`, stop displaying the element\n\n\n    if (continueStep === false) {\n      --this._currentStep;\n      return false;\n    }\n\n    if (this._introItems.length <= this._currentStep) {\n      //end of the intro\n      //check if any callback is defined\n      if (typeof this._introCompleteCallback === \"function\") {\n        this._introCompleteCallback.call(this);\n      }\n\n      exitIntro.call(this, this._targetElement);\n      return;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n  /**\n   * Go to previous step on intro\n   *\n   * @api private\n   * @method _previousStep\n   */\n\n  function previousStep() {\n    this._direction = \"backward\";\n\n    if (this._currentStep === 0) {\n      return false;\n    }\n\n    --this._currentStep;\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof this._introBeforeChangeCallback !== \"undefined\") {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep && nextStep.element);\n    } // if `onbeforechange` returned `false`, stop displaying the element\n\n\n    if (continueStep === false) {\n      ++this._currentStep;\n      return false;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n  /**\n   * Returns the current step of the intro\n   *\n   * @returns {number | boolean}\n   */\n\n  function currentStep() {\n    return this._currentStep;\n  }\n\n  /**\n   * on keyCode:\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n   * This feature has been removed from the Web standards.\n   * Though some browsers may still support it, it is in\n   * the process of being dropped.\n   * Instead, you should use KeyboardEvent.code,\n   * if it's implemented.\n   *\n   * jQuery's approach is to test for\n   *   (1) e.which, then\n   *   (2) e.charCode, then\n   *   (3) e.keyCode\n   * https://github.com/jquery/jquery/blob/a6b0705294d336ae2f63f7276de0da1195495363/src/event.js#L638\n   *\n   * @param type var\n   * @return type\n   */\n\n  function onKeyDown(e) {\n    var code = e.code === undefined ? e.which : e.code; // if e.which is null\n\n    if (code === null) {\n      code = e.charCode === null ? e.keyCode : e.charCode;\n    }\n\n    if ((code === \"Escape\" || code === 27) && this._options.exitOnEsc === true) {\n      //escape key pressed, exit the intro\n      //check if exit callback is defined\n      exitIntro.call(this, this._targetElement);\n    } else if (code === \"ArrowLeft\" || code === 37) {\n      //left arrow\n      previousStep.call(this);\n    } else if (code === \"ArrowRight\" || code === 39) {\n      //right arrow\n      nextStep.call(this);\n    } else if (code === \"Enter\" || code === \"NumpadEnter\" || code === 13) {\n      //srcElement === ie\n      var target = e.target || e.srcElement;\n\n      if (target && target.className.match(\"introjs-prevbutton\")) {\n        //user hit enter while focusing on previous button\n        previousStep.call(this);\n      } else if (target && target.className.match(\"introjs-skipbutton\")) {\n        //user hit enter while focusing on skip button\n        if (this._introItems.length - 1 === this._currentStep && typeof this._introCompleteCallback === \"function\") {\n          this._introCompleteCallback.call(this);\n        }\n\n        exitIntro.call(this, this._targetElement);\n      } else if (target && target.getAttribute(\"data-stepnumber\")) {\n        // user hit enter while focusing on step bullet\n        target.click();\n      } else {\n        //default behavior for responding to enter\n        nextStep.call(this);\n      } //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers\n\n\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    }\n  }\n\n  /*\n   * makes a copy of the object\n   * @api private\n   * @method _cloneObject\n   */\n  function cloneObject(object) {\n    if (object === null || _typeof(object) !== \"object\" || typeof object.nodeType !== \"undefined\") {\n      return object;\n    }\n\n    var temp = {};\n\n    for (var key in object) {\n      if (typeof window.jQuery !== \"undefined\" && object[key] instanceof window.jQuery) {\n        temp[key] = object[key];\n      } else {\n        temp[key] = cloneObject(object[key]);\n      }\n    }\n\n    return temp;\n  }\n\n  /**\n   * Get a queryselector within the hint wrapper\n   *\n   * @param {String} selector\n   * @return {NodeList|Array}\n   */\n\n  function hintQuerySelectorAll(selector) {\n    var hintsWrapper = document.querySelector(\".introjs-hints\");\n    return hintsWrapper ? hintsWrapper.querySelectorAll(selector) : [];\n  }\n  /**\n   * Hide a hint\n   *\n   * @api private\n   * @method hideHint\n   */\n\n  function hideHint(stepId) {\n    var hint = hintQuerySelectorAll(\".introjs-hint[data-step=\\\"\".concat(stepId, \"\\\"]\"))[0];\n    removeHintTooltip.call(this);\n\n    if (hint) {\n      addClass(hint, \"introjs-hidehint\");\n    } // call the callback function (if any)\n\n\n    if (typeof this._hintCloseCallback !== \"undefined\") {\n      this._hintCloseCallback.call(this, stepId);\n    }\n  }\n  /**\n   * Hide all hints\n   *\n   * @api private\n   * @method hideHints\n   */\n\n  function hideHints() {\n    var _this = this;\n\n    var hints = hintQuerySelectorAll(\".introjs-hint\");\n    forEach(hints, function (hint) {\n      hideHint.call(_this, hint.getAttribute(\"data-step\"));\n    });\n  }\n  /**\n   * Show all hints\n   *\n   * @api private\n   * @method _showHints\n   */\n\n  function showHints() {\n    var _this2 = this;\n\n    var hints = hintQuerySelectorAll(\".introjs-hint\");\n\n    if (hints && hints.length) {\n      forEach(hints, function (hint) {\n        showHint.call(_this2, hint.getAttribute(\"data-step\"));\n      });\n    } else {\n      populateHints.call(this, this._targetElement);\n    }\n  }\n  /**\n   * Show a hint\n   *\n   * @api private\n   * @method showHint\n   */\n\n  function showHint(stepId) {\n    var hint = hintQuerySelectorAll(\".introjs-hint[data-step=\\\"\".concat(stepId, \"\\\"]\"))[0];\n\n    if (hint) {\n      removeClass(hint, /introjs-hidehint/g);\n    }\n  }\n  /**\n   * Removes all hint elements on the page\n   * Useful when you want to destroy the elements and add them again (e.g. a modal or popup)\n   *\n   * @api private\n   * @method removeHints\n   */\n\n  function removeHints() {\n    var _this3 = this;\n\n    var hints = hintQuerySelectorAll(\".introjs-hint\");\n    forEach(hints, function (hint) {\n      removeHint.call(_this3, hint.getAttribute(\"data-step\"));\n    });\n  }\n  /**\n   * Remove one single hint element from the page\n   * Useful when you want to destroy the element and add them again (e.g. a modal or popup)\n   * Use removeHints if you want to remove all elements.\n   *\n   * @api private\n   * @method removeHint\n   */\n\n  function removeHint(stepId) {\n    var hint = hintQuerySelectorAll(\".introjs-hint[data-step=\\\"\".concat(stepId, \"\\\"]\"))[0];\n\n    if (hint) {\n      hint.parentNode.removeChild(hint);\n    }\n  }\n  /**\n   * Add all available hints to the page\n   *\n   * @api private\n   * @method addHints\n   */\n\n  function addHints() {\n    var _this4 = this;\n\n    var self = this;\n    var hintsWrapper = document.querySelector(\".introjs-hints\");\n\n    if (hintsWrapper === null) {\n      hintsWrapper = _createElement(\"div\", {\n        className: \"introjs-hints\"\n      });\n    }\n    /**\n     * Returns an event handler unique to the hint iteration\n     *\n     * @param {Integer} i\n     * @return {Function}\n     */\n\n\n    var getHintClick = function getHintClick(i) {\n      return function (e) {\n        var evt = e ? e : window.event;\n\n        if (evt.stopPropagation) {\n          evt.stopPropagation();\n        }\n\n        if (evt.cancelBubble !== null) {\n          evt.cancelBubble = true;\n        }\n\n        showHintDialog.call(self, i);\n      };\n    };\n\n    forEach(this._introItems, function (item, i) {\n      // avoid append a hint twice\n      if (document.querySelector(\".introjs-hint[data-step=\\\"\".concat(i, \"\\\"]\"))) {\n        return;\n      }\n\n      var hint = _createElement(\"a\", {\n        className: \"introjs-hint\"\n      });\n      setAnchorAsButton(hint);\n      hint.onclick = getHintClick(i);\n\n      if (!item.hintAnimation) {\n        addClass(hint, \"introjs-hint-no-anim\");\n      } // hint's position should be fixed if the target element's position is fixed\n\n\n      if (isFixed(item.element)) {\n        addClass(hint, \"introjs-fixedhint\");\n      }\n\n      var hintDot = _createElement(\"div\", {\n        className: \"introjs-hint-dot\"\n      });\n      var hintPulse = _createElement(\"div\", {\n        className: \"introjs-hint-pulse\"\n      });\n      hint.appendChild(hintDot);\n      hint.appendChild(hintPulse);\n      hint.setAttribute(\"data-step\", i); // we swap the hint element with target element\n      // because _setHelperLayerPosition uses `element` property\n\n      item.targetElement = item.element;\n      item.element = hint; // align the hint position\n\n      alignHintPosition.call(_this4, item.hintPosition, hint, item.targetElement);\n      hintsWrapper.appendChild(hint);\n    }); // adding the hints wrapper\n\n    document.body.appendChild(hintsWrapper); // call the callback function (if any)\n\n    if (typeof this._hintsAddedCallback !== \"undefined\") {\n      this._hintsAddedCallback.call(this);\n    }\n  }\n  /**\n   * Aligns hint position\n   *\n   * @api private\n   * @method alignHintPosition\n   * @param {String} position\n   * @param {Object} hint\n   * @param {Object} element\n   */\n\n  function alignHintPosition(position, _ref, element) {\n    var style = _ref.style;\n    // get/calculate offset of target element\n    var offset = getOffset.call(this, element);\n    var iconWidth = 20;\n    var iconHeight = 20; // align the hint element\n\n    switch (position) {\n      default:\n      case \"top-left\":\n        style.left = \"\".concat(offset.left, \"px\");\n        style.top = \"\".concat(offset.top, \"px\");\n        break;\n\n      case \"top-right\":\n        style.left = \"\".concat(offset.left + offset.width - iconWidth, \"px\");\n        style.top = \"\".concat(offset.top, \"px\");\n        break;\n\n      case \"bottom-left\":\n        style.left = \"\".concat(offset.left, \"px\");\n        style.top = \"\".concat(offset.top + offset.height - iconHeight, \"px\");\n        break;\n\n      case \"bottom-right\":\n        style.left = \"\".concat(offset.left + offset.width - iconWidth, \"px\");\n        style.top = \"\".concat(offset.top + offset.height - iconHeight, \"px\");\n        break;\n\n      case \"middle-left\":\n        style.left = \"\".concat(offset.left, \"px\");\n        style.top = \"\".concat(offset.top + (offset.height - iconHeight) / 2, \"px\");\n        break;\n\n      case \"middle-right\":\n        style.left = \"\".concat(offset.left + offset.width - iconWidth, \"px\");\n        style.top = \"\".concat(offset.top + (offset.height - iconHeight) / 2, \"px\");\n        break;\n\n      case \"middle-middle\":\n        style.left = \"\".concat(offset.left + (offset.width - iconWidth) / 2, \"px\");\n        style.top = \"\".concat(offset.top + (offset.height - iconHeight) / 2, \"px\");\n        break;\n\n      case \"bottom-middle\":\n        style.left = \"\".concat(offset.left + (offset.width - iconWidth) / 2, \"px\");\n        style.top = \"\".concat(offset.top + offset.height - iconHeight, \"px\");\n        break;\n\n      case \"top-middle\":\n        style.left = \"\".concat(offset.left + (offset.width - iconWidth) / 2, \"px\");\n        style.top = \"\".concat(offset.top, \"px\");\n        break;\n    }\n  }\n  /**\n   * Triggers when user clicks on the hint element\n   *\n   * @api private\n   * @method _showHintDialog\n   * @param {Number} stepId\n   */\n\n  function showHintDialog(stepId) {\n    var hintElement = document.querySelector(\".introjs-hint[data-step=\\\"\".concat(stepId, \"\\\"]\"));\n    var item = this._introItems[stepId]; // call the callback function (if any)\n\n    if (typeof this._hintClickCallback !== \"undefined\") {\n      this._hintClickCallback.call(this, hintElement, item, stepId);\n    } // remove all open tooltips\n\n\n    var removedStep = removeHintTooltip.call(this); // to toggle the tooltip\n\n    if (parseInt(removedStep, 10) === stepId) {\n      return;\n    }\n\n    var tooltipLayer = _createElement(\"div\", {\n      className: \"introjs-tooltip\"\n    });\n    var tooltipTextLayer = _createElement(\"div\");\n    var arrowLayer = _createElement(\"div\");\n    var referenceLayer = _createElement(\"div\");\n\n    tooltipLayer.onclick = function (e) {\n      //IE9 & Other Browsers\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } //IE8 and Lower\n      else {\n          e.cancelBubble = true;\n        }\n    };\n\n    tooltipTextLayer.className = \"introjs-tooltiptext\";\n    var tooltipWrapper = _createElement(\"p\");\n    tooltipWrapper.innerHTML = item.hint;\n    var closeButton = _createElement(\"a\");\n    closeButton.className = this._options.buttonClass;\n    closeButton.setAttribute(\"role\", \"button\");\n    closeButton.innerHTML = this._options.hintButtonLabel;\n    closeButton.onclick = hideHint.bind(this, stepId);\n    tooltipTextLayer.appendChild(tooltipWrapper);\n    tooltipTextLayer.appendChild(closeButton);\n    arrowLayer.className = \"introjs-arrow\";\n    tooltipLayer.appendChild(arrowLayer);\n    tooltipLayer.appendChild(tooltipTextLayer); // set current step for _placeTooltip function\n\n    this._currentStep = hintElement.getAttribute(\"data-step\"); // align reference layer position\n\n    referenceLayer.className = \"introjs-tooltipReferenceLayer introjs-hintReference\";\n    referenceLayer.setAttribute(\"data-step\", hintElement.getAttribute(\"data-step\"));\n    setHelperLayerPosition.call(this, referenceLayer);\n    referenceLayer.appendChild(tooltipLayer);\n    document.body.appendChild(referenceLayer); //set proper position\n\n    placeTooltip.call(this, hintElement, tooltipLayer, arrowLayer, true);\n  }\n  /**\n   * Removes open hint (tooltip hint)\n   *\n   * @api private\n   * @method _removeHintTooltip\n   */\n\n  function removeHintTooltip() {\n    var tooltip = document.querySelector(\".introjs-hintReference\");\n\n    if (tooltip) {\n      var step = tooltip.getAttribute(\"data-step\");\n      tooltip.parentNode.removeChild(tooltip);\n      return step;\n    }\n  }\n  /**\n   * Start parsing hint items\n   *\n   * @api private\n   * @param {Object} targetElm\n   * @method _startHint\n   */\n\n  function populateHints(targetElm) {\n    var _this5 = this;\n\n    this._introItems = [];\n\n    if (this._options.hints) {\n      forEach(this._options.hints, function (hint) {\n        var currentItem = cloneObject(hint);\n\n        if (typeof currentItem.element === \"string\") {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        }\n\n        currentItem.hintPosition = currentItem.hintPosition || _this5._options.hintPosition;\n        currentItem.hintAnimation = currentItem.hintAnimation || _this5._options.hintAnimation;\n\n        if (currentItem.element !== null) {\n          _this5._introItems.push(currentItem);\n        }\n      });\n    } else {\n      var hints = targetElm.querySelectorAll(\"*[data-hint]\");\n\n      if (!hints || !hints.length) {\n        return false;\n      } //first add intro items with data-step\n\n\n      forEach(hints, function (currentElement) {\n        // hint animation\n        var hintAnimation = currentElement.getAttribute(\"data-hintanimation\");\n\n        if (hintAnimation) {\n          hintAnimation = hintAnimation === \"true\";\n        } else {\n          hintAnimation = _this5._options.hintAnimation;\n        }\n\n        _this5._introItems.push({\n          element: currentElement,\n          hint: currentElement.getAttribute(\"data-hint\"),\n          hintPosition: currentElement.getAttribute(\"data-hintposition\") || _this5._options.hintPosition,\n          hintAnimation: hintAnimation,\n          tooltipClass: currentElement.getAttribute(\"data-tooltipclass\"),\n          position: currentElement.getAttribute(\"data-position\") || _this5._options.tooltipPosition\n        });\n      });\n    }\n\n    addHints.call(this);\n    /*\n    todo:\n    these events should be removed at some point\n    */\n\n    DOMEvent.on(document, \"click\", removeHintTooltip, this, false);\n    DOMEvent.on(window, \"resize\", reAlignHints, this, true);\n  }\n  /**\n   * Re-aligns all hint elements\n   *\n   * @api private\n   * @method _reAlignHints\n   */\n\n  function reAlignHints() {\n    var _this6 = this;\n\n    forEach(this._introItems, function (_ref2) {\n      var targetElement = _ref2.targetElement,\n          hintPosition = _ref2.hintPosition,\n          element = _ref2.element;\n\n      if (typeof targetElement === \"undefined\") {\n        return;\n      }\n\n      alignHintPosition.call(_this6, hintPosition, element, targetElement);\n    });\n  }\n\n  /**\n   * Update placement of the intro objects on the screen\n   * @api private\n   */\n\n  function refresh() {\n    // re-align intros\n    setHelperLayerPosition.call(this, document.querySelector(\".introjs-helperLayer\"));\n    setHelperLayerPosition.call(this, document.querySelector(\".introjs-tooltipReferenceLayer\"));\n    setHelperLayerPosition.call(this, document.querySelector(\".introjs-disableInteraction\")); // re-align tooltip\n\n    if (this._currentStep !== undefined && this._currentStep !== null) {\n      var oldArrowLayer = document.querySelector(\".introjs-arrow\");\n      var oldtooltipContainer = document.querySelector(\".introjs-tooltip\");\n      placeTooltip.call(this, this._introItems[this._currentStep].element, oldtooltipContainer, oldArrowLayer);\n    } //re-align hints\n\n\n    reAlignHints.call(this);\n    return this;\n  }\n\n  function onResize() {\n    refresh.call(this);\n  }\n\n  /**\n   * Removes `element` from `parentElement`\n   *\n   * @param {Element} element\n   * @param {Boolean} [animate=false]\n   */\n\n  function removeChild(element, animate) {\n    if (!element || !element.parentElement) return;\n    var parentElement = element.parentElement;\n\n    if (animate) {\n      setStyle(element, {\n        opacity: \"0\"\n      });\n      window.setTimeout(function () {\n        parentElement.removeChild(element);\n      }, 500);\n    } else {\n      parentElement.removeChild(element);\n    }\n  }\n\n  /**\n   * Exit from intro\n   *\n   * @api private\n   * @method _exitIntro\n   * @param {Object} targetElement\n   * @param {Boolean} force - Setting to `true` will skip the result of beforeExit callback\n   */\n\n  function exitIntro(targetElement, force) {\n    var continueExit = true; // calling onbeforeexit callback\n    //\n    // If this callback return `false`, it would halt the process\n\n    if (this._introBeforeExitCallback !== undefined) {\n      continueExit = this._introBeforeExitCallback.call(this);\n    } // skip this check if `force` parameter is `true`\n    // otherwise, if `onbeforeexit` returned `false`, don't exit the intro\n\n\n    if (!force && continueExit === false) return; // remove overlay layers from the page\n\n    var overlayLayers = targetElement.querySelectorAll(\".introjs-overlay\");\n\n    if (overlayLayers && overlayLayers.length) {\n      forEach(overlayLayers, function (overlayLayer) {\n        return removeChild(overlayLayer);\n      });\n    } //remove all helper layers\n\n\n    var helperLayer = targetElement.querySelector(\".introjs-helperLayer\");\n    removeChild(helperLayer, true);\n    var referenceLayer = targetElement.querySelector(\".introjs-tooltipReferenceLayer\");\n    removeChild(referenceLayer); //remove disableInteractionLayer\n\n    var disableInteractionLayer = targetElement.querySelector(\".introjs-disableInteraction\");\n    removeChild(disableInteractionLayer); //remove intro floating element\n\n    var floatingElement = document.querySelector(\".introjsFloatingElement\");\n    removeChild(floatingElement);\n    removeShowElement(); //clean listeners\n\n    DOMEvent.off(window, \"keydown\", onKeyDown, this, true);\n    DOMEvent.off(window, \"resize\", onResize, this, true); //check if any callback is defined\n\n    if (this._introExitCallback !== undefined) {\n      this._introExitCallback.call(this);\n    } //set the step to zero\n\n\n    this._currentStep = undefined;\n  }\n\n  /**\n   * Add overlay layer to the page\n   *\n   * @api private\n   * @method _addOverlayLayer\n   * @param {Object} targetElm\n   */\n\n  function addOverlayLayer(targetElm) {\n    var overlayLayer = _createElement(\"div\", {\n      className: \"introjs-overlay\"\n    });\n    var self = this; // check if the target element is body, we should calculate the size of overlay layer in a better way\n\n    if (!targetElm.tagName || targetElm.tagName.toLowerCase() === \"body\") {\n      setStyle(overlayLayer, {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        position: \"fixed\"\n      });\n    } else {\n      // set overlay layer position\n      var elementPosition = getOffset(targetElm);\n\n      if (elementPosition) {\n        setStyle(overlayLayer, {\n          width: \"\".concat(elementPosition.width, \"px\"),\n          height: \"\".concat(elementPosition.height, \"px\"),\n          top: \"\".concat(elementPosition.top, \"px\"),\n          left: \"\".concat(elementPosition.left, \"px\")\n        });\n      }\n    }\n\n    targetElm.appendChild(overlayLayer);\n\n    if (self._options.exitOnOverlayClick === true) {\n      setStyle(overlayLayer, {\n        cursor: \"pointer\"\n      });\n\n      overlayLayer.onclick = function () {\n        exitIntro.call(self, targetElm);\n      };\n    }\n\n    return true;\n  }\n\n  /**\n   * Initiate a new introduction/guide from an element in the page\n   *\n   * @api private\n   * @method _introForElement\n   * @param {Object} targetElm\n   * @param {String} group\n   * @returns {Boolean} Success or not?\n   */\n\n  function introForElement(targetElm, group) {\n    var _this = this;\n\n    var allIntroSteps = targetElm.querySelectorAll(\"*[data-intro]\");\n    var introItems = [];\n\n    if (this._options.steps) {\n      //use steps passed programmatically\n      forEach(this._options.steps, function (step) {\n        var currentItem = cloneObject(step); //set the step\n\n        currentItem.step = introItems.length + 1;\n        currentItem.title = currentItem.title || \"\"; //use querySelector function only when developer used CSS selector\n\n        if (typeof currentItem.element === \"string\") {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        } //intro without element\n\n\n        if (typeof currentItem.element === \"undefined\" || currentItem.element === null) {\n          var floatingElementQuery = document.querySelector(\".introjsFloatingElement\");\n\n          if (floatingElementQuery === null) {\n            floatingElementQuery = _createElement(\"div\", {\n              className: \"introjsFloatingElement\"\n            });\n            document.body.appendChild(floatingElementQuery);\n          }\n\n          currentItem.element = floatingElementQuery;\n          currentItem.position = \"floating\";\n        }\n\n        currentItem.scrollTo = currentItem.scrollTo || _this._options.scrollTo;\n\n        if (typeof currentItem.disableInteraction === \"undefined\") {\n          currentItem.disableInteraction = _this._options.disableInteraction;\n        }\n\n        if (currentItem.element !== null) {\n          introItems.push(currentItem);\n        }\n      });\n    } else {\n      //use steps from data-* annotations\n      var elmsLength = allIntroSteps.length;\n      var disableInteraction; //if there's no element to intro\n\n      if (elmsLength < 1) {\n        return false;\n      }\n\n      forEach(allIntroSteps, function (currentElement) {\n        // PR #80\n        // start intro for groups of elements\n        if (group && currentElement.getAttribute(\"data-intro-group\") !== group) {\n          return;\n        } // skip hidden elements\n\n\n        if (currentElement.style.display === \"none\") {\n          return;\n        }\n\n        var step = parseInt(currentElement.getAttribute(\"data-step\"), 10);\n\n        if (currentElement.hasAttribute(\"data-disable-interaction\")) {\n          disableInteraction = !!currentElement.getAttribute(\"data-disable-interaction\");\n        } else {\n          disableInteraction = _this._options.disableInteraction;\n        }\n\n        if (step > 0) {\n          introItems[step - 1] = {\n            element: currentElement,\n            title: currentElement.getAttribute(\"data-title\") || \"\",\n            intro: currentElement.getAttribute(\"data-intro\"),\n            step: parseInt(currentElement.getAttribute(\"data-step\"), 10),\n            tooltipClass: currentElement.getAttribute(\"data-tooltipclass\"),\n            highlightClass: currentElement.getAttribute(\"data-highlightclass\"),\n            position: currentElement.getAttribute(\"data-position\") || _this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute(\"data-scrollto\") || _this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      }); //next add intro items without data-step\n      //todo: we need a cleanup here, two loops are redundant\n\n      var _nextStep = 0;\n      forEach(allIntroSteps, function (currentElement) {\n        // PR #80\n        // start intro for groups of elements\n        if (group && currentElement.getAttribute(\"data-intro-group\") !== group) {\n          return;\n        }\n\n        if (currentElement.getAttribute(\"data-step\") === null) {\n          while (true) {\n            if (typeof introItems[_nextStep] === \"undefined\") {\n              break;\n            } else {\n              _nextStep++;\n            }\n          }\n\n          if (currentElement.hasAttribute(\"data-disable-interaction\")) {\n            disableInteraction = !!currentElement.getAttribute(\"data-disable-interaction\");\n          } else {\n            disableInteraction = _this._options.disableInteraction;\n          }\n\n          introItems[_nextStep] = {\n            element: currentElement,\n            title: currentElement.getAttribute(\"data-title\") || \"\",\n            intro: currentElement.getAttribute(\"data-intro\"),\n            step: _nextStep + 1,\n            tooltipClass: currentElement.getAttribute(\"data-tooltipclass\"),\n            highlightClass: currentElement.getAttribute(\"data-highlightclass\"),\n            position: currentElement.getAttribute(\"data-position\") || _this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute(\"data-scrollto\") || _this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      });\n    } //removing undefined/null elements\n\n\n    var tempIntroItems = [];\n\n    for (var z = 0; z < introItems.length; z++) {\n      if (introItems[z]) {\n        // copy non-falsy values to the end of the array\n        tempIntroItems.push(introItems[z]);\n      }\n    }\n\n    introItems = tempIntroItems; //Ok, sort all items with given steps\n\n    introItems.sort(function (a, b) {\n      return a.step - b.step;\n    }); //set it to the introJs object\n\n    this._introItems = introItems; //add overlay layer to the page\n\n    if (addOverlayLayer.call(this, targetElm)) {\n      //then, start the show\n      nextStep.call(this);\n\n      if (this._options.keyboardNavigation) {\n        DOMEvent.on(window, \"keydown\", onKeyDown, this, true);\n      } //for window resize\n\n\n      DOMEvent.on(window, \"resize\", onResize, this, true);\n    }\n\n    return false;\n  }\n\n  var version$1 = \"3.3.1\";\n\n  /**\n   * IntroJs main class\n   *\n   * @class IntroJs\n   */\n\n  function IntroJs(obj) {\n    this._targetElement = obj;\n    this._introItems = [];\n    this._options = {\n      /* Next button label in tooltip box */\n      nextLabel: \"Next\",\n\n      /* Previous button label in tooltip box */\n      prevLabel: \"Back\",\n\n      /* Skip button label in tooltip box */\n      skipLabel: \"×\",\n\n      /* Done button label in tooltip box */\n      doneLabel: \"Done\",\n\n      /* Hide previous button in the first step? Otherwise, it will be disabled button. */\n      hidePrev: false,\n\n      /* Hide next button in the last step? Otherwise, it will be disabled button (note: this will also hide the \"Done\" button) */\n      hideNext: false,\n\n      /* Change the Next button to Done in the last step of the intro? otherwise, it will render a disabled button */\n      nextToDone: true,\n\n      /* Default tooltip box position */\n      tooltipPosition: \"bottom\",\n\n      /* Next CSS class for tooltip boxes */\n      tooltipClass: \"\",\n\n      /* CSS class that is added to the helperLayer */\n      highlightClass: \"\",\n\n      /* Close introduction when pressing Escape button? */\n      exitOnEsc: true,\n\n      /* Close introduction when clicking on overlay layer? */\n      exitOnOverlayClick: true,\n\n      /* Show step numbers in introduction? */\n      showStepNumbers: false,\n\n      /* Let user use keyboard to navigate the tour? */\n      keyboardNavigation: true,\n\n      /* Show tour control buttons? */\n      showButtons: true,\n\n      /* Show tour bullets? */\n      showBullets: true,\n\n      /* Show tour progress? */\n      showProgress: false,\n\n      /* Scroll to highlighted element? */\n      scrollToElement: true,\n\n      /*\n       * Should we scroll the tooltip or target element?\n       *\n       * Options are: 'element' or 'tooltip'\n       */\n      scrollTo: \"element\",\n\n      /* Padding to add after scrolling when element is not in the viewport (in pixels) */\n      scrollPadding: 30,\n\n      /* Set the overlay opacity */\n      overlayOpacity: 0.5,\n\n      /* To determine the tooltip position automatically based on the window.width/height */\n      autoPosition: true,\n\n      /* Precedence of positions, when auto is enabled */\n      positionPrecedence: [\"bottom\", \"top\", \"right\", \"left\"],\n\n      /* Disable an interaction with element? */\n      disableInteraction: false,\n\n      /* Set how much padding to be used around helper element */\n      helperElementPadding: 10,\n\n      /* Default hint position */\n      hintPosition: \"top-middle\",\n\n      /* Hint button label */\n      hintButtonLabel: \"Got it\",\n\n      /* Adding animation to hints? */\n      hintAnimation: true,\n\n      /* additional classes to put on the buttons */\n      buttonClass: \"introjs-button\",\n\n      /* additional classes to put on progress bar */\n      progressBarAdditionalClass: false\n    };\n  }\n\n  var introJs = function introJs(targetElm) {\n    var instance;\n\n    if (_typeof(targetElm) === \"object\") {\n      //Ok, create a new instance\n      instance = new IntroJs(targetElm);\n    } else if (typeof targetElm === \"string\") {\n      //select the target element with query selector\n      var targetElement = document.querySelector(targetElm);\n\n      if (targetElement) {\n        instance = new IntroJs(targetElement);\n      } else {\n        throw new Error(\"There is no element with given selector.\");\n      }\n    } else {\n      instance = new IntroJs(document.body);\n    } // add instance to list of _instances\n    // passing group to stamp to increment\n    // from 0 onward somewhat reliably\n\n\n    introJs.instances[stamp(instance, \"introjs-instance\")] = instance;\n    return instance;\n  };\n  /**\n   * Current IntroJs version\n   *\n   * @property version\n   * @type String\n   */\n\n\n  introJs.version = version$1;\n  /**\n   * key-val object helper for introJs instances\n   *\n   * @property instances\n   * @type Object\n   */\n\n  introJs.instances = {}; //Prototype\n\n  introJs.fn = IntroJs.prototype = {\n    clone: function clone() {\n      return new IntroJs(this);\n    },\n    setOption: function setOption(option, value) {\n      this._options[option] = value;\n      return this;\n    },\n    setOptions: function setOptions(options) {\n      this._options = mergeOptions(this._options, options);\n      return this;\n    },\n    start: function start(group) {\n      introForElement.call(this, this._targetElement, group);\n      return this;\n    },\n    goToStep: function goToStep$1(step) {\n      goToStep.call(this, step);\n\n      return this;\n    },\n    addStep: function addStep(options) {\n      if (!this._options.steps) {\n        this._options.steps = [];\n      }\n\n      this._options.steps.push(options);\n\n      return this;\n    },\n    addSteps: function addSteps(steps) {\n      if (!steps.length) return;\n\n      for (var index = 0; index < steps.length; index++) {\n        this.addStep(steps[index]);\n      }\n\n      return this;\n    },\n    goToStepNumber: function goToStepNumber$1(step) {\n      goToStepNumber.call(this, step);\n\n      return this;\n    },\n    nextStep: function nextStep$1() {\n      nextStep.call(this);\n\n      return this;\n    },\n    previousStep: function previousStep$1() {\n      previousStep.call(this);\n\n      return this;\n    },\n    currentStep: function currentStep$1() {\n      return currentStep.call(this);\n    },\n    exit: function exit(force) {\n      exitIntro.call(this, this._targetElement, force);\n      return this;\n    },\n    refresh: function refresh$1() {\n      refresh.call(this);\n\n      return this;\n    },\n    onbeforechange: function onbeforechange(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introBeforeChangeCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onbeforechange was not a function\");\n      }\n\n      return this;\n    },\n    onchange: function onchange(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introChangeCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onchange was not a function.\");\n      }\n\n      return this;\n    },\n    onafterchange: function onafterchange(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introAfterChangeCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onafterchange was not a function\");\n      }\n\n      return this;\n    },\n    oncomplete: function oncomplete(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introCompleteCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for oncomplete was not a function.\");\n      }\n\n      return this;\n    },\n    onhintsadded: function onhintsadded(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._hintsAddedCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onhintsadded was not a function.\");\n      }\n\n      return this;\n    },\n    onhintclick: function onhintclick(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._hintClickCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onhintclick was not a function.\");\n      }\n\n      return this;\n    },\n    onhintclose: function onhintclose(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._hintCloseCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onhintclose was not a function.\");\n      }\n\n      return this;\n    },\n    onexit: function onexit(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introExitCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onexit was not a function.\");\n      }\n\n      return this;\n    },\n    onskip: function onskip(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introSkipCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onskip was not a function.\");\n      }\n\n      return this;\n    },\n    onbeforeexit: function onbeforeexit(providedCallback) {\n      if (typeof providedCallback === \"function\") {\n        this._introBeforeExitCallback = providedCallback;\n      } else {\n        throw new Error(\"Provided callback for onbeforeexit was not a function.\");\n      }\n\n      return this;\n    },\n    addHints: function addHints() {\n      populateHints.call(this, this._targetElement);\n      return this;\n    },\n    hideHint: function hideHint$1(stepId) {\n      hideHint.call(this, stepId);\n\n      return this;\n    },\n    hideHints: function hideHints$1() {\n      hideHints.call(this);\n\n      return this;\n    },\n    showHint: function showHint$1(stepId) {\n      showHint.call(this, stepId);\n\n      return this;\n    },\n    showHints: function showHints$1() {\n      showHints.call(this);\n\n      return this;\n    },\n    removeHints: function removeHints$1() {\n      removeHints.call(this);\n\n      return this;\n    },\n    removeHint: function removeHint$1(stepId) {\n      removeHint().call(this, stepId);\n\n      return this;\n    },\n    showHintDialog: function showHintDialog$1(stepId) {\n      showHintDialog.call(this, stepId);\n\n      return this;\n    }\n  };\n\n  return introJs;\n\n})));\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ThirdParty/intro.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "js/Timer/Timer.js",
    "content": "import {\n  sessionStartName, distractionMessage, workMode, shortBreakMode, longBreakMode, buttonText,\n} from './TimerVariables.js';\nimport { workModeColors } from '../Misc/ChangeColors.js';\n\nimport { timeToString } from '../Misc/UtilityFunctions.js';\n/**\n * A class for the Timer object. Has functions to start the timer,\n * display the current mode of the timer and display the time remaining\n * Class throws the 'timer-complete' event\n */\nclass Timer extends HTMLElement {\n  /**\n   * Constructor of Time Object. Takes the HTML element of where\n   * you want the time and the status of the timer to be implemented.\n   * HTML Elements must have the 'textElement' attribute.\n   * @param {HTMLButtonElement} startButton - button that starts the button\n   * @param {HTMLParagraphElement} timeDisplay - area to display the time remaining\n   * @param {HTMLParagraphElement} displayStatus - area to display the status of the timer\n   */\n  constructor(startButton, timeDisplay, displayStatus) {\n    super();\n    /**\n     * State of the timer (the current mode)\n     * @type {String}\n     */\n    this.state = '';\n    /**\n     * Queue that stores the Session objects. Rotates to provide\n     * rotation functionality for the timer\n     * @type {Object[]}\n     * @property {String} object.name name of the session\n     * @property {Number} object.duration duration of the session\n     */\n    this.stateQueue = [];\n    /**\n     * HTML Tag that is reponsible for controlling the timer\n     * @type {HTMLElement}\n     */\n    this.startButton = startButton;\n    /**\n     * HTML Tag that is reponsible for displaying the time remaining\n     * @type {HTMLElement}\n     */\n    this.timeDisplay = timeDisplay;\n    /**\n     * HTML Tag that is reponsible for displaying the mode of the timer\n     * @type {HTMLElement}\n     */\n    this.displayStatus = displayStatus;\n    /**\n     * HTML tag for controlling the focus timer length\n     * @type {HTMLElement}\n     */\n    this.focusTime = document.getElementById('focusTime');\n    /**\n     * HTML tag for controlling the short break timer length\n     * @type {HTMLElement}\n     */\n    this.shortBreakTime = document.getElementById('shortBreakTime');\n    /**\n     * HTML tag for controlling the long break timer length\n     * @type {HTMLElement}\n     */\n    this.longBreakTime = document.getElementById('longBreakTime');\n    /**\n     * auto start switch element\n     * @type {HTMLInputElement}\n     */\n    this.autoStart = document.getElementById('autoStartSwitch');\n    /**\n     * Web worker responsible for count down timer\n     * @type {Worker}\n     */\n    this.timerWorker = new Worker('./js/Timer/TimerWorker.js');\n    // Recieve message from web worker and update display\n    this.timerWorker.onmessage = (e) => {\n      if (e.data !== -1) {\n        this.timeDisplay.textContent = e.data;\n        document.title = `${e.data} ${this.state}`;\n      } else {\n        this.onTimerComplete();\n      }\n    };\n    /**\n     * The sessionId. Increments on each working session. Stored in\n     * local storage to keep track of id on multiple sessions every day\n     * @type {Number}\n     */\n    this.sessionId = localStorage.getItem('pomoSessionId');\n    this.sessionId = ((this.sessionId === null) ? 0 : parseInt(this.sessionId, 10) + 1);\n\n    // this is the order for the timer. It will loop in this order.\n    const workOrder = [workMode, shortBreakMode, workMode,\n      shortBreakMode, workMode, shortBreakMode, workMode, longBreakMode];\n    // for (let i = 0; i < workOrder.length; i += 1) {\n    //   this.stateQueue.push(workOrder[i]);\n    // }\n    this.stateQueue = workOrder;\n\n    // #6 get previous time durations from localStorage on refresh\n    if (localStorage.getItem('workModeTime') !== null) {\n      // ...\n      workMode.duration = localStorage.getItem('workModeTime');\n    }\n    if (localStorage.getItem('shortBreakTime') !== null) {\n      // ...\n      shortBreakMode.duration = localStorage.getItem('shortBreakTime');\n    }\n    if (localStorage.getItem('longBreakTime') !== null) {\n      // ...\n      longBreakMode.duration = localStorage.getItem('longBreakTime');\n    }\n\n    // #6 We can do this with \"this\" as shown above, just did it this way as a test\n    if (this.focusTime !== null) {\n      this.focusTime.value = workMode.duration;\n      this.shortBreakTime.value = shortBreakMode.duration;\n      this.longBreakTime.value = longBreakMode.duration;\n    }\n    if (this.timeDisplay !== null) {\n      this.timeDisplay.textContent = timeToString(workMode.duration * 60);\n    }\n    this.addEventListeners();\n  }\n\n  /**\n   * Function that resets the pomo session id and stores it in local storage\n   */\n  resetPomoSessionId() {\n    this.sessionId = 0;\n    localStorage.setItem('pomoSessionId', this.sessionId);\n  }\n\n  /**\n   * Function that fires when the timer runs out of time.\n   * Moves on to start the timer again at the end of the function.\n   */\n  onTimerComplete() {\n    const completedSession = this.stateQueue.shift();\n\n    // Gets current state to determine which notification to give.\n    const currentState = this.stateQueue[0].name;\n    const iconUrl = './assets/img/webicon.png';\n    /* istanbul ignore next */\n    if ('Notification' in window && Notification.permission === 'granted') {\n      if (currentState === 'Short Break') {\n        new Notification('Pomo XV', {\n          body: 'Time for a short break!',\n          icon: iconUrl,\n        });\n      } else if (currentState === 'Working Time') {\n        new Notification('Pomo XV', {\n          body: 'Time to work!',\n          icon: iconUrl,\n        });\n      } else if (currentState === 'Long Break') {\n        new Notification('Pomo XV', {\n          body: 'Time for a long break!',\n          icon: iconUrl,\n        });\n      }\n    }\n\n    this.stateQueue.push(completedSession);\n    const event = new CustomEvent('timer-complete', {\n      detail: {\n        sessionName: completedSession.name,\n        duration: completedSession.duration,\n        sessionIsWork: completedSession.isWork,\n        sessionId: this.sessionId,\n        nextSessionName: this.stateQueue[0].name,\n        longBreakLocation: this.stateQueue.findIndex((el) => el === longBreakMode),\n      },\n    });\n\n    this.dispatchEvent(event);\n    if (!completedSession.isWork) {\n      this.sessionId += 1;\n      localStorage.setItem('pomoSessionId', this.sessionId);\n    }\n\n    if (this.autoStart.checked === false) {\n      // check whether auto start break option is checked\n      // update the display if the option is not checked, but don't start the timer yet\n      this.state = this.stateQueue[0].name;\n      this.updateDisplay();\n    } else {\n      // start the timer automatically if option is checked\n      this.startTimer();\n    }\n  }\n\n  /**\n   * Starts the timer for the session at the top of the queue.\n   * Updates the display for the status.\n   */\n  startTimer() {\n    // Edgar: StateQueue is set right after line 62, we get our timee duration\n    // from TimerVariables.js, we want to change this to user set duration\n    const session = this.stateQueue[0];\n    this.state = session.name;\n    this.displayStatus.textContent = this.state;\n    const event = new CustomEvent('timer-start', {\n      detail: {\n        sessionName: this.state,\n        sessionIsWork: session.isWork,\n      },\n    });\n\n    this.dispatchEvent(event);\n    this.timerWorker.postMessage(session.duration * 60);\n  }\n\n  /**\n   * Ends the timer.\n   * Updates the display for the status.\n   */\n  endTimer() {\n    this.timerWorker.postMessage(-1);\n    this.displayStatus.textContent = sessionStartName;\n    // #6: only works with whole numbers\n    this.timeDisplay.textContent = timeToString(workMode.duration * 60);\n    document.title = 'PomoXV';\n    this.stateQueue = [];\n    const workOrder = [workMode, shortBreakMode, workMode,\n      shortBreakMode, workMode, shortBreakMode, workMode, longBreakMode];\n    for (let i = 0; i < workOrder.length; i += 1) {\n      this.stateQueue.push(workOrder[i]);\n    }\n    const event = new CustomEvent('timer-end');\n    this.dispatchEvent(event);\n    // When ending the timer, reset all indicators\n    const indicators = document.querySelectorAll('.indicator');\n    for (let i = 0; i < indicators.length; i += 1) {\n      indicators[i].textContent = 'trip_origin';\n    }\n    // Show focus time\n    this.timeDisplay.className = 'show-focus-time';\n  }\n\n  /**\n   * Reset the current work session, used for distraction\n   */\n  resetSession() {\n    this.timerWorker.postMessage(-1);\n    this.updateDisplay();\n    this.displayStatus.textContent = distractionMessage;\n    document.title = 'Distracted';\n  }\n\n  /**\n   * Change and save timer length when changed.\n   */\n  // Issue #6: only works with whole numbers\n  changeTime(e) {\n    // Does not allow user to input 0 or numbers over 99\n    if (e.target.value === 0) { e.target.value = 1; }\n    if (e.target.value > 99) { e.target.value = 99; }\n    if (e.target.id === 'focusTime') {\n      if (this.timeDisplay.className === 'show-focus-time') {\n        this.timeDisplay.textContent = `${e.target.value}:00`;\n      }\n      workMode.duration = e.target.value;\n      localStorage.setItem('workModeTime', e.target.value);\n    } else if (e.target.id === 'shortBreakTime') {\n      // document.getElementById(\"timeDisplay\").textContent = \" \" + e.target.value + \":00\" + \" \";\n      if (this.timeDisplay.className === 'show-short-break-time') {\n        this.timeDisplay.textContent = `${e.target.value}:00`;\n      }\n      shortBreakMode.duration = e.target.value;\n      localStorage.setItem('shortBreakTime', e.target.value);\n    } else if (e.target.id === 'longBreakTime') {\n      // document.getElementById(\"timeDisplay\").textContent = \" \" + e.target.value + \":00\" + \" \";\n      if (this.timeDisplay.className === 'show-long-break-time') {\n        this.timeDisplay.textContent = `${e.target.value}:00`;\n      }\n      longBreakMode.duration = e.target.value;\n      localStorage.setItem('longBreakTime', e.target.value);\n    }\n  }\n\n  /**\n   * Adds event listener to the start button that was added\n   * Add event listeners to change timer length\n   */\n  addEventListeners() {\n    this.startButton.addEventListener('click', () => {\n      if (this.startButton.textContent.indexOf(buttonText.startTimerText) > -1) {\n        this.startTimer();\n        this.startButton.childNodes[0].nodeValue = buttonText.stopTimerText;\n      } else {\n        this.endTimer();\n        this.startButton.childNodes[0].nodeValue = buttonText.startTimerText;\n        workModeColors();\n      }\n    });\n\n    this.focusTime.addEventListener('change', (event) => { this.changeTime(event); });\n    this.shortBreakTime.addEventListener('change', (event) => { this.changeTime(event); });\n    this.longBreakTime.addEventListener('change', (event) => { this.changeTime(event); });\n  }\n\n  /**\n   * Updates the text elements on screen based on\n   * this.state and stateQueue[0] when the timer pauses\n   */\n  updateDisplay() {\n    this.startButton.childNodes[0].nodeValue = buttonText.startTimerText;\n    const session = this.stateQueue[0];\n    this.displayStatus.textContent = this.state;\n    this.timeDisplay.textContent = timeToString(session.duration * 60);\n    if (session.name === 'Working Time') {\n      this.timeDisplay.className = 'show-focus-time';\n    } else if (session.name === 'Short Break') {\n      this.timeDisplay.className = 'show-short-break-time';\n    } else if (session.name === 'Long Break') {\n      this.timeDisplay.className = 'show-long-break-time';\n    }\n    document.title = session.name;\n    const distractionOffEvent = new CustomEvent('timer-end');\n    this.dispatchEvent(distractionOffEvent);\n  }\n}\n\ncustomElements.define('custom-timer', Timer);\nexport { Timer };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Timer/Timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "Timer",
    "memberof": "js/Timer/Timer.js",
    "static": true,
    "longname": "js/Timer/Timer.js~Timer",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/Timer.js",
    "importStyle": "{Timer}",
    "description": "A class for the Timer object. Has functions to start the timer,\ndisplay the current mode of the timer and display the time remaining\nClass throws the 'timer-complete' event",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#constructor",
    "access": "public",
    "description": "Constructor of Time Object. Takes the HTML element of where\nyou want the time and the status of the timer to be implemented.\nHTML Elements must have the 'textElement' attribute.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLButtonElement"
        ],
        "spread": false,
        "optional": false,
        "name": "startButton",
        "description": "button that starts the button"
      },
      {
        "nullable": null,
        "types": [
          "HTMLParagraphElement"
        ],
        "spread": false,
        "optional": false,
        "name": "timeDisplay",
        "description": "area to display the time remaining"
      },
      {
        "nullable": null,
        "types": [
          "HTMLParagraphElement"
        ],
        "spread": false,
        "optional": false,
        "name": "displayStatus",
        "description": "area to display the status of the timer"
      }
    ]
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "state",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#state",
    "access": "public",
    "description": "State of the timer (the current mode)",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "stateQueue",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#stateQueue",
    "access": "public",
    "description": "Queue that stores the Session objects. Rotates to provide\nrotation functionality for the timer",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "object.name",
        "description": "name of the session"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "object.duration",
        "description": "duration of the session"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "startButton",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#startButton",
    "access": "public",
    "description": "HTML Tag that is reponsible for controlling the timer",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "timeDisplay",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#timeDisplay",
    "access": "public",
    "description": "HTML Tag that is reponsible for displaying the time remaining",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "displayStatus",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#displayStatus",
    "access": "public",
    "description": "HTML Tag that is reponsible for displaying the mode of the timer",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "focusTime",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#focusTime",
    "access": "public",
    "description": "HTML tag for controlling the focus timer length",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "shortBreakTime",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#shortBreakTime",
    "access": "public",
    "description": "HTML tag for controlling the short break timer length",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "longBreakTime",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#longBreakTime",
    "access": "public",
    "description": "HTML tag for controlling the long break timer length",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "HTMLElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "autoStart",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#autoStart",
    "access": "public",
    "description": "auto start switch element",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "timerWorker",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#timerWorker",
    "access": "public",
    "description": "Web worker responsible for count down timer",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Worker"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "sessionId",
    "memberof": "js/Timer/Timer.js~Timer",
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#sessionId",
    "access": "public",
    "description": "The sessionId. Increments on each working session. Stored in\nlocal storage to keep track of id on multiple sessions every day",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "resetPomoSessionId",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#resetPomoSessionId",
    "access": "public",
    "description": "Function that resets the pomo session id and stores it in local storage",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "onTimerComplete",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#onTimerComplete",
    "access": "public",
    "description": "Function that fires when the timer runs out of time.\nMoves on to start the timer again at the end of the function.",
    "lineNumber": 139,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "startTimer",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#startTimer",
    "access": "public",
    "description": "Starts the timer for the session at the top of the queue.\nUpdates the display for the status.",
    "lineNumber": 198,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "endTimer",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#endTimer",
    "access": "public",
    "description": "Ends the timer.\nUpdates the display for the status.",
    "lineNumber": 219,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "resetSession",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#resetSession",
    "access": "public",
    "description": "Reset the current work session, used for distraction",
    "lineNumber": 245,
    "params": [],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "changeTime",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#changeTime",
    "access": "public",
    "description": "Change and save timer length when changed.",
    "lineNumber": 256,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#addEventListeners",
    "access": "public",
    "description": "Adds event listener to the start button that was added\nAdd event listeners to change timer length",
    "lineNumber": 287,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "updateDisplay",
    "memberof": "js/Timer/Timer.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/Timer.js~Timer#updateDisplay",
    "access": "public",
    "description": "Updates the text elements on screen based on\nthis.state and stateQueue[0] when the timer pauses",
    "lineNumber": 308,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "js/Timer/TimerVariables.js",
    "content": "// these are all variables for the Timer. Changing these will change them universally\n/**\n * Name the pomo app should display on load\n * @type {String}\n */\nconst sessionStartName = 'Pomo-Time!';\n\n/**\n * Message displayed after user is distracted\n * @type {String}\n */\nconst distractionMessage = 'Session interrupted due to distraction!';\n\n/**\n * Parameters for the working mode of the timer\n * @type {Object}\n */\nconst workMode = {\n  name: 'Working Time',\n  duration: 25,\n  isWork: true,\n};\n\n/**\n * Parameters for the short break mode of the timer\n * @type {Object}\n */\nconst shortBreakMode = {\n  name: 'Short Break',\n  duration: 5,\n  isWork: false,\n};\n\n/**\n * Parameters for the long break mode of the timer\n * @type {Object}\n */\nconst longBreakMode = {\n  name: 'Long Break',\n  duration: 15,\n  isWork: false,\n};\n\n/**\n * The text displayed on the start timer buttons\n * @type {Object}\n */\nconst buttonText = {\n  stopTimerText: 'End Day',\n  startTimerText: 'Start\\xa0\\xa0\\xa0\\xa0',\n};\n\nexport {\n  sessionStartName, distractionMessage, workMode, shortBreakMode, longBreakMode, buttonText,\n};\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Timer/TimerVariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "sessionStartName",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~sessionStartName",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{sessionStartName}",
    "description": "Name the pomo app should display on load",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "distractionMessage",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~distractionMessage",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{distractionMessage}",
    "description": "Message displayed after user is distracted",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "workMode",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~workMode",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{workMode}",
    "description": "Parameters for the working mode of the timer",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "shortBreakMode",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~shortBreakMode",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{shortBreakMode}",
    "description": "Parameters for the short break mode of the timer",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "longBreakMode",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~longBreakMode",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{longBreakMode}",
    "description": "Parameters for the long break mode of the timer",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "buttonText",
    "memberof": "js/Timer/TimerVariables.js",
    "static": true,
    "longname": "js/Timer/TimerVariables.js~buttonText",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/Timer/TimerVariables.js",
    "importStyle": "{buttonText}",
    "description": "The text displayed on the start timer buttons",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "js/Timer/TimerWorker.js",
    "content": "function timeToString(duration) {\n  const minutes = Math.floor(duration / 60);\n  const seconds = duration % 60;\n  if (seconds < 10) {\n    return `${minutes}:0${seconds}`;\n  }\n  return `${minutes}:${seconds}`;\n}\n\n/**\n * Local timer class\n */\nclass Timer {\n  constructor() {\n    /**\n     * Variable that keeps track of time\n     * @type {Number}\n     */\n    this.duration = 0;\n    /**\n     * Keep track of timeout ID so that it can be interrupted\n     * @type {Number}\n     */\n    this.timeoutID = 0;\n  }\n\n  /**\n   * Count down from the given duration\n   */\n  countdown() {\n    const displayString = timeToString(this.duration);\n    postMessage(displayString);\n    this.duration -= 1;\n    if (this.duration >= 0) {\n      this.timeoutID = setTimeout(() => {\n        this.countdown();\n      }, 1000);\n    } else {\n      // Post -1 if count down is complete\n      postMessage(-1);\n    }\n  }\n\n  /**\n   * End the timer by interrupting the timeout\n   */\n  endTimer() {\n    clearTimeout(this.timeoutID);\n  }\n}\n\nconst timer = new Timer();\n// Recieve message from Timer.js\nonmessage = (e) => {\n  // If message is -1 then end timer\n  if (e.data !== -1) {\n    timer.duration = e.data;\n    timer.countdown();\n  } else {\n    timer.endTimer();\n  }\n};\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/Timer/TimerWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "timeToString",
    "memberof": "js/Timer/TimerWorker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/Timer/TimerWorker.js~timeToString",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Timer/TimerWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "Timer",
    "memberof": "js/Timer/TimerWorker.js",
    "static": true,
    "longname": "js/Timer/TimerWorker.js~Timer",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Timer/TimerWorker.js",
    "importStyle": null,
    "description": "Local timer class",
    "lineNumber": 13,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/Timer/TimerWorker.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/TimerWorker.js~Timer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "duration",
    "memberof": "js/Timer/TimerWorker.js~Timer",
    "static": false,
    "longname": "js/Timer/TimerWorker.js~Timer#duration",
    "access": "public",
    "description": "Variable that keeps track of time",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "timeoutID",
    "memberof": "js/Timer/TimerWorker.js~Timer",
    "static": false,
    "longname": "js/Timer/TimerWorker.js~Timer#timeoutID",
    "access": "public",
    "description": "Keep track of timeout ID so that it can be interrupted",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "countdown",
    "memberof": "js/Timer/TimerWorker.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/TimerWorker.js~Timer#countdown",
    "access": "public",
    "description": "Count down from the given duration",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "endTimer",
    "memberof": "js/Timer/TimerWorker.js~Timer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/Timer/TimerWorker.js~Timer#endTimer",
    "access": "public",
    "description": "End the timer by interrupting the timeout",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "timer",
    "memberof": "js/Timer/TimerWorker.js",
    "static": true,
    "longname": "js/Timer/TimerWorker.js~timer",
    "access": "public",
    "export": false,
    "importPath": "cse112_team15/js/Timer/TimerWorker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "js/Timer/TimerWorker.js~Timer"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "js/ToDoList/Task.js",
    "content": "import { classNames } from './TaskVariables.js';\nimport { TaskStorage } from './TodoListDomVariables.js';\n\n/**\n * Task object, stores its id, task name, total expected Pomo Sessions to complete the Task,\n * the number of the current Pomo Session, and whether the task has been completed or not.\n */\nclass Task extends HTMLTableRowElement {\n  /**\n  * Task construcutor. Initializes the task with appropriate attributes\n  * @param {String} id - Id of the task\n  * @param {String} name - Name of the task\n  * @param {Number} totalSessions - Total sessions the task should take\n  * @param {Number} [currentSession = 0] - Total sessions the task has taken\n  * @param {Number} [completed = false] - Is the task completed or not\n  */\n  constructor(id, name, totalSessions, currentSession = 0, completed = false) {\n    super();\n    /**\n     * Holds the current classname of the task object\n     * @type {String}\n     */\n    this.className = classNames.uncheckedTaskClassName;\n    /**\n     * Stores the id of the task\n     * @type {String}\n     */\n    this.id = id;\n    /**\n     * Stores the name of the task\n     * @type {String}\n     */\n    this.name = name;\n    /**\n     * Stores the total sessions anticipated for the task\n     * @type {Number}\n     */\n    this.totalSessions = totalSessions;\n    /**\n     * Stores the total amount of sessions spent working on the task\n     * @type {Number}\n     */\n    this.currentSessionNum = currentSession;\n    /**\n     * Stores if the task has been checked off or not\n     * @type {Boolean}\n     */\n    this.checked = completed;\n\n    /**\n     * The checkbox attribute for the task\n     * @type {HTMLInputElement}\n     */\n    this.checkBox = this.setupCheckBox();\n\n    /**\n     * Stores the view that shows the task name to the user\n     * @type {HTMLTableDataCellElement}\n     */\n    this.taskText = this.setupTaskText();\n    /**\n     * Stores the view that displayes the total pomo sessions spent\n     * and alloted for the tasl\n     * @type {HTMLTableDataCellElement}\n     */\n    this.pomoSessions = this.setupTotalPomoSessions();\n    /**\n     * The delete button for the task\n     * @type {HTMLButtonElement}\n     */\n    this.deleteButton = this.setupDeleteButton();\n    /**\n     * The button that hides the delete and focus buttons\n     * @type {HTMLButtonElement}\n     */\n    this.threeDotsButton = this.setupThreeDotsButton();\n    /**\n     * The focus button for the task\n     * @type {HTMLButtonElement}\n     */\n    this.focusButton = this.setupFocusButton();\n\n    this.taskUpButton = this.setupTaskUpButton();\n    this.taskDownButton = this.setupTaskDownButton();\n\n    this.setupLastColumnToggle(this.threeDotsButton,\n      this.deleteButton,\n      this.focusButton,\n      this.taskUpButton,\n      this.taskDownButton);\n  }\n\n  /**\n   * This sets up the checkbox to check off tasks\n   * @returns {HTMLInputElement}\n   */\n  setupCheckBox() {\n    const firstCol = document.createElement('td');\n    const checkBox = document.createElement('input');\n    checkBox.setAttribute('type', 'checkbox');\n    checkBox.setAttribute('id', `checkbox-${this.id}`);\n    checkBox.setAttribute('class', 'custom_checkbox');\n    const icon = document.createElement('label');\n    icon.setAttribute('id', `done-${this.id}`);\n    icon.setAttribute('for', `checkbox-${this.id}`);\n    icon.setAttribute('class', 'material-icons');\n    icon.textContent = 'check_box';\n    icon.addEventListener('mouseenter', () => { icon.textContent = 'check_box_outline_blank'; });\n    icon.addEventListener('mouseleave', () => { icon.textContent = 'check_box'; });\n    firstCol.appendChild(checkBox);\n    firstCol.appendChild(icon);\n    this.appendChild(firstCol);\n    // disable the checkbox by default (updated by the todolistdom class)\n    checkBox.disabled = true;\n\n    if (this.checked) {\n      this.setAttribute('class', classNames.completedTaskClassName);\n      checkBox.checked = true;\n      checkBox.disabled = false;\n    }\n\n    checkBox.addEventListener('click', () => {\n      if (!this.checked) {\n        this.checkOffTask();\n      } else {\n        this.uncheckTask();\n      }\n      const event = new CustomEvent('checkbox-updated', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          taskID: this.id,\n          checkBoxState: this.checked,\n        },\n      });\n      document.body.dispatchEvent(event);\n    });\n    return checkBox;\n  }\n\n  /**\n   * This sets up the view that will display the task name\n   * @returns {HTMLTableDataCellElement}\n   */\n  setupTaskText() {\n    const text = document.createElement('td');\n    text.setAttribute('id', `text-${this.id}`);\n    this.appendChild(text);\n    this.updateText();\n    return text;\n  }\n\n  /**\n   * This sets up the view that will display the pomo sessions\n   * @return {HTMLTableDataCellElement}\n   */\n  setupTotalPomoSessions() {\n    const pomoSessions = document.createElement('td');\n    pomoSessions.setAttribute('id', `pomoSessions-${this.id}`);\n    this.appendChild(pomoSessions);\n    this.updatePomoSessions();\n    return pomoSessions;\n  }\n\n  /**\n   * This sets up the delete button for a task\n   * Delete only works visually, doesn't remove it from the TodoList\n   * Data Structure\n   * @return {HTMLButtonElement}\n   */\n  setupDeleteButton() {\n    const deleteBtn = document.createElement('button');\n    deleteBtn.className = 'material-icons delete-single';\n    deleteBtn.textContent = 'delete';\n    deleteBtn.addEventListener('click', () => {\n      this.onDelete();\n    });\n    return deleteBtn;\n  }\n\n  /**\n   * This sets up the focus button for a task. The button fires and event that\n   * indicates the task has been focused on, and hides the button\n   * @returns {HTMLButtonElement}\n   */\n  setupFocusButton() {\n    const focusBtn = document.createElement('button');\n    focusBtn.className = 'material-icons focus';\n    focusBtn.textContent = 'keyboard_double_arrow_up';\n\n    // hide the button if the task came from local storage and was checked\n    if (this.checked) {\n      focusBtn.style.display = 'none';\n    }\n\n    focusBtn.addEventListener('click', () => {\n      this.threeDotsButton.parentElement.style.display = 'flex';\n      focusBtn.parentElement.style.display = 'none';\n      const event = new CustomEvent('focus-task', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          taskID: this.id,\n        },\n      });\n      document.body.dispatchEvent(event);\n    });\n\n    return focusBtn;\n  }\n\n  setupTaskUpButton() {\n    const taskUpBtn = document.createElement('button');\n    taskUpBtn.className = 'material-icons task-up';\n    taskUpBtn.textContent = 'keyboard_arrow_up';\n\n    if (this.checked) {\n      taskUpBtn.style.display = 'none';\n    }\n\n    taskUpBtn.addEventListener('click', () => {\n      this.threeDotsButton.parentElement.style.display = 'flex';\n      taskUpBtn.parentElement.style.display = 'none';\n      const event = new CustomEvent('task-up', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          taskID: this.id,\n        },\n      });\n      document.body.dispatchEvent(event);\n    });\n    return taskUpBtn;\n  }\n\n  setupTaskDownButton() {\n    const taskDownBtn = document.createElement('button');\n    taskDownBtn.className = 'material-icons task-down';\n    taskDownBtn.textContent = 'keyboard_arrow_down';\n    if (this.checked) {\n      taskDownBtn.style.display = 'none';\n    }\n\n    taskDownBtn.addEventListener('click', () => {\n      this.threeDotsButton.parentElement.style.display = 'flex';\n      taskDownBtn.parentElement.style.display = 'none';\n      const event = new CustomEvent('task-down', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          taskID: this.id,\n        },\n      });\n      document.body.dispatchEvent(event);\n    });\n    return taskDownBtn;\n  }\n\n  /**\n   * Setups up the three dots \"show more\" button. Wrapped inside a div so it\n   * can easily dissapear and appear on clicks\n   * @returns {HTMLButtonElement}\n   */\n  setupThreeDotsButton() {\n    const button = document.createElement('button');\n    button.className = 'material-icons three-dots';\n    button.textContent = 'more_vert';\n    button.addEventListener('click', () => {\n      button.parentElement.style.display = 'none';\n      this.deleteButton.parentElement.style.display = 'flex';\n    });\n\n    return button;\n  }\n\n  /**\n   * Sets up the last column of the todolist. Wraps things\n   * in the divs they need to be wrapped in. Add task\n   * and check HTML file to see structure that this creates\n   * @param {HTMLButtonElement} threeDotsButton - show more button\n   * @param {HTMLDivElement} deleteDiv - div where the delete button is located\n   * @param {HTMLDivElement} focusDiv - div where the focus button is located\n   */\n  setupLastColumnToggle(threeDotsButton, deleteDiv,\n    focusDiv, taskUpDiv, taskDownDiv) {\n    const lastCol = document.createElement('td');\n    const lastColDiv = document.createElement('div');\n    const threeDotsDiv = document.createElement('div');\n    const ButtonsDiv = document.createElement('div');\n\n    // wrap the delete and focus buttons in a div\n    ButtonsDiv.className = classNames.doubleButtons;\n    ButtonsDiv.appendChild(deleteDiv);\n    ButtonsDiv.appendChild(focusDiv);\n    ButtonsDiv.appendChild(taskUpDiv);\n    ButtonsDiv.appendChild(taskDownDiv);\n    // wrap the three dots button in a div\n    threeDotsDiv.appendChild(threeDotsButton);\n    threeDotsDiv.className = classNames.threeDotsWrapper;\n\n    // make sure the delete and focus buttons are hidden\n    ButtonsDiv.style.display = 'none';\n    lastColDiv.appendChild(threeDotsDiv);\n    lastColDiv.className = classNames.lastCol;\n    lastColDiv.appendChild(ButtonsDiv);\n    lastCol.appendChild(lastColDiv);\n    this.appendChild(lastCol);\n  }\n\n  /**\n   * Removes a task from local storage given the id\n   */\n  removeFromLocalStorage() {\n    for (let i = 0; i < window.localData.length; i += 1) {\n      if (window.localData[i][TaskStorage.idIndex] === this.id) {\n        window.localData.splice(i, 1);\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(window.localData));\n  }\n\n  /**\n   * Update method to edit task name\n   */\n  updateText() {\n    this.querySelector(`#text-${this.id}`).textContent = this.name;\n    // this.children[1].textContent = this.name;\n  }\n\n  /**\n   * This updates the pomo sessions when a session is complete\n   */\n  updatePomoSessions() {\n    this.querySelector(`#pomoSessions-${this.id}`).textContent = `${this.currentSessionNum}/${this.totalSessions}`;\n    // this.children[2].textContent = `${this.currentSessionNum}/${this.totalSessions}`;\n  }\n\n  /**\n   * Increment this task's current session number. Checks off task if all sessions completed.\n   * @throws {RangeError} - Incrementing a completed tasks' session number\n   * (all sessions have been completed or user has checked off task manually)\n   */\n  incrementSession() {\n    if (this.checked) {\n      throw (new RangeError('Increment checked Task'));\n    }\n\n    this.currentSessionNum += 1;\n    this.updatePomoSessions();\n\n    this.updateLocalStorage();\n  }\n\n  /**\n   * This updates the localStorage whenever session increases or checked off\n   */\n  updateLocalStorage() {\n    for (let i = 0; i < window.localData.length; i += 1) {\n      if (window.localData[i][TaskStorage.idIndex] === this.id) {\n        window.localData[i][TaskStorage.currentSessionIndex] = this.currentSessionNum;\n        window.localData[i][TaskStorage.checkedIndex] = this.checked;\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(window.localData));\n  }\n\n  /**\n   * Marks a task as completed\n   */\n  checkOffTask() {\n    this.checked = true;\n    this.setAttribute('class', classNames.completedTaskClassName);\n    const event = new CustomEvent('task-checked-off', {\n    });\n\n    this.dispatchEvent(event);\n    const buttonsDiv = this.focusButton.parentElement;\n    buttonsDiv.style.display = 'none';\n    for (let i = 1; i < buttonsDiv.children.length; i += 1) {\n      buttonsDiv.children[i].style.display = 'none';\n    }\n    this.updateLocalStorage();\n  }\n\n  /**\n   * Marks a task as not completed\n   */\n  uncheckTask() {\n    this.checked = false;\n    this.setAttribute('class', classNames.uncheckedTaskClassName);\n    const buttonsDiv = this.focusButton.parentElement;\n    buttonsDiv.style.display = 'flex';\n    for (let i = 1; i < buttonsDiv.children.length; i += 1) {\n      buttonsDiv.children[i].style.display = 'inline-block';\n    }\n    this.checkBox.disabled = false;\n    this.updateLocalStorage();\n  }\n\n  /**\n   * Deletes a task, remove from DOM, tasklist and localStorage\n   */\n  onDelete() {\n    this.remove();\n    this.removeFromLocalStorage();\n    // for actual task deletion\n    let event = new CustomEvent('task-deleted', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        taskID: this.id,\n      },\n    });\n    document.body.dispatchEvent(event);\n\n    // for stats\n    event = new CustomEvent('task-deleted', {\n      detail: {\n        pomoSessions: this.totalSessions,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\nexport { Task };\ncustomElements.define('task-item', Task, { extends: 'tr' });\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ToDoList/Task.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "Task",
    "memberof": "js/ToDoList/Task.js",
    "static": true,
    "longname": "js/ToDoList/Task.js~Task",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/Task.js",
    "importStyle": "{Task}",
    "description": "Task object, stores its id, task name, total expected Pomo Sessions to complete the Task,\nthe number of the current Pomo Session, and whether the task has been completed or not.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "HTMLTableRowElement"
    ]
  },
  {
    "__docId__": 301,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#constructor",
    "access": "public",
    "description": "Task construcutor. Initializes the task with appropriate attributes",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of the task"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the task"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalSessions",
        "description": "Total sessions the task should take"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "currentSession",
        "description": "Total sessions the task has taken"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "completed",
        "description": "Is the task completed or not"
      }
    ]
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "className",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#className",
    "access": "public",
    "description": "Holds the current classname of the task object",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "id",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#id",
    "access": "public",
    "description": "Stores the id of the task",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "name",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#name",
    "access": "public",
    "description": "Stores the name of the task",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "totalSessions",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#totalSessions",
    "access": "public",
    "description": "Stores the total sessions anticipated for the task",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "currentSessionNum",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#currentSessionNum",
    "access": "public",
    "description": "Stores the total amount of sessions spent working on the task",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "checked",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#checked",
    "access": "public",
    "description": "Stores if the task has been checked off or not",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "checkBox",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#checkBox",
    "access": "public",
    "description": "The checkbox attribute for the task",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "taskText",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#taskText",
    "access": "public",
    "description": "Stores the view that shows the task name to the user",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "HTMLTableDataCellElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "pomoSessions",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#pomoSessions",
    "access": "public",
    "description": "Stores the view that displayes the total pomo sessions spent\nand alloted for the tasl",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "HTMLTableDataCellElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "deleteButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#deleteButton",
    "access": "public",
    "description": "The delete button for the task",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "threeDotsButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#threeDotsButton",
    "access": "public",
    "description": "The button that hides the delete and focus buttons",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "focusButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#focusButton",
    "access": "public",
    "description": "The focus button for the task",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "taskUpButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#taskUpButton",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "taskDownButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#taskDownButton",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "setupCheckBox",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupCheckBox",
    "access": "public",
    "description": "This sets up the checkbox to check off tasks",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLInputElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLInputElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "setupTaskText",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupTaskText",
    "access": "public",
    "description": "This sets up the view that will display the task name",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLTableDataCellElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLTableDataCellElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "setupTotalPomoSessions",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupTotalPomoSessions",
    "access": "public",
    "description": "This sets up the view that will display the pomo sessions",
    "lineNumber": 157,
    "return": {
      "nullable": null,
      "types": [
        "HTMLTableDataCellElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "setupDeleteButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupDeleteButton",
    "access": "public",
    "description": "This sets up the delete button for a task\nDelete only works visually, doesn't remove it from the TodoList\nData Structure",
    "lineNumber": 171,
    "return": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "setupFocusButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupFocusButton",
    "access": "public",
    "description": "This sets up the focus button for a task. The button fires and event that\nindicates the task has been focused on, and hides the button",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLButtonElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "setupTaskUpButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupTaskUpButton",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "setupTaskDownButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupTaskDownButton",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "setupThreeDotsButton",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupThreeDotsButton",
    "access": "public",
    "description": "Setups up the three dots \"show more\" button. Wrapped inside a div so it\ncan easily dissapear and appear on clicks",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLButtonElement}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "setupLastColumnToggle",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#setupLastColumnToggle",
    "access": "public",
    "description": "Sets up the last column of the todolist. Wraps things\nin the divs they need to be wrapped in. Add task\nand check HTML file to see structure that this creates",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLButtonElement"
        ],
        "spread": false,
        "optional": false,
        "name": "threeDotsButton",
        "description": "show more button"
      },
      {
        "nullable": null,
        "types": [
          "HTMLDivElement"
        ],
        "spread": false,
        "optional": false,
        "name": "deleteDiv",
        "description": "div where the delete button is located"
      },
      {
        "nullable": null,
        "types": [
          "HTMLDivElement"
        ],
        "spread": false,
        "optional": false,
        "name": "focusDiv",
        "description": "div where the focus button is located"
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "removeFromLocalStorage",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#removeFromLocalStorage",
    "access": "public",
    "description": "Removes a task from local storage given the id",
    "lineNumber": 313,
    "params": [],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "updateText",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#updateText",
    "access": "public",
    "description": "Update method to edit task name",
    "lineNumber": 325,
    "params": [],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "updatePomoSessions",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#updatePomoSessions",
    "access": "public",
    "description": "This updates the pomo sessions when a session is complete",
    "lineNumber": 333,
    "params": [],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "incrementSession",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#incrementSession",
    "access": "public",
    "description": "Increment this task's current session number. Checks off task if all sessions completed.",
    "lineNumber": 343,
    "throws": [
      {
        "types": [
          "RangeError"
        ],
        "description": "Incrementing a completed tasks' session number\n(all sessions have been completed or user has checked off task manually)"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "updateLocalStorage",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#updateLocalStorage",
    "access": "public",
    "description": "This updates the localStorage whenever session increases or checked off",
    "lineNumber": 357,
    "params": [],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "checkOffTask",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#checkOffTask",
    "access": "public",
    "description": "Marks a task as completed",
    "lineNumber": 370,
    "params": [],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "uncheckTask",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#uncheckTask",
    "access": "public",
    "description": "Marks a task as not completed",
    "lineNumber": 388,
    "params": [],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "onDelete",
    "memberof": "js/ToDoList/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/Task.js~Task#onDelete",
    "access": "public",
    "description": "Deletes a task, remove from DOM, tasklist and localStorage",
    "lineNumber": 403,
    "params": [],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "js/ToDoList/TaskVariables.js",
    "content": "/**\n * Classnames for everything contained in a task object\n * @type {Object}\n */\nconst classNames = {\n  uncheckedTaskClassName: 'uncheckedTask',\n  completedTaskClassName: 'completedTask',\n  inlineDiv: 'inline',\n  focusSvg: 'focus-svg',\n  deleteSvg: 'delete-svg',\n  threeDots: 'three-dots',\n  threeDotsWrapper: 'triple-dots-touch',\n  doubleButtons: 'double-buttons',\n  lastCol: 'touch-target',\n};\n\n/**\n * The svg path attribute for the delete and the star buttons\n * @type {Object}\n */\nconst svg = {\n  trashcan: 'M3 6v18h18v-18h-18zm5 14c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4-18v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712z',\n  star: 'M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z',\n};\n\nexport { classNames, svg };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ToDoList/TaskVariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "classNames",
    "memberof": "js/ToDoList/TaskVariables.js",
    "static": true,
    "longname": "js/ToDoList/TaskVariables.js~classNames",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/TaskVariables.js",
    "importStyle": "{classNames}",
    "description": "Classnames for everything contained in a task object",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "svg",
    "memberof": "js/ToDoList/TaskVariables.js",
    "static": true,
    "longname": "js/ToDoList/TaskVariables.js~svg",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/TaskVariables.js",
    "importStyle": "{svg}",
    "description": "The svg path attribute for the delete and the star buttons",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "js/ToDoList/ToDoList.js",
    "content": "import { Task } from './Task.js';\n\n/**\n * Queue based TodoList data structure which holds Task objects.\n * API-like methods to perform operations on the underlying queue\n */\nclass ToDoList extends HTMLElement {\n  /**\n   * Initializes the todolist array and the counter for id's\n   */\n  constructor() {\n    super();\n    /**\n     * Array that stores each task\n     * @type {Task[]}\n     */\n    this.taskList = [];\n    /**\n     * This is the total task count that is also a way\n     * to give each task a unique id\n     * @type {number}\n     */\n    this.idCounter = 0;\n  }\n\n  /**\n   * Verifies that incoming parameters are non-empty and defined, then creates Task\n   * @param {String} name - Task subject\n   * @param {Number} totalSession - Projected number of Pomo Sessions\n   * @param {Number} [currentSession = 0] - Total amount of sessions completed already\n   * @param {Boolean} [completed = false] - Task checked off or not\n   * @param {Boolean} [fromLocalStorage = false] - If a task is being added from local storage\n   *\n   * @returns {Task} - Task object to be placed into DOM\n   *\n   * @throws {Undefined Name} Task name cannot be undefined\n   * @throws {Empty Name} Task name is an empty string\n   * @throws {Undefiend Length Task} Expected number of pomo sessions is undefined\n   * @throws {0 Length Task} Expected number of pomo sessions is 0\n   */\n  addTask(name, totalSession, currentSession = 0, completed = false, fromLocalStorage = false) {\n    if (name === undefined) {\n      throw new Error('Undefined Name');\n    } else if (name === '') {\n      throw new Error('Empty Name');\n    } else if (totalSession === undefined) {\n      throw new Error('Undefined Length Task');\n    } else if (totalSession === 0) {\n      throw new Error('0 Length Task');\n    } else if (Number.isNaN(totalSession)) {\n      throw new Error('Number Not Passed In');\n    }\n\n    const task = new Task(this.idCounter, name, totalSession, currentSession, completed);\n    task.addEventListener('task-checked-off', () => {\n      const event = new CustomEvent('task-checked-off', {\n      });\n      this.dispatchEvent(event);\n    });\n    task.addEventListener('task-unchecked', () => {\n      const event = new CustomEvent('task-unchecked', {\n      });\n      this.dispatchEvent(event);\n    });\n    task.addEventListener('task-deleted', (e) => {\n      const event = new CustomEvent('task-deleted', {\n        detail: e.detail,\n      });\n      this.dispatchEvent(event);\n    });\n    const event = new CustomEvent('task-added', {\n      detail: {\n        taskName: name,\n        duration: totalSession,\n      },\n    });\n    this.dispatchEvent(event);\n    this.idCounter += 1;\n    // make sure to add task in appropriate spot\n    let firstUncheckedTask = -1;\n    for (let i = 0; i < this.taskList.length && firstUncheckedTask === -1; i += 1) {\n      if (this.taskList[i].checked === true) firstUncheckedTask = i;\n    }\n    if (firstUncheckedTask === -1) {\n      this.taskList.push(task);\n      if (!fromLocalStorage) { this.addTaskToLocalStorage(task); }\n    } else {\n      this.taskList.splice(firstUncheckedTask, 0, task);\n      if (!fromLocalStorage) {\n        this.addTaskToLocalStorage(task, firstUncheckedTask);\n      }\n    }\n    return task;\n  }\n\n  /**\n   * Adds a task to local storage\n   * @param {Task} task - Task to be added\n   * @param {Number} [index = undefined] - Index to add at. Default to end of local storage\n   */\n  // eslint-disable-next-line class-methods-use-this\n  addTaskToLocalStorage(task, index = undefined) {\n    const arr = [task.id, task.name, task.totalSessions, task.currentSessionNum, task.checked];\n    if (index === undefined) {\n      window.localData.push(arr);\n    } else {\n      window.localData.splice(index, 0, arr);\n    }\n    localStorage.setItem('tasks', JSON.stringify(window.localData));\n  }\n\n  /**\n   * Gets the first unchecked task in the todolist.\n   * Returns null if no such task exists\n   * @returns {Task} - First unchecked task in list\n   *\n   */\n  getCurrentTask() {\n    for (let i = 0; i < this.taskList.length; i += 1) {\n      if (!this.taskList[i].checked) {\n        return this.taskList[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the task corresponding to the id given\n   * @param {String} id - ID of task\n   * @returns {Task} - Task with ID, null if none found\n   */\n  getTaskById(id) {\n    for (let i = 0; i < this.taskList.length; i += 1) {\n      if (Number(this.taskList[i].id) === Number(id)) return this.taskList[i];\n    }\n    return null;\n  }\n\n  /**\n   * Removes a task with the given id from the todolist\n   * @param {String} id - id of task to remove\n   * @returns {Boolean} true if succesful, false if no task found\n   */\n  removeTask(id) {\n    let index = -1;\n    for (let i = 0; i < this.taskList.length; i += 1) {\n      if (Number(this.taskList[i].id) === Number(id)) {\n        index = i;\n      }\n    }\n\n    if (index !== -1) {\n      this.taskList.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Adds a task to the top of the todolist\n   * @param {Task} task - task to be added to the top\n   */\n  addTaskToTop(task) {\n    this.taskList.unshift(task);\n    this.addTaskToLocalStorage(task, 0);\n  }\n\n  shiftTaskUp(task, currentIndex) {\n    // index starts at 2 because of children shenanigans\n    // to get index-1, we do index-2-1 = index-3\n    this.taskList.splice(currentIndex - 3, 0, task);\n    this.addTaskToLocalStorage(task, currentIndex - 3);\n  }\n\n  shiftTaskDown(task, currentIndex) {\n    // to get index+1, we do index-2+1 = index-3\n    this.taskList.splice(currentIndex - 1, 0, task);\n    this.addTaskToLocalStorage(task, currentIndex - 1);\n  }\n\n  /**\n   * Adds task to the end of the todolist depending on if it is checked or not.\n   * If checked, adds to the end. If not checked, adds right before the first\n   * checked task (i.e. makes the task being added the last unchecked task)\n   * @param {Task} task - task object that needs to be added\n   */\n  addTaskToEnd(task) {\n    if (task.checked) {\n      this.taskList.push(task);\n      this.addTaskToLocalStorage(task);\n    } else {\n      let firstUncheckedTask = -1;\n      for (let i = 0; i < this.taskList.length && firstUncheckedTask === -1; i += 1) {\n        if (this.taskList[i].checked === true) firstUncheckedTask = i;\n      }\n      if (firstUncheckedTask === -1) {\n        this.taskList.push(task);\n        this.addTaskToLocalStorage(task);\n      } else {\n        this.taskList.splice(firstUncheckedTask, 0, task);\n        this.addTaskToLocalStorage(task, firstUncheckedTask);\n      }\n    }\n  }\n}\n\ncustomElements.define('custom-todolist', ToDoList);\nexport { ToDoList };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ToDoList/ToDoList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "ToDoList",
    "memberof": "js/ToDoList/ToDoList.js",
    "static": true,
    "longname": "js/ToDoList/ToDoList.js~ToDoList",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/ToDoList.js",
    "importStyle": "{ToDoList}",
    "description": "Queue based TodoList data structure which holds Task objects.\nAPI-like methods to perform operations on the underlying queue",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#constructor",
    "access": "public",
    "description": "Initializes the todolist array and the counter for id's",
    "lineNumber": 11
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "taskList",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#taskList",
    "access": "public",
    "description": "Array that stores each task",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "idCounter",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#idCounter",
    "access": "public",
    "description": "This is the total task count that is also a way\nto give each task a unique id",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "addTask",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#addTask",
    "access": "public",
    "description": "Verifies that incoming parameters are non-empty and defined, then creates Task",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Task} - Task object to be placed into DOM"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Task subject"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalSession",
        "description": "Projected number of Pomo Sessions"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "currentSession",
        "description": "Total amount of sessions completed already"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "completed",
        "description": "Task checked off or not"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "fromLocalStorage",
        "description": "If a task is being added from local storage"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": "Task object to be placed into DOM"
    },
    "throws": [
      {
        "types": [
          "Undefined Name"
        ],
        "description": "Task name cannot be undefined"
      },
      {
        "types": [
          "Empty Name"
        ],
        "description": "Task name is an empty string"
      },
      {
        "types": [
          "Undefiend Length Task"
        ],
        "description": "Expected number of pomo sessions is undefined"
      },
      {
        "types": [
          "0 Length Task"
        ],
        "description": "Expected number of pomo sessions is 0"
      }
    ]
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "addTaskToLocalStorage",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#addTaskToLocalStorage",
    "access": "public",
    "description": "Adds a task to local storage",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Task"
        ],
        "spread": false,
        "optional": false,
        "name": "task",
        "description": "Task to be added"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " undefined",
        "defaultRaw": " undefined",
        "name": "index",
        "description": "Index to add at. Default to end of local storage"
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "getCurrentTask",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#getCurrentTask",
    "access": "public",
    "description": "Gets the first unchecked task in the todolist.\nReturns null if no such task exists",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Task} - First unchecked task in list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": "First unchecked task in list"
    },
    "params": []
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "getTaskById",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#getTaskById",
    "access": "public",
    "description": "Gets the task corresponding to the id given",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Task} - Task with ID, null if none found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of task"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": "Task with ID, null if none found"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "removeTask",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#removeTask",
    "access": "public",
    "description": "Removes a task with the given id from the todolist",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true if succesful, false if no task found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of task to remove"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if succesful, false if no task found"
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "addTaskToTop",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#addTaskToTop",
    "access": "public",
    "description": "Adds a task to the top of the todolist",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Task"
        ],
        "spread": false,
        "optional": false,
        "name": "task",
        "description": "task to be added to the top"
      }
    ],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "shiftTaskUp",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#shiftTaskUp",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "task",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "shiftTaskDown",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#shiftTaskDown",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "task",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "addTaskToEnd",
    "memberof": "js/ToDoList/ToDoList.js~ToDoList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/ToDoList.js~ToDoList#addTaskToEnd",
    "access": "public",
    "description": "Adds task to the end of the todolist depending on if it is checked or not.\nIf checked, adds to the end. If not checked, adds right before the first\nchecked task (i.e. makes the task being added the last unchecked task)",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "Task"
        ],
        "spread": false,
        "optional": false,
        "name": "task",
        "description": "task object that needs to be added"
      }
    ],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "js/ToDoList/TodoListDom.js",
    "content": "import { ToDoList } from './ToDoList.js';\nimport { HTMLAttributes, TaskStorage } from './TodoListDomVariables.js';\n// import { Task } from './Task.js';\n\n/**\n * Class responsible for providing changes to the DOM for the TodoList\n * Encapsulates the TodoList class\n * Done so their is a clear abstraction from DOM Manipulation and Data Manipulation\n */\nclass TodoListDom {\n  /**\n   * Initializes the TodoListDom object with its correct member variables\n   * @param {HTMLTableElement} HTMLTable - Table where tasks will be stored\n   * @param {HTMLFormElement} HTMLForm - Form to add the task\n   * @param {HTMLButtonElement} submitBtn - Button to submit the entered tasks\n   * @param {HTMLButtonElement} deleteAllBtn - Delete all tasks button\n   */\n  constructor(HTMLTable, HTMLForm, submitBtn, deleteAllBtn, finishTaskBtn, currentTaskDiv) {\n    /**\n     * Holds the TodoList so the Dom Manager can acess it\n     * @type {ToDoList}\n     */\n    this.todoList = new ToDoList();\n    /**\n     * The form where users input their task\n     * @type {HTMLFormElement}\n     */\n    this.form = HTMLForm;\n    /**\n     * The button where users click to submit their todo's\n     * @type {HTMLButtonElement}\n     */\n    this.submitBtn = submitBtn;\n    /**\n     * The button where users click to delete their todo's\n     * @type {HTMLButtonElement}\n     */\n    this.deleteAllBtn = deleteAllBtn;\n    /**\n     * The button where users click to check off the current task\n     * @type {HTMLButtonElement}\n     */\n    this.finishTaskBtn = finishTaskBtn;\n    /**\n     * The table where the todolist is displayed\n     * @type {HTMLTableElement}\n     */\n    this.table = HTMLTable;\n\n    /**\n     * The current task the user should be working on\n     * @type {Task}\n     */\n    this.currentTask = null;\n\n    /**\n     * The current task to be displayed\n     * @type {HTMLDiv}\n     */\n    this.currentTaskDiv = currentTaskDiv;\n    this.setupEventListeners();\n    this.renderLocalStorage();\n  }\n\n  /**\n * Fetch local storage, and store them into window.localData\n * Iterate each local tasks and render them\n */\n  renderLocalStorage() {\n    window.localData = [];\n    const completedTaskIndex = [];\n    // re-indexing all tasks as 0,1,2,3...\n    if (localStorage.getItem('tasks') !== null) {\n      window.localData = JSON.parse(localStorage.getItem('tasks'));\n      for (let i = 0; i < window.localData.length; i += 1) {\n        window.localData[i][0] = String(i);\n      }\n      localStorage.setItem('tasks', JSON.stringify(window.localData));\n    }\n\n    for (let i = 0; i < window.localData.length; i += 1) {\n      // get local storage data\n      const completed = window.localData[i][TaskStorage.checkedIndex];\n\n      if (!completed) {\n        const name = window.localData[i][TaskStorage.nameIndex];\n        const totalSession = window.localData[i][TaskStorage.totalSessionIndex];\n        const currentSession = window.localData[i][TaskStorage.currentSessionIndex];\n        const task = this.todoList.addTask(name, totalSession, currentSession, completed, true);\n        this.displayTask(task);\n      } else {\n        /*\n           push index because addTask takes in each indiv. param instead of a task.\n           Need to use addTask() because that is the only way to increment the counter\n           in the todolist class (used for id's)\n        */\n        completedTaskIndex.push(i);\n      }\n    }\n    // this is so that the completed tasks go to the end of the todolist during rendering\n    for (let x = 0; x < completedTaskIndex.length; x += 1) {\n      const i = completedTaskIndex[x];\n      const name = window.localData[i][TaskStorage.nameIndex];\n      const totalSession = window.localData[i][TaskStorage.totalSessionIndex];\n      const currentSession = window.localData[i][TaskStorage.currentSessionIndex];\n      const completed = window.localData[i][TaskStorage.checkedIndex];\n      const task = this.todoList.addTask(name, totalSession, currentSession, completed, true);\n      task.addEventListener('task-checked-off', () => {\n        const event = new CustomEvent('task-checked-off', {\n        });\n        this.todoList.dispatchEvent(event);\n      });\n      task.addEventListener('task-unchecked', () => {\n        const event = new CustomEvent('task-unchecked', {\n        });\n        this.todoList.dispatchEvent(event);\n      });\n      // task.updatePomoSessions();\n      this.displayTask(task);\n    }\n\n    this.updateCurrentTask();\n  }\n\n  /**\n   * Sets up the form dissapearing and submit event listeners\n   * Also set up finish task button\n   */\n  setupEventListeners() {\n    // event listener for form submit\n    this.form.addEventListener('submit', (e) => {\n      e.preventDefault();\n      const data = new FormData(this.form);\n      const name = data.get(HTMLAttributes.taskNameId);\n      const sessions = parseInt(data.get(HTMLAttributes.taskPomoSessions), 10);\n      try {\n        const task = this.todoList.addTask(name, sessions);\n        this.updateCurrentTask();\n        const insertAtIndex = this.getFirstCompletedTaskIndex();\n        this.displayTask(task, insertAtIndex);\n        this.form.reset();\n      } catch (error) {\n        // eslint-disable-next-line no-alert\n        alert('Invalid input. Please try again');\n      }\n    });\n\n    this.deleteAllBtn.addEventListener('click', () => {\n      const deleteAllModal = document.getElementById('delete-all-modal-container');\n      const cancelDeleteAll = document.getElementById('cancel-delete-all');\n      const confirmDeleteAll = document.getElementById('confirm-delete-all');\n      const deleteAllModalPopup = document.getElementsByClassName('delete-all-modal')[0];\n      // Clicking outside of the popup closes the popup\n      deleteAllModal.addEventListener('click', (event) => {\n        if (deleteAllModal.style.display === 'flex') {\n          if (!deleteAllModalPopup.contains(event.target)) {\n            cancelDeleteAll.click();\n          }\n        }\n      });\n      cancelDeleteAll.addEventListener('click', () => {\n        deleteAllModal.style.display = 'none';\n      });\n      deleteAllModal.style.display = 'flex';\n      confirmDeleteAll.addEventListener('click', () => {\n        deleteAllModal.style.display = 'none';\n        const list = this.todoList.taskList;\n        while (list[0] !== undefined) {\n          list[0].deleteButton.click();\n        }\n      });\n    });\n\n    this.finishTaskBtn.addEventListener('click', () => {\n      this.todoList.getCurrentTask().checkBox.click();\n    });\n\n    this.currentTaskDiv.addEventListener('animationend', () => {\n      this.currentTaskDiv.classList.remove('animate');\n    });\n  }\n\n  /**\n   * Adds a task to the bottom of the table OR adds it before the specified index\n   * @param {HTMLTableRowElement} newTask - task you want added\n   * @param {HTMLTableRowElement} [index = -1] - index you want to insert the task before\n   */\n  displayTask(newTask, index = -1) {\n    if (index === -1) {\n      this.table.appendChild(newTask);\n    } else {\n      this.table.insertBefore(newTask, this.table.childNodes[index]);\n    }\n  }\n\n  /**\n   * This function runs when the timer is done with its working session\n   */\n  onSessionComplete() {\n    const currTask = this.todoList.getCurrentTask();\n    if (currTask != null) {\n      currTask.incrementSession();\n    }\n    this.currentTask = currTask;\n  }\n\n  /**\n   * This function runs when someone checks off a task. Removes the task from the\n   * table and appends it to the bottom. Removes the task from the todolist\n   * data structure and appends it to the bottom there\n   */\n  onCompletedTask() {\n    /*\n    When this function is called, currentTask has NOT been updated to\n    reflect the checking off. Thus, this is the task that was just\n    checked off, not the new current task. Only works if the user\n    can only check off the current task\n    */\n    const temp = this.currentTask;\n    temp.onDelete();\n    this.displayTask(temp);\n    this.todoList.addTaskToEnd(temp);\n  }\n\n  /**\n    * This function returns the index of the first completed task,\n    * used when new tasks/ unchecked tasks are added.\n    */\n  getFirstCompletedTaskIndex() {\n    let firstCompletedTaskIndex = -1;\n    for (let i = 2; i < this.table.childNodes.length && firstCompletedTaskIndex === -1; i += 1) {\n      if (this.table.childNodes[i].checked === true) firstCompletedTaskIndex = i;\n    }\n\n    return firstCompletedTaskIndex;\n  }\n\n  /**\n   * Called when someone unchecks a task. Removes the task from the table\n   * and appends it become the last unchecked task in the table. Does the same\n   * within the todolist data structure\n   * @param {Number} id - id of the task you would like to uncheck\n   */\n  onUncheckedTask(id) {\n    const uncheckedTask = this.todoList.getTaskById(id);\n    const firstCompletedTaskIndex = this.getFirstCompletedTaskIndex();\n    uncheckedTask.onDelete();\n    this.todoList.addTaskToEnd(uncheckedTask);\n    // this is for unchecked tasks that end up in the same spot in the list\n    // if the task before the first completed task is the task we just unchecked..\n    // then keep it in the same spot\n    if (this.todoList.taskList[firstCompletedTaskIndex - 3] === uncheckedTask) {\n      this.displayTask(uncheckedTask, firstCompletedTaskIndex - 1);\n    } else {\n      this.displayTask(uncheckedTask, firstCompletedTaskIndex);\n    }\n  }\n\n  /**\n   * Updates the current task and changes its checkbox property accordingly\n   */\n  updateCurrentTask() {\n    const nextTask = this.todoList.getCurrentTask();\n    if (this.currentTask !== null && !this.currentTask.checked) {\n      this.currentTask.children[3].children[0].children[1].children[1].style.display = 'inline-block';\n    }\n    if (nextTask !== null) {\n      nextTask.children[3].children[0].children[1].children[1].style.display = 'none';\n    }\n    if (this.currentTask === null && nextTask === null) {\n      // no currentTask, nothing in table\n      this.currentTaskDiv.textContent = 'No current task';\n      this.currentTaskDiv.classList.add('animate');\n      this.finishTaskBtn.disabled = true;\n    } else if (this.currentTask === null && nextTask !== null) {\n      // no currentTask, something in table\n      this.currentTaskDiv.textContent = `Working on: ${nextTask.name}`;\n      this.currentTaskDiv.classList.add('animate');\n      this.finishTaskBtn.disabled = false;\n    } else if (this.currentTask !== null && nextTask === null) { // last task completed\n      this.currentTaskDiv.textContent = 'No current task';\n      this.currentTaskDiv.classList.add('animate');\n      this.finishTaskBtn.disabled = true;\n    } else if (this.currentTask !== nextTask) {\n      this.currentTaskDiv.textContent = `Working on: ${nextTask.name}`;\n      this.currentTaskDiv.classList.add('animate');\n      this.finishTaskBtn.disabled = false;\n    }\n    this.currentTask = nextTask;\n    if (this.currentTask != null) this.currentTask.checkBox.disabled = false;\n  }\n\n  /**\n   * Function that puts the task with the given id to the top\n   * of the table\n   * @param {String} id - id of task to focus on\n   */\n  onFocusTask(id) {\n    const rows = this.table.childNodes;\n    let currentTaskIndex = -1;\n    // find index of the current task\n    for (let i = 2; i < rows.length; i += 1) {\n      if (rows[i].checked === false && currentTaskIndex === -1) {\n        currentTaskIndex = i;\n      }\n    }\n\n    const clickedTask = this.todoList.getTaskById(id);\n    // disable the old tasks checkbox because it has not been clicked yet\n    clickedTask.onDelete();\n    this.currentTask.checkBox.disabled = false;\n    this.displayTask(clickedTask, currentTaskIndex);\n    // remove the task and add it back to the top\n    this.todoList.addTaskToTop(clickedTask);\n  }\n\n  moveTaskUp(id) {\n    const rows = this.table.childNodes;\n    let currentTaskIndex = -1;\n    // find index of the current task\n    for (let i = 2; i < rows.length; i += 1) {\n      if (rows[i].id === id && currentTaskIndex === -1) {\n        currentTaskIndex = i;\n        break;\n      }\n    }\n\n    // don't do anything if it's the first task in the list\n    if (currentTaskIndex === 2) {\n      return;\n    }\n\n    const clickedTask = this.todoList.getTaskById(id);\n    // disable the old tasks checkbox because it has not been clicked yet\n    clickedTask.onDelete();\n    this.currentTask.checkBox.disabled = false;\n    // insert task before the previous task in the table\n    this.displayTask(clickedTask, currentTaskIndex - 1);\n\n    this.todoList.shiftTaskUp(clickedTask, currentTaskIndex);\n  }\n\n  moveTaskDown(id) {\n    const rows = this.table.childNodes;\n    let currentTaskIndex = -1;\n    // find index of the current task. Tasks start in the row thing at index 2\n    for (let i = 2; i < rows.length; i += 1) {\n      if (rows[i].id === id && currentTaskIndex === -1) {\n        currentTaskIndex = i;\n      }\n    }\n\n    // don't move task down if it's the last task or if the next task is a checked task\n    const firstCompletedTaskIndex = this.getFirstCompletedTaskIndex();\n    if (currentTaskIndex === rows.length - 1 || currentTaskIndex + 1 === firstCompletedTaskIndex) {\n      return;\n    }\n\n    const clickedTask = this.todoList.getTaskById(id);\n    // disable the old tasks checkbox because it has not been clicked yet\n    clickedTask.onDelete(); // delete current task from everything\n    this.currentTask.checkBox.disabled = true;\n    this.displayTask(clickedTask, currentTaskIndex + 1);\n\n    // shift the task down in localStorage and in 'taskList'\n    this.todoList.shiftTaskDown(clickedTask, currentTaskIndex);\n  }\n}\n\nexport { TodoListDom };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ToDoList/TodoListDom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "TodoListDom",
    "memberof": "js/ToDoList/TodoListDom.js",
    "static": true,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/TodoListDom.js",
    "importStyle": "{TodoListDom}",
    "description": "Class responsible for providing changes to the DOM for the TodoList\nEncapsulates the TodoList class\nDone so their is a clear abstraction from DOM Manipulation and Data Manipulation",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 356,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#constructor",
    "access": "public",
    "description": "Initializes the TodoListDom object with its correct member variables",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLTableElement"
        ],
        "spread": false,
        "optional": false,
        "name": "HTMLTable",
        "description": "Table where tasks will be stored"
      },
      {
        "nullable": null,
        "types": [
          "HTMLFormElement"
        ],
        "spread": false,
        "optional": false,
        "name": "HTMLForm",
        "description": "Form to add the task"
      },
      {
        "nullable": null,
        "types": [
          "HTMLButtonElement"
        ],
        "spread": false,
        "optional": false,
        "name": "submitBtn",
        "description": "Button to submit the entered tasks"
      },
      {
        "nullable": null,
        "types": [
          "HTMLButtonElement"
        ],
        "spread": false,
        "optional": false,
        "name": "deleteAllBtn",
        "description": "Delete all tasks button"
      }
    ]
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "todoList",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#todoList",
    "access": "public",
    "description": "Holds the TodoList so the Dom Manager can acess it",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "ToDoList"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "form",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#form",
    "access": "public",
    "description": "The form where users input their task",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "HTMLFormElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "submitBtn",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#submitBtn",
    "access": "public",
    "description": "The button where users click to submit their todo's",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "deleteAllBtn",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#deleteAllBtn",
    "access": "public",
    "description": "The button where users click to delete their todo's",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "finishTaskBtn",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#finishTaskBtn",
    "access": "public",
    "description": "The button where users click to check off the current task",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "HTMLButtonElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "table",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#table",
    "access": "public",
    "description": "The table where the todolist is displayed",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "HTMLTableElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "currentTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#currentTask",
    "access": "public",
    "description": "The current task the user should be working on",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "currentTaskDiv",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#currentTaskDiv",
    "access": "public",
    "description": "The current task to be displayed",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "HTMLDiv"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "renderLocalStorage",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#renderLocalStorage",
    "access": "public",
    "description": "Fetch local storage, and store them into window.localData\nIterate each local tasks and render them",
    "lineNumber": 69,
    "params": [],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "setupEventListeners",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#setupEventListeners",
    "access": "public",
    "description": "Sets up the form dissapearing and submit event listeners\nAlso set up finish task button",
    "lineNumber": 129,
    "params": [],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "displayTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#displayTask",
    "access": "public",
    "description": "Adds a task to the bottom of the table OR adds it before the specified index",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLTableRowElement"
        ],
        "spread": false,
        "optional": false,
        "name": "newTask",
        "description": "task you want added"
      },
      {
        "nullable": null,
        "types": [
          "HTMLTableRowElement"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " -1",
        "defaultRaw": -1,
        "name": "index",
        "description": "index you want to insert the task before"
      }
    ],
    "return": null
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "onSessionComplete",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#onSessionComplete",
    "access": "public",
    "description": "This function runs when the timer is done with its working session",
    "lineNumber": 199,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "onCompletedTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#onCompletedTask",
    "access": "public",
    "description": "This function runs when someone checks off a task. Removes the task from the\ntable and appends it to the bottom. Removes the task from the todolist\ndata structure and appends it to the bottom there",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "getFirstCompletedTaskIndex",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#getFirstCompletedTaskIndex",
    "access": "public",
    "description": "This function returns the index of the first completed task,\nused when new tasks/ unchecked tasks are added.",
    "lineNumber": 229,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "onUncheckedTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#onUncheckedTask",
    "access": "public",
    "description": "Called when someone unchecks a task. Removes the task from the table\nand appends it become the last unchecked task in the table. Does the same\nwithin the todolist data structure",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of the task you would like to uncheck"
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "updateCurrentTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#updateCurrentTask",
    "access": "public",
    "description": "Updates the current task and changes its checkbox property accordingly",
    "lineNumber": 262,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "onFocusTask",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#onFocusTask",
    "access": "public",
    "description": "Function that puts the task with the given id to the top\nof the table",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id of task to focus on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "moveTaskUp",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#moveTaskUp",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "moveTaskDown",
    "memberof": "js/ToDoList/TodoListDom.js~TodoListDom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/ToDoList/TodoListDom.js~TodoListDom#moveTaskDown",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "js/ToDoList/TodoListDomVariables.js",
    "content": "/**\n * The object that stores the textContent for each HTML elements.\n * @type {Object} HTMLAttributes\n */\nconst HTMLAttributes = {\n  buttonDoneTextContent: 'Done',\n  buttonAddTextContent: 'Add Task',\n  taskNameId: 'task-name',\n  taskPomoSessions: 'task-length',\n};\n\n/**\n * The object that stores the corresponding index of each element.\n * Used in the array of JSON.parse(localStorage.getItem('tasks'))\n * @type {Object} TaskStorage\n */\nconst TaskStorage = {\n  idIndex: 0,\n  nameIndex: 1,\n  totalSessionIndex: 2,\n  currentSessionIndex: 3,\n  checkedIndex: 4,\n};\n\nexport { HTMLAttributes, TaskStorage };\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/js/ToDoList/TodoListDomVariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "HTMLAttributes",
    "memberof": "js/ToDoList/TodoListDomVariables.js",
    "static": true,
    "longname": "js/ToDoList/TodoListDomVariables.js~HTMLAttributes",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/TodoListDomVariables.js",
    "importStyle": "{HTMLAttributes}",
    "description": "The object that stores the textContent for each HTML elements.",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "TaskStorage",
    "memberof": "js/ToDoList/TodoListDomVariables.js",
    "static": true,
    "longname": "js/ToDoList/TodoListDomVariables.js~TaskStorage",
    "access": "public",
    "export": true,
    "importPath": "cse112_team15/js/ToDoList/TodoListDomVariables.js",
    "importStyle": "{TaskStorage}",
    "description": "The object that stores the corresponding index of each element.\nUsed in the array of JSON.parse(localStorage.getItem('tasks'))",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# PomoXV\n[![CD](https://github.com/nickkro25/cse112_team15/actions/workflows/CD.yml/badge.svg)](https://github.com/nickkro25/cse112_team15/actions/workflows/CD.yml)\n\nPomoXV is a web application dedicated to making the Pomodoro Technique as easy as possible. \n\n[Check out the application here!]( https://nickkro25.github.io/cse112_team15/)\n\n## App Instructions\n\nRead about how to use PomoXV in the [\"App Walkthrough\"](https://github.com/nickkro25/cse112_team15/wiki/App-Walkthrough) section of our wiki.\n\n## Setup \nRequires:\n- NodeJS + NPM\n\nFirst, clone and cd into the repo\n```bash\n$ git clone <url>\n$ cd cse112_team15\n```\nInstall all the dependencies\n```bash\n$ npm install\n```\nStart the webapp on a local server\n```bash\n$ npm start\n```\nTo view the app, open the localhost url in Chrome.\n\n## Next Steps\n\n### Code Documentation\nTo view the code documentation for the app,\n```bash\n$ git checkout dev_docs\ngo to /dev-docs/index.html\nright click the file and host as a live server\n```\n\n### Logistical Documentation\nTo view the logistical documentation for the app (meeting notes, ADRS, etc), visit [here]( https://github.com/nickkro25/cse112_team15_docs)\n\n### Contributing to the project\nTo get started contributing, visit the [\"How to Contribute\"]( https://github.com/nickkro25/cse112_team15/wiki/How-to-Contribute) section in the wiki!\n\n## Future Roadmap\nHere are some features we would have liked to add but couldn't due to time constraints:\n- Improved statistics to let the user track their habits better\n- Account system to let the user keep their stats and tasks across different devices\n- Better accessibility, especially for colorblind people and people who need to use assistive technology such as screen readers\n- More friendly and attractive mobile UI\n- Restructured HTML and CSS for accessibility, SEO, and better developer experience\n- Analytics / contact point to get user feedback\n\nAnd some issues that still need to be fixed up:\n- Ugly color theme transition upon refresh\n- UI is inconsistent (highlighting, colors, modals such as the delete all modal)\n- Need more robust testing (especially for notifications)\n- Documentation is lacking for newly added code\n- No CSS/HTML validator in the pipeline yet, need to manually validate\n- Nav header switches colors slower\n\n",
    "longname": "/home/runner/work/cse112_team15/cse112_team15/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cse112_team15\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Necessary Packages for Development\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \" npx http-server -c-1\",\n    \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --coverage\",\n    \"test-nc\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n    \"lint-js\": \"eslint --fix --no-error-on-unmatched-pattern --ext .js,.jsx .\",\n    \"lint-js:test\": \"eslint --no-error-on-unmatched-pattern --ext .js,.jsx .\",\n    \"lint-css\": \"stylelint **/*.css !**/node_modules/** --allow-empty-input --fix\",\n    \"lint-css:test\": \"stylelint **/*.css !**/node_modules/** --allow-empty-input --fix\",\n    \"lint\": \"npm run lint-js && npm run lint-css\",\n    \"lint:test\": \"npm run lint-js:test && npm run lint-css:test\",\n    \"branch\": \"chmod 777 ./.github/scripts/branch.sh && ./.github/scripts/branch.sh\",\n    \"doc\": \"./node_modules/.bin/esdoc && ./node_modules/.bin/esdoc -test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/nickkro25/cse112_team15.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/nickkro25/cse112_team15/issues\"\n  },\n  \"homepage\": \"https://github.com/nickkro25/cse112_team15\",\n  \"devDependencies\": {\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.12.13\",\n    \"@semantic-release/commit-analyzer\": \"^8.0.1\",\n    \"@semantic-release/github\": \"^7.2.0\",\n    \"@semantic-release/release-notes-generator\": \"^9.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.19.0\",\n    \"eslint-config-airbnb-base\": \"^14.2.1\",\n    \"eslint-plugin-import\": \"^2.22.1\",\n    \"http-server\": \"^0.12.3\",\n    \"jest\": \"^26.6.3\",\n    \"jest-environment-node\": \"^26.6.2\",\n    \"semantic-release\": \"^17.4.2\",\n    \"stylelint\": \"^13.9.0\",\n    \"stylelint-config-standard\": \"^20.0.0\"\n  },\n  \"babel\": {\n    \"env\": {\n      \"test\": {\n        \"plugins\": [\n          \"@babel/plugin-transform-modules-commonjs\"\n        ]\n      }\n    }\n  },\n  \"jest\": {\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 80,\n        \"functions\": 80,\n        \"lines\": 60,\n        \"statements\": -30\n      }\n    }\n  },\n  \"release\": {\n    \"branches\": [\n      \"main\"\n    ],\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      [\n        \"@semantic-release/github\",\n        {\n          \"assets\": [\n            {\n              \"path\": \"js/*.js\",\n              \"label\": \"JS distribution\"\n            }\n          ]\n        }\n      ]\n    ]\n  },\n  \"dependencies\": {\n    \"intro.js\": \"^3.3.1\"\n  }\n}\n",
    "longname": "/home/runner/work/cse112_team15/cse112_team15/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 381,
    "kind": "testFile",
    "name": "tests/distraction.test.js",
    "content": "import { Distraction } from '../js/Distraction/Distraction.js';\n\n/** @Test {ToDoList} */\nlet DistractionPage;\n\nbeforeEach(() => {\n  document.body.innerHTML = `\n  <div id='overlay'></div>\n  <button id=\"distractionButton\" class = \"pure-button\">Distraction</button>\n  <section class=\"form-popup\" id=\"distract-popup\">\n    <form class=\"form-container\" id=\"distract-form\">\n      <h1>Report Distraction</h1>\n\n      <label><b>Distraction Description</b></label>\n      <input type=\"text\" placeholder=\"Enter a short description of the distraction\" id=\"description\" required=\"\">\n\n      <button type=\"submit\" class=\"distractFormButton\" id=\"submit-button\">Submit</button>\n      <button type=\"button\" class=\"distractFormButton cancel\" id=\"cancel-button\">Cancel</button>\n    </form>\n  </section>`;\n  const distractButton = document.getElementById('distractionButton');\n  const distractPopUp = document.getElementById('distract-popup');\n  const cancelButton = document.getElementById('cancel-button');\n  const distractForm = document.getElementById('distract-form');\n  const description = document.getElementById('description');\n  const overlay = document.getElementById('overlay');\n  // eslint-disable-next-line max-len\n  DistractionPage = new Distraction(distractButton, distractPopUp, cancelButton, distractForm, description, overlay);\n});\n\ntest('Test show and hide', () => {\n  DistractionPage.distractButton.click();\n  expect(DistractionPage.distractPopUp.style.display).toBe('block');\n  DistractionPage.cancelButton.click();\n  setTimeout(() => {\n    expect(DistractionPage.distractPopUp.style.display).toBe('none');\n  }, 3000);\n  DistractionPage.distractButton.click();\n  expect(DistractionPage.distractPopUp.style.display).toBe('block');\n  DistractionPage.distractButton.click();\n  setTimeout(() => {\n    expect(DistractionPage.distractPopUp.style.display).toBe('none');\n  }, 3000);\n});\n\ntest('submit first time', () => {\n  DistractionPage.distractButton.click();\n  DistractionPage.description.value = 'go to restroom';\n  DistractionPage.distractForm.submit();\n  setTimeout(() => {\n    expect(DistractionPage.distractPopUp.style.display).toBe('none');\n  }, 3000);\n  expect(DistractionPage.description.value).toBe('');\n});\n\ntest('hide button', () => {\n  DistractionPage.hideButton();\n  expect(DistractionPage.distractButton.style.display).toBe('none');\n});\n\ntest('show button', () => {\n  DistractionPage.showButton();\n  expect(DistractionPage.distractButton.style.display).toBe('block');\n});\n/*\ntest('input nothing', () => {\n  DistractionPage.distractButton.click();\n  DistractionPage.description.value = '';\n  DistractionPage.submitButton.click();\n  expect(DistractionPage.distractPopUp.style.display).toBe('block');\n});\n*/\n\ntest('animation end event listener', () => {\n  const event = new Event('animationend');\n  DistractionPage.distractPopUp.dispatchEvent(event);\n  expect(DistractionPage.distractPopUp.style.animationName).toBe('');\n\n  DistractionPage.overlay.dispatchEvent(event);\n  expect(DistractionPage.overlay.style.animationName).toBe('');\n});\n\ntest('click overlay to close', () => {\n  DistractionPage.distractButton.click();\n  DistractionPage.overlay.click();\n  setTimeout(() => {\n    expect(DistractionPage.distractPopUp.style.display).toBe('none');\n  }, 3000);\n});\n\ntest('trigger when the animation is finished', () => {\n  const event = new Event('animationend');\n  event.animationName = 'distraction-animation-out';\n  DistractionPage.distractPopUp.dispatchEvent(event);\n  expect(DistractionPage.distractPopUp.style.animationName).toBe('');\n  expect(DistractionPage.distractPopUp.style.display).toBe('none');\n\n  event.animationName = 'overlay-animation-out';\n  DistractionPage.overlay.dispatchEvent(event);\n  expect(DistractionPage.overlay.style.animationName).toBe('');\n  expect(DistractionPage.overlay.style.display).toBe('none');\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/distraction.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test0",
    "access": null,
    "description": "Test show and hide",
    "lineNumber": 31
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test1",
    "access": null,
    "description": "submit first time",
    "lineNumber": 46
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test2",
    "access": null,
    "description": "hide button",
    "lineNumber": 56
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test3",
    "access": null,
    "description": "show button",
    "lineNumber": 61
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test4",
    "access": null,
    "description": "animation end event listener",
    "lineNumber": 74
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test5",
    "access": null,
    "description": "click overlay to close",
    "lineNumber": 83
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "tests/distraction.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/distraction.test.js~test6",
    "access": null,
    "description": "trigger when the animation is finished",
    "lineNumber": 91
  },
  {
    "__docId__": 389,
    "kind": "testFile",
    "name": "tests/statistics.test.js",
    "content": "import { Statistics } from '../js/Statistics/Statistics.js';\nimport { buttonText } from '../js/Timer/TimerVariables.js';\n\n/** @Test {ToDoList} */\n\ndocument.body.innerHTML += \"<div id='overlay'></div>\"\n+ \"<span class='close-stats-button' id='close-stats-button'>&times;</span>\"\n+ \"<h2 class='statslabel'>Your Stats</h2>\"\n+ \"<div class ='tab'>\"\n+ \"<button class='tab-btn' id='data' > Data </button>\"\n+ \"<button class='tab-btn' id='distraction'> Distraction </button>\"\n+ '</div>'\n+ \"<div id='stats-info' class='stats-info-container'>\"\n+ '</div>';\nlet Stats = new Statistics();\nbeforeEach(() => {\n  document.body.innerHTML += \"<div id='overlay'></div>\"\n  + \"<div class ='tab'>\"\n  + \"<button class='tab-btn' id='data' > Data </button>\"\n  + \"<button class='tab-btn' id='distraction'> Distraction </button>\"\n  + '</div>'\n  + \"<div id='stats-info' class='stats-info-container'>\"\n  + '</div>';\n  Stats = new Statistics();\n});\n\nafterEach(() => {\n  localStorage.clear();\n});\n\ntest('statsTab Button calls event listener', () => {\n  const btn = document.getElementById('data');\n  btn.click();\n  expect(btn.className).toBe('tab-btn-active');\n});\n\ntest('Call to update dom updates text content correctly', () => {\n  Stats.totalMins = 15;\n  Stats.updateDom();\n  expect(Stats.timeSpent.textContent).toBe('15');\n});\n\ndescribe('Variables function correctly', () => {\n  test('Task completion increments count correctly', () => {\n    Stats.incrementTasksCompleted();\n    expect(Stats.tasksCompleted).toBe(1);\n    for (let i = 0; i < 4; i += 1) {\n      Stats.incrementTasksCompleted();\n    }\n    expect(Stats.tasksCompleted).toBe(5);\n  });\n\n  test('Task un-completion decrements count correctly', () => {\n    for (let i = 0; i <= 4; i += 1) {\n      Stats.incrementTasksCompleted();\n    }\n    Stats.decrementTasksCompleted();\n    expect(Stats.tasksCompleted).toBe(4);\n    for (let i = 0; i < 3; i += 1) {\n      Stats.decrementTasksCompleted();\n    }\n    expect(Stats.tasksCompleted).toBe(1);\n    Stats.decrementTasksCompleted();\n    expect(Stats.tasksCompleted).toBe(0);\n    Stats.decrementTasksCompleted();\n    expect(Stats.tasksCompleted).toBe(0);\n  });\n\n  test('Actual Pomo Session increments count correctly', () => {\n    Stats.incrementActualPomoSessions();\n    expect(Stats.actualPomoSessions).toBe(1);\n    for (let i = 0; i < 4; i += 1) {\n      Stats.incrementActualPomoSessions();\n    }\n    expect(Stats.actualPomoSessions).toBe(5);\n  });\n\n  test('Estimated Pomo Session increments count correctly', () => {\n    Stats.addExpectedPomoSessions(5);\n    expect(Stats.expectedPomoSessions).toBe(5);\n    for (let i = 0; i < 4; i += 1) {\n      Stats.addExpectedPomoSessions(2);\n    }\n    expect(Stats.expectedPomoSessions).toBe(13);\n  });\n\n  test('Estimated Pomo Session decrements count correctly', () => {\n    for (let i = 0; i <= 4; i += 1) {\n      Stats.addExpectedPomoSessions(2);\n    }\n    expect(Stats.expectedPomoSessions).toBe(10);\n    for (let i = 0; i < 4; i += 1) {\n      Stats.deleteExpectedPomoSessions(2);\n    }\n    expect(Stats.expectedPomoSessions).toBe(2);\n    Stats.deleteExpectedPomoSessions(2);\n    expect(Stats.expectedPomoSessions).toBe(0);\n    Stats.deleteExpectedPomoSessions(5);\n    expect(Stats.expectedPomoSessions).toBe(0);\n  });\n\n  test('Time Spent increments count correctly', () => {\n    Stats.addTimeSpent(5);\n    expect(Stats.totalMins).toBe(5);\n    Stats.addTimeSpent(25);\n    expect(Stats.totalMins).toBe(30);\n    Stats.addTimeSpent(15);\n    expect(Stats.totalMins).toBe(45);\n  });\n\n  test('Work time increments work time count correctly', () => {\n    Stats.addWorkTime(5);\n    expect(Stats.workMins).toBe(5);\n    Stats.addWorkTime(25);\n    expect(Stats.workMins).toBe(30);\n    Stats.addWorkTime(15);\n    expect(Stats.workMins).toBe(45);\n  });\n\n  test('Work time increments time spent count correctly', () => {\n    Stats.addWorkTime(5);\n    expect(Stats.totalMins).toBe(5);\n    Stats.addWorkTime(25);\n    expect(Stats.totalMins).toBe(30);\n    Stats.addWorkTime(15);\n    expect(Stats.totalMins).toBe(45);\n  });\n\n  test('Work time increments time spent independently of work time', () => {\n    Stats.addWorkTime(5);\n    expect(Stats.totalMins).toBe(5);\n    expect(Stats.workMins).toBe(5);\n    Stats.addTimeSpent(10);\n    expect(Stats.totalMins).toBe(15);\n    expect(Stats.workMins).toBe(5);\n    Stats.addWorkTime(25);\n    expect(Stats.totalMins).toBe(40);\n    expect(Stats.workMins).toBe(30);\n  });\n\n  test('Average time per task works correctly, completed tasks exist', () => {\n    for (let i = 0; i < 5; i += 1) {\n      Stats.incrementTasksCompleted();\n    }\n\n    expect(Stats.tasksCompleted).toBe(5);\n    expect(Stats.getAverageTimePerTask()).toBe(0);\n\n    Stats.addWorkTime(10);\n\n    expect(Stats.getAverageTimePerTask()).toBe(2);\n\n    Stats.addTimeSpent(20);\n\n    expect(Stats.getAverageTimePerTask()).toBe(2);\n\n    for (let i = 0; i < 5; i += 1) {\n      Stats.incrementTasksCompleted();\n    }\n\n    expect(Stats.getAverageTimePerTask()).toBe(1);\n  });\n\n  test('Average time per task works correctly, completed tasks DO NOT exist', () => {\n    expect(Stats.getAverageTimePerTask()).toBe(0);\n    Stats.addWorkTime(20);\n    expect(Stats.getAverageTimePerTask()).toBe(0);\n    Stats.incrementTasksCompleted();\n    expect(Stats.getAverageTimePerTask()).toBe(20);\n  });\n\n  test('Distractions stored correctly', () => {\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n\n    Stats.addDistraction({\n      name: 'second distraction',\n      date: new Date(2021, 3, 3, 10, 35),\n      pomoSessionId: 1,\n    });\n    Stats.updateDistractionList();\n\n    Stats.addDistraction({\n      name: 'third distraction',\n      date: new Date(2021, 3, 3, 10, 40),\n      pomoSessionId: 1,\n    });\n    Stats.updateDistractionList();\n\n    expect(Stats.distractionList[0].name).toEqual('first distraction');\n  });\n\n  test('Unique distractions calculated correctly', () => {\n    expect(Stats.getNumUniqueDistractions()).toBe(0);\n\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n\n    expect(Stats.getNumUniqueDistractions()).toBe(1);\n\n    Stats.addDistraction({\n      name: 'second distraction',\n      date: new Date(2021, 3, 3, 10, 35),\n      pomoSessionId: 1,\n    });\n\n    expect(Stats.getNumUniqueDistractions()).toBe(2);\n\n    Stats.addDistraction({\n      name: 'third distraction',\n      date: new Date(2021, 3, 3, 10, 40),\n      pomoSessionId: 1,\n    });\n\n    expect(Stats.getNumUniqueDistractions()).toBe(2);\n  });\n\n  test('Distractions per task calculated correctly', () => {\n    expect(Stats.getAvgDistractionsPerTask()).toBe(0);\n\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n\n    expect(Stats.getAvgDistractionsPerTask()).toBe(0);\n    Stats.incrementTasksCompleted();\n    expect(Stats.getAvgDistractionsPerTask()).toBe(1);\n\n    Stats.addDistraction({\n      name: 'second distraction',\n      date: new Date(2021, 3, 3, 10, 35),\n      pomoSessionId: 1,\n    });\n\n    expect(Stats.getAvgDistractionsPerTask()).toEqual(2);\n    Stats.incrementTasksCompleted();\n    expect(Stats.getAvgDistractionsPerTask()).toBe(1);\n\n    Stats.addDistraction({\n      name: 'third distraction',\n      date: new Date(2021, 3, 3, 10, 40),\n      pomoSessionId: 1,\n    });\n\n    Stats.addDistraction({\n      name: 'fourth distraction',\n      date: new Date(2021, 3, 3, 10, 45),\n      pomoSessionId: 1,\n    });\n    expect(Stats.getAvgDistractionsPerTask()).toBe(2);\n\n    for (let i = 0; i < 4; i += 1) {\n      Stats.incrementTasksCompleted();\n    }\n\n    expect(Stats.getAvgDistractionsPerTask()).toEqual(0.7); // ROUNDED FROM 0.67\n  });\n\n  test('flushLocalStorage deletes all data older than a year', () => {\n    Stats.history.push({ // a few days ago\n      date: new Date(2022, 4, 9, 10, 35),\n      distractionCount: 1,\n      timeSpent: 1,\n    });\n    Stats.history.push({ // a few months ago (same year)\n      date: new Date(2022, 0, 1, 10, 35),\n      distractionCount: 1,\n      timeSpent: 1,\n    });\n    Stats.history.push({ // a few months ago (previous year)\n      date: new Date(2021, 10, 9, 10, 35),\n      distractionCount: 1,\n      timeSpent: 1,\n    });\n    Stats.history.push({ // more than a year ago (barely)\n      date: new Date(2021, 0, 1, 10, 35),\n      distractionCount: 1,\n      timeSpent: 1,\n    });\n    Stats.flushHistory();\n    expect(Stats.history.length).toBe(3);\n  });\n\n  test('Data compression trigger works', () => {\n    localStorage.setItem('startDateTime', new Date(2020, 0, 1));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(2021, 2, 11));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(2021, 2, 10));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(2021, 1, 11));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    const today = new Date();\n    localStorage.setItem('startDateTime', new Date(today.getFullYear(), today.getMonth(), today.getDate(), 1, 0, 0));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(today.getFullYear(), today.getMonth() - 1, today.getDate(), 1, 0, 0));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1, 1, 0, 0));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeTruthy();\n    localStorage.setItem('startDateTime', new Date(today.getFullYear(), today.getMonth(), today.getDate(), 3, 0, 0));\n    Stats = new Statistics();\n    expect(Stats.dataToCompressExists()).toBeFalsy();\n  });\n\n  test('clearData resets all values', () => {\n    Stats.workMins = 10;\n    Stats.totalMins = 50;\n    Stats.tasksCompleted = 11;\n    expect(Stats.workMins).toBe(10);\n    Stats.clearData();\n    expect(Stats.totalMins).toBe(0);\n    expect(Stats.workMins).toBe(0);\n    expect(Stats.tasksCompleted).toBe(0);\n    expect(Stats.distractionList.length).toBe(0);\n    expect(Stats.expectedPomoSessions).toBe(0);\n    expect(Stats.actualPomoSessions).toBe(0);\n  });\n});\n\ndescribe('local storage tests', () => {\n  beforeEach(() => {\n    document.body.innerHTML += \"<div id='overlay'></div>\"\n    + \"<div class ='tab'>\"\n    + \"<button class='tab-btn' id='data' > Data </button>\"\n    + \"<button class='tab-btn' id='distraction'> Distraction </button>\"\n    + '</div>'\n    + \"<div id='stats-info' class='stats-info-container'>\"\n    + '</div>';\n    Stats = new Statistics();\n    localStorage.clear();\n  });\n\n  test('Everything is initialized to zeroes', () => {\n    expect(Stats.totalMins).toBe(0);\n    expect(Stats.workMins).toBe(0);\n    expect(Stats.tasksCompleted).toBe(0);\n    expect(Stats.distractionList.length).toBe(0);\n    expect(Stats.expectedPomoSessions).toBe(0);\n    expect(Stats.actualPomoSessions).toBe(0);\n  });\n\n  test('non-empty local storage initialized correctly', () => {\n    localStorage.setItem('totalMins', 1);\n    localStorage.setItem('workMins', 2);\n    localStorage.setItem('tasksCompleted', 3);\n    localStorage.setItem('expectedPomoSessions', 4);\n    localStorage.setItem('actualPomoSessions', 5);\n    localStorage.setItem('currDistractionList', JSON.stringify([{\n      name: 'fourth distraction',\n      date: new Date(2021, 3, 3, 10, 45),\n      pomoSessionId: 1,\n    }]));\n    Stats = new Statistics();\n    expect(Stats.totalMins).toBe(1);\n    expect(Stats.workMins).toBe(2);\n    expect(Stats.tasksCompleted).toBe(3);\n    expect(Stats.distractionList.length).toBe(1);\n    expect(Stats.expectedPomoSessions).toBe(4);\n    expect(Stats.actualPomoSessions).toBe(5);\n  });\n\n  test('Data compresses as expected', () => {\n    expect(Stats.history.length).toBe(0);\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n    Stats.addDistraction({\n      name: 'first distraction',\n      date: new Date(2021, 3, 3, 10, 30),\n      pomoSessionId: 0,\n    });\n    Stats.totalMins = 10;\n    Stats.compressStats();\n    let temp = JSON.parse(localStorage.getItem('statsHistory'));\n    expect(temp.length).toBe(1);\n    Stats.compressStats();\n    temp = JSON.parse(localStorage.getItem('statsHistory'));\n    expect(temp.length).toBe(2);\n    expect(temp[0].timeSpent).toBe(10);\n  });\n});\n\ntest('Distraction Tab Button Pressed, all Data tab items hidden', () => {\n  Stats = new Statistics();\n\n  const content = document.getElementsByClassName('stats-info');\n  const contentlabel = document.getElementsByClassName('stats-info-label');\n  const btn = document.getElementById('distraction');\n  btn.click();\n  for (let i = 0; i < content.length; i += 1) {\n    expect(content[i].style.display).toBe('none');\n    expect(contentlabel[i].style.display).toBe('none');\n  }\n});\n\ntest('Clicking outside of the popup closes the popup', () => {\n  Stats = new Statistics();\n  const overlay = document.getElementById('overlay');\n  const event = new Event('click');\n  overlay.dispatchEvent(event);\n  const btn = document.getElementById('close-stats-button');\n  btn.click();\n  expect(overlay.style.animation).toBe('');\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/statistics.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~test7",
    "access": null,
    "description": "statsTab Button calls event listener",
    "lineNumber": 31
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~test8",
    "access": null,
    "description": "Call to update dom updates text content correctly",
    "lineNumber": 37
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~describe9",
    "access": null,
    "description": "Variables function correctly",
    "lineNumber": 43
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test10",
    "access": null,
    "description": "Task completion increments count correctly",
    "lineNumber": 44
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test11",
    "access": null,
    "description": "Task un-completion decrements count correctly",
    "lineNumber": 53
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test12",
    "access": null,
    "description": "Actual Pomo Session increments count correctly",
    "lineNumber": 69
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test13",
    "access": null,
    "description": "Estimated Pomo Session increments count correctly",
    "lineNumber": 78
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test14",
    "access": null,
    "description": "Estimated Pomo Session decrements count correctly",
    "lineNumber": 87
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test15",
    "access": null,
    "description": "Time Spent increments count correctly",
    "lineNumber": 102
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test16",
    "access": null,
    "description": "Work time increments work time count correctly",
    "lineNumber": 111
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test17",
    "access": null,
    "description": "Work time increments time spent count correctly",
    "lineNumber": 120
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test18",
    "access": null,
    "description": "Work time increments time spent independently of work time",
    "lineNumber": 129
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test19",
    "access": null,
    "description": "Average time per task works correctly, completed tasks exist",
    "lineNumber": 141
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "test20",
    "testId": 20,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test20",
    "access": null,
    "description": "Average time per task works correctly, completed tasks DO NOT exist",
    "lineNumber": 164
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test21",
    "access": null,
    "description": "Distractions stored correctly",
    "lineNumber": 172
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test22",
    "access": null,
    "description": "Unique distractions calculated correctly",
    "lineNumber": 196
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "test23",
    "testId": 23,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test23",
    "access": null,
    "description": "Distractions per task calculated correctly",
    "lineNumber": 224
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test24",
    "access": null,
    "description": "flushLocalStorage deletes all data older than a year",
    "lineNumber": 267
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "test25",
    "testId": 25,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test25",
    "access": null,
    "description": "Data compression trigger works",
    "lineNumber": 292
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "test26",
    "testId": 26,
    "memberof": "tests/statistics.test.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe9.test26",
    "access": null,
    "description": "clearData resets all values",
    "lineNumber": 320
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~describe27",
    "access": null,
    "description": "local storage tests",
    "lineNumber": 335
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "tests/statistics.test.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe27.test28",
    "access": null,
    "description": "Everything is initialized to zeroes",
    "lineNumber": 348
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "test29",
    "testId": 29,
    "memberof": "tests/statistics.test.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe27.test29",
    "access": null,
    "description": "non-empty local storage initialized correctly",
    "lineNumber": 357
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "test30",
    "testId": 30,
    "memberof": "tests/statistics.test.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/statistics.test.js~describe27.test30",
    "access": null,
    "description": "Data compresses as expected",
    "lineNumber": 377
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "test31",
    "testId": 31,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~test31",
    "access": null,
    "description": "Distraction Tab Button Pressed, all Data tab items hidden",
    "lineNumber": 405
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "test32",
    "testId": 32,
    "memberof": "tests/statistics.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/statistics.test.js~test32",
    "access": null,
    "description": "Clicking outside of the popup closes the popup",
    "lineNumber": 418
  },
  {
    "__docId__": 416,
    "kind": "testFile",
    "name": "tests/task.test.js",
    "content": "/* eslint-disable eqeqeq */\nimport { Task } from '../js/ToDoList/Task.js';\nimport { classNames } from '../js/ToDoList/TaskVariables.js';\n\nbeforeEach(() => {\n  window.localData = [];\n});\n\ntest('Test that task with no values is empty', () => {\n  const currTask = new Task();\n  expect(currTask.name).toBe(undefined);\n  expect(currTask.checked).toBe(false);\n  expect(currTask.currentSessionNum).toEqual(0);\n  expect(currTask.totalSessions).toBe(undefined);\n  expect(currTask.id == 'undefined').toBeTruthy();\n});\n\ntest('Test that task with initialized values is initialized correctly', () => {\n  const currTask = new Task(0, 'Test task', 5);\n  expect(currTask.name).toBe('Test task');\n  expect(currTask.checked).toBe(false);\n  expect(currTask.currentSessionNum).toEqual(0);\n  expect(currTask.totalSessions).toEqual(5);\n  expect(currTask.id == 0).toBe(true);\n  expect(currTask.className).toBe(classNames.uncheckedTaskClassName);\n  expect(currTask.checkBox.checked).toBe(false);\n});\n\ntest('Test that task with optional initilized values is initialized correctly', () => {\n  const currTask = new Task(0, 'Test task', 5, 2, true);\n  expect(currTask.name).toBe('Test task');\n  expect(currTask.checked).toBe(true);\n  expect(currTask.currentSessionNum).toEqual(2);\n  expect(currTask.totalSessions).toEqual(5);\n  expect(currTask.id == 0).toBe(true);\n  expect(currTask.className).toBe(classNames.completedTaskClassName);\n  expect(currTask.checkBox.checked).toBe(true);\n});\n\ntest('Increment counter only changes current session number', () => {\n  const currTask = new Task(0, 'Test task', 5);\n  expect(currTask.name).toBe('Test task');\n  expect(currTask.currentSessionNum).toBe(0);\n  expect(currTask.totalSessions).toBe(5);\n  expect(currTask.id == 0).toBeTruthy();\n  expect(currTask.checked).toBe(false);\n  currTask.incrementSession();\n  expect(currTask.name).toBe('Test task');\n  expect(currTask.currentSessionNum).toBe(1);\n  expect(currTask.totalSessions).toBe(5);\n  expect(currTask.id == 0).toBeTruthy();\n  expect(currTask.checked).toBe(false);\n});\n\ntest('Incrementing past totalSessions is OK', () => {\n  const currTask = new Task(0, 'Test task', 5);\n  expect(currTask.name).toBe('Test task');\n  expect(currTask.currentSessionNum).toBe(0);\n  expect(currTask.totalSessions).toBe(5);\n  expect(currTask.id == 0).toBeTruthy();\n  for (let i = 0; i < 6; i += 1) {\n    currTask.incrementSession();\n  }\n  expect(currTask.currentSessionNum).toBe(6);\n  expect(currTask.checked).toBe(false);\n});\n\ntest('Test that Checkbox works properly', () => {\n  const currTask = new Task(0, 'Test task', 5);\n  currTask.checkOffTask();\n  expect(currTask.checked).toBe(true);\n  expect(currTask.className).toBe(classNames.completedTaskClassName);\n});\n\ntest('Test that toggling checkbox works properly', () => {\n  const currTask = new Task(0, 'Test task', 5);\n  currTask.checkOffTask();\n  currTask.uncheckTask();\n  expect(currTask.checked).toBe(false);\n  expect(currTask.checkBox.checked).toBe(false);\n  expect(currTask.className).toBe(classNames.uncheckedTaskClassName);\n});\n\ntest('Incrementing session of checked task should throw range error', () => {\n  const currTask = new Task(0, 'Test task', 5, 3, true);\n  const errIncrement = () => { currTask.incrementSession(); };\n  expect(errIncrement).toThrow('Increment checked Task');\n});\n\ntest('Task Removed from Local Storage after delete is called', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  const task2 = new Task(1, 'Test task2', 5, 3, false);\n  window.localData = [['0']];\n  window.localData = [['1']];\n  task.removeFromLocalStorage();\n  expect(window.localData.length).toBe(1);\n});\n\ntest('Clicking focus hides focus button', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  task.focusButton.click();\n  expect(task.focusButton.parentNode.style.display).toBe('none');\n  expect(task.threeDotsButton.parentNode.style.display).toBe('flex');\n});\n\ntest('Clicking delete hides delete button', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  task.deleteButton.click();\n  expect(task.deleteButton.parentNode.style.display).toBe('none');\n  expect(task.threeDotsButton.parentNode.style.display).toBe('');\n});\n\ntest('Clicking three dots button hides button', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  task.threeDotsButton.click();\n  expect(task.focusButton.parentNode.style.display).toBe('flex');\n  expect(task.deleteButton.parentNode.style.display).toBe('flex');\n  expect(task.threeDotsButton.parentNode.style.display).toBe('none');\n});\n\ntest('Clicking up button hides button', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  task.taskUpButton.click();\n  expect(task.taskUpButton.parentNode.style.display).toBe('none');\n  expect(task.threeDotsButton.parentNode.style.display).toBe('flex');\n});\n\ntest('Clicking down button hides button', () => {\n  const task = new Task(0, 'Test task', 5, 3, true);\n  task.taskDownButton.click();\n  expect(task.taskDownButton.parentNode.style.display).toBe('none');\n  expect(task.threeDotsButton.parentNode.style.display).toBe('flex');\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/task.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "test33",
    "testId": 33,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test33",
    "access": null,
    "description": "Test that task with no values is empty",
    "lineNumber": 9
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "test34",
    "testId": 34,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test34",
    "access": null,
    "description": "Test that task with initialized values is initialized correctly",
    "lineNumber": 18
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "test35",
    "testId": 35,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test35",
    "access": null,
    "description": "Test that task with optional initilized values is initialized correctly",
    "lineNumber": 29
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "test36",
    "testId": 36,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test36",
    "access": null,
    "description": "Increment counter only changes current session number",
    "lineNumber": 40
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "test37",
    "testId": 37,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test37",
    "access": null,
    "description": "Incrementing past totalSessions is OK",
    "lineNumber": 55
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "test38",
    "testId": 38,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test38",
    "access": null,
    "description": "Test that Checkbox works properly",
    "lineNumber": 68
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "test39",
    "testId": 39,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test39",
    "access": null,
    "description": "Test that toggling checkbox works properly",
    "lineNumber": 75
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "test40",
    "testId": 40,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test40",
    "access": null,
    "description": "Incrementing session of checked task should throw range error",
    "lineNumber": 84
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "test41",
    "testId": 41,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test41",
    "access": null,
    "description": "Task Removed from Local Storage after delete is called",
    "lineNumber": 90
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "test42",
    "testId": 42,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test42",
    "access": null,
    "description": "Clicking focus hides focus button",
    "lineNumber": 99
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "test43",
    "testId": 43,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test43",
    "access": null,
    "description": "Clicking delete hides delete button",
    "lineNumber": 106
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "test44",
    "testId": 44,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test44",
    "access": null,
    "description": "Clicking three dots button hides button",
    "lineNumber": 113
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "test45",
    "testId": 45,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test45",
    "access": null,
    "description": "Clicking up button hides button",
    "lineNumber": 121
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "test46",
    "testId": 46,
    "memberof": "tests/task.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/task.test.js~test46",
    "access": null,
    "description": "Clicking down button hides button",
    "lineNumber": 128
  },
  {
    "__docId__": 431,
    "kind": "testFile",
    "name": "tests/timer.test.js",
    "content": "import { Timer } from '../js/Timer/Timer';\nimport {\n  workMode, shortBreakMode, longBreakMode, buttonText,\n} from '../js/Timer/TimerVariables';\nimport Worker from './mockWorker.js';\n\nbeforeEach(() => {\n  window.localData = [];\n  window.Worker = Worker;\n  window.Notification = ({\n    permission: 'denied',\n  });\n  document.body.innerHTML = '<div>'\n  + '  <p class=\"show-focus-time\" id=\"displayTime\"></p>'\n  + ' <p id=\"displayStatus\"></p>'\n  + '<button id=start>Start&nbsp;&nbsp;&nbsp;&nbsp;</button>'\n  + '<input type=\"number\" id=\"focusTime\">'\n  + '<input type=\"number\" id=\"shortBreakTime\">'\n  + '<input type=\"number\" id=\"longBreakTime\">'\n  + '<input type=\"checkbox\" id=\"autoStartSwitch\" checked=\"true\">'\n  + '</div>';\n  jest.useFakeTimers();\n  jest.clearAllTimers();\n});\n\ntest('Test Initial State is Nothing', () => {\n  const button = document.getElementById('start');\n  const displayTime = document.getElementById('displayTime');\n  const TimerObj = new Timer(button, displayTime, null);\n  expect(TimerObj.state).toBe('');\n  expect(TimerObj.sessionId).toBe(0);\n});\n\ntest('Test First Iteration of Timer', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  TimerObj.startTimer();\n  expect(TimerObj.state).toBe(workMode.name);\n});\n\ntest('Test That Queue Gets Updated During Second Iteration Of Timer', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  TimerObj.startTimer();\n\n  jest.advanceTimersByTime(workMode.duration * 60 * 1000);\n\n  expect(TimerObj.stateQueue[0]).toBe(shortBreakMode);\n  expect(TimerObj.stateQueue[6]).toBe(longBreakMode);\n});\n\ntest('Test That Multiple Iterations of the Timer Work', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  TimerObj.startTimer();\n\n  jest.advanceTimersByTime(workMode.duration * 120 * 1000);\n  expect(TimerObj.sessionId).toBe(1);\n});\n\ntest('Test That HTML Gets Updated During Second ', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  TimerObj.startTimer();\n  jest.advanceTimersByTime(workMode.duration * 60 * 1000);\n\n  expect(displayStatus.textContent).toBe(shortBreakMode.name);\n  expect(displayTime.textContent).toBe(`${shortBreakMode.duration}:00`);\n});\n\ntest('Test That Start Button Functions Properly ', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  button.click();\n  expect(button.textContent).toBe(buttonText.stopTimerText);\n});\n\ntest('Test That Clicking Start Twice Changes HTML ', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  button.click();\n  button.click();\n  expect(TimerObj.startButton.textContent.indexOf(buttonText.startTimerText) > -1).toBe(true);\n  expect(TimerObj.displayStatus.textContent).toBe('Pomo-Time!');\n});\n\ntest('Test That Timer Resets Properly When End Day is Clicked', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  jest.clearAllTimers();\n  button.click();\n  jest.advanceTimersByTime(workMode.duration * 60 * 1000);\n  button.click();\n  TimerObj.resetPomoSessionId();\n  expect(TimerObj.stateQueue[0]).toBe(workMode);\n  expect(TimerObj.sessionId).toBe(0);\n});\n\ntest('Test Timer Pauses After Work Session When Auto Start is Disabled', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n  const autoStartSwitch = document.getElementById('autoStartSwitch');\n  jest.clearAllTimers();\n  button.click();\n  autoStartSwitch.checked = false;\n  jest.advanceTimersByTime(workMode.duration * 60 * 1000);\n  expect(TimerObj.displayStatus.textContent).toBe('Short Break');\n  expect(button.childNodes[0].nodeValue).toBe(buttonText.startTimerText);\n  expect(displayStatus.textContent).toBe('Short Break');\n  expect(document.title).toBe('Short Break');\n});\n\ntest('get previous time durations from localStorage on refresh', () => {\n  localStorage.workModeTime = 26;\n  localStorage.shortBreakTime = 6;\n  localStorage.longBreakTime = 16;\n\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n\n  expect(TimerObj.focusTime.value).toBe('26');\n  expect(TimerObj.shortBreakTime.value).toBe('6');\n  expect(TimerObj.longBreakTime.value).toBe('16');\n\n  localStorage.clear();\n});\n\ntest('changeTime', () => {\n  const displayTime = document.getElementById('displayTime');\n  const displayStatus = document.getElementById('displayStatus');\n  const button = document.getElementById('start');\n  const TimerObj = new Timer(button, displayTime, displayStatus);\n\n  const event = new Event('change');\n\n  const focus = TimerObj.focusTime;\n  focus.dispatchEvent(event);\n  event.target.value = 33;\n  focus.dispatchEvent(event);\n  expect(localStorage.workModeTime).toBe('33');\n\n  const shortBreak = TimerObj.shortBreakTime;\n  shortBreak.dispatchEvent(event);\n  event.target.value = 1;\n  shortBreak.dispatchEvent(event);\n  expect(localStorage.shortBreakTime).toBe('1');\n\n  const longBreak = TimerObj.longBreakTime;\n  longBreak.dispatchEvent(event);\n  event.target.value = 9;\n  longBreak.dispatchEvent(event);\n  expect(localStorage.longBreakTime).toBe('9');\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/timer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "test47",
    "testId": 47,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test47",
    "access": null,
    "description": "Test Initial State is Nothing",
    "lineNumber": 26
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "test48",
    "testId": 48,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test48",
    "access": null,
    "description": "Test First Iteration of Timer",
    "lineNumber": 34
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "test49",
    "testId": 49,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test49",
    "access": null,
    "description": "Test That Queue Gets Updated During Second Iteration Of Timer",
    "lineNumber": 43
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "test50",
    "testId": 50,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test50",
    "access": null,
    "description": "Test That Multiple Iterations of the Timer Work",
    "lineNumber": 57
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "test51",
    "testId": 51,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test51",
    "access": null,
    "description": "Test That HTML Gets Updated During Second ",
    "lineNumber": 69
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "test52",
    "testId": 52,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test52",
    "access": null,
    "description": "Test That Start Button Functions Properly ",
    "lineNumber": 82
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "test53",
    "testId": 53,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test53",
    "access": null,
    "description": "Test That Clicking Start Twice Changes HTML ",
    "lineNumber": 92
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "test54",
    "testId": 54,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test54",
    "access": null,
    "description": "Test That Timer Resets Properly When End Day is Clicked",
    "lineNumber": 104
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "test55",
    "testId": 55,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test55",
    "access": null,
    "description": "Test Timer Pauses After Work Session When Auto Start is Disabled",
    "lineNumber": 118
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "test56",
    "testId": 56,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test56",
    "access": null,
    "description": "get previous time durations from localStorage on refresh",
    "lineNumber": 134
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "test57",
    "testId": 57,
    "memberof": "tests/timer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/timer.test.js~test57",
    "access": null,
    "description": "changeTime",
    "lineNumber": 151
  },
  {
    "__docId__": 443,
    "kind": "testFile",
    "name": "tests/todolist.test.js",
    "content": "import { ToDoList } from '../js/ToDoList/ToDoList.js';\nimport { Task } from '../js/ToDoList/Task';\n\n/** @Test {ToDoList} */\n\nbeforeEach(() => {\n  window.localData = [];\n});\n\ntest('Construction of empty list', () => {\n  const theList = new ToDoList();\n  expect(theList.taskList).toEqual([]);\n});\n\ntest('Valid construction of new list in HTML', () => {\n  const listLocation = document.getElementById('ToDoListDiv');\n  const aList = new ToDoList();\n  expect(aList.taskList).toEqual([]);\n});\n\ntest('Adding Items to List', () => {\n  const listLocation = document.getElementById('ToDoListDiv');\n  const aList = new ToDoList();\n  aList.addTask('First Task', 5);\n  expect(aList.taskList.length).toBe(1);\n  aList.addTask('Second Task', 2);\n  expect(aList.taskList.length).toBe(2);\n});\n\ntest('Adding 0 Pomo Length Task', () => {\n  const aList = new ToDoList();\n  const errTask = () => { aList.addTask('First Task', 0); };\n  expect(errTask).toThrow('0 Length Task');\n});\n\ntest('Adding undefined Pomo Length Task', () => {\n  const aList = new ToDoList();\n  const errTask = () => { aList.addTask('First Task', undefined); };\n  expect(errTask).toThrow('Undefined Length Task');\n});\n\ntest('Adding Task w/o name', () => {\n  const aList = new ToDoList();\n  const errTask = () => { aList.addTask(undefined, 4); };\n  expect(errTask).toThrow('Undefined Name');\n});\n\ntest('Adding Task w/ empty name', () => {\n  const aList = new ToDoList();\n  const errTask = () => { aList.addTask('', 4); };\n  expect(errTask).toThrow('Empty Name');\n});\n\ntest('Adding Task w/ NaN for PomoSession', () => {\n  const aList = new ToDoList();\n  const errTask = () => { aList.addTask('TempTask', NaN); };\n  expect(errTask).toThrow('Number Not Passed In');\n});\n\ntest('Get currentTask', () => {\n  const aList = new ToDoList();\n  aList.addTask('First Task', 5);\n  aList.addTask('Second Task', 2);\n  const currTask = aList.getCurrentTask();\n  expect(currTask.name).toBe('First Task');\n});\n\ntest('Get currentTask on empty list should be null', () => {\n  const aList = new ToDoList();\n  expect(aList.getCurrentTask()).toBe(null);\n});\n\ntest('Get currentTask on list with all completed elements should be null', () => {\n  const aList = new ToDoList();\n  aList.addTask('First Task', 5);\n  aList.getCurrentTask().checkOffTask();\n  expect(aList.getCurrentTask()).toBe(null);\n});\n\ntest('Preserve special characters in task name', () => {\n  const aList = new ToDoList();\n  // eslint-disable-next-line no-template-curly-in-string\n  const strName = 'A s^ri\\ng w!t\\\\n spe`cia| \"some ver${this.id}y special\" chara%cter$';\n  aList.addTask(strName, 5);\n  aList.addTask('Second Task', 2);\n  const currTask = aList.getCurrentTask();\n  expect(currTask.name).toBe(strName);\n});\n\ntest('Deleted Task do not come up as current task', () => {\n  const aList = new ToDoList();\n  document.body.addEventListener('task-deleted', (e) => {\n    aList.removeTask(e.detail.taskID);\n  });\n  aList.addTask('task1', 1);\n  aList.addTask('task2', 2);\n  const task1 = aList.getCurrentTask();\n  task1.deleteButton.click();\n  const currTask = aList.getCurrentTask();\n  expect(currTask.name).toBe('task2');\n  expect(currTask.totalSessions).toBe(2);\n});\n\ntest('Getting task by ID returns task if present', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  let returnedTask = aList.getTaskById('0');\n  expect(returnedTask.name).toBe('name');\n  returnedTask = aList.getTaskById('1');\n  expect(returnedTask.name).toBe('name2');\n});\n\ntest('Getting task by ID returns null if task not present', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 2);\n  aList.addTask('name2', 2);\n  const returnedTask = aList.getTaskById('not present');\n  expect(returnedTask).toBe(null);\n});\n\ntest('Deleting task by ID returns deletes task when present', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  const ret = aList.removeTask('0');\n  expect(ret).toBe(true);\n  const returnedTask = aList.getTaskById('0');\n  expect(returnedTask).toBe(null);\n});\n\ntest('Deleting task by ID returns false if task not present', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  const ret = aList.removeTask('nonexistant');\n  expect(ret).toBe(false);\n});\n\ntest('Move task to top of todolist', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  const task = new Task('new', 'newtask', 2);\n  aList.addTaskToTop(task);\n  expect(aList.taskList[0]).toBe(task);\n});\n\ntest('Adding completed task to end of todolist', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  const checkedTask = new Task('2', 'unchecked', 4, 0, true);\n  aList.addTaskToEnd(checkedTask);\n  expect(aList.taskList[2]).toBe(checkedTask);\n});\n\ntest('Adding unchecked task to end of todolist', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  aList.addTask('name3', 1);\n  aList.addTask('name4', 1);\n  aList.addTask('name5', 2, 1, true, true);\n  aList.addTask('name6', 2, 1, true, true);\n  const uncheckedTask = new Task('10', 'checked', 4, 0, false);\n  aList.addTaskToEnd(uncheckedTask);\n  expect(aList.taskList[4]).toBe(uncheckedTask);\n});\n\ntest('Adding unchecked task to end of todolist when no checked tasks exist', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  aList.addTask('name3', 1);\n  aList.addTask('name4', 1);\n  const uncheckedTask = new Task('10', 'checked', 4, 0, false);\n  aList.addTaskToEnd(uncheckedTask);\n  expect(aList.taskList[4]).toBe(uncheckedTask);\n});\n\ntest('Unchecked Task Event', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  aList.addTask('name3', 1);\n  aList.addTask('name4', 1);\n  const event = new CustomEvent('task-unchecked', {});\n  aList.taskList[0].dispatchEvent(event);\n});\n\ntest('Move third task up', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  aList.addTask('name3', 1);\n  aList.addTask('name4', 1);\n  aList.shiftTaskUp(aList.taskList[2], 4);\n  expect(aList.taskList[1].name).toBe('name3');\n});\n\ntest('Move third task down', () => {\n  const aList = new ToDoList();\n  aList.addTask('name', 1);\n  aList.addTask('name2', 1);\n  aList.addTask('name3', 1);\n  aList.addTask('name4', 1);\n  aList.shiftTaskDown(aList.taskList[2], 4);\n  expect(aList.taskList[3].name).toBe('name3');\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/todolist.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "test58",
    "testId": 58,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test58",
    "access": null,
    "description": "Construction of empty list",
    "lineNumber": 10
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "test59",
    "testId": 59,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test59",
    "access": null,
    "description": "Valid construction of new list in HTML",
    "lineNumber": 15
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "test60",
    "testId": 60,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test60",
    "access": null,
    "description": "Adding Items to List",
    "lineNumber": 21
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "test61",
    "testId": 61,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test61",
    "access": null,
    "description": "Adding 0 Pomo Length Task",
    "lineNumber": 30
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "test62",
    "testId": 62,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test62",
    "access": null,
    "description": "Adding undefined Pomo Length Task",
    "lineNumber": 36
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "test63",
    "testId": 63,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test63",
    "access": null,
    "description": "Adding Task w/o name",
    "lineNumber": 42
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "test64",
    "testId": 64,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test64",
    "access": null,
    "description": "Adding Task w/ empty name",
    "lineNumber": 48
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "test65",
    "testId": 65,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test65",
    "access": null,
    "description": "Adding Task w/ NaN for PomoSession",
    "lineNumber": 54
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "test66",
    "testId": 66,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test66",
    "access": null,
    "description": "Get currentTask",
    "lineNumber": 60
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "test67",
    "testId": 67,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test67",
    "access": null,
    "description": "Get currentTask on empty list should be null",
    "lineNumber": 68
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "test68",
    "testId": 68,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test68",
    "access": null,
    "description": "Get currentTask on list with all completed elements should be null",
    "lineNumber": 73
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "test69",
    "testId": 69,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test69",
    "access": null,
    "description": "Preserve special characters in task name",
    "lineNumber": 80
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "test70",
    "testId": 70,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test70",
    "access": null,
    "description": "Deleted Task do not come up as current task",
    "lineNumber": 90
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "test71",
    "testId": 71,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test71",
    "access": null,
    "description": "Getting task by ID returns task if present",
    "lineNumber": 104
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "test72",
    "testId": 72,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test72",
    "access": null,
    "description": "Getting task by ID returns null if task not present",
    "lineNumber": 114
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "test73",
    "testId": 73,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test73",
    "access": null,
    "description": "Deleting task by ID returns deletes task when present",
    "lineNumber": 122
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "test74",
    "testId": 74,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test74",
    "access": null,
    "description": "Deleting task by ID returns false if task not present",
    "lineNumber": 132
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "test75",
    "testId": 75,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test75",
    "access": null,
    "description": "Move task to top of todolist",
    "lineNumber": 140
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "test76",
    "testId": 76,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test76",
    "access": null,
    "description": "Adding completed task to end of todolist",
    "lineNumber": 149
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "test77",
    "testId": 77,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test77",
    "access": null,
    "description": "Adding unchecked task to end of todolist",
    "lineNumber": 158
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "test78",
    "testId": 78,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test78",
    "access": null,
    "description": "Adding unchecked task to end of todolist when no checked tasks exist",
    "lineNumber": 171
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "test79",
    "testId": 79,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test79",
    "access": null,
    "description": "Unchecked Task Event",
    "lineNumber": 182
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "test80",
    "testId": 80,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test80",
    "access": null,
    "description": "Move third task up",
    "lineNumber": 192
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "test81",
    "testId": 81,
    "memberof": "tests/todolist.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolist.test.js~test81",
    "access": null,
    "description": "Move third task down",
    "lineNumber": 202
  },
  {
    "__docId__": 468,
    "kind": "testFile",
    "name": "tests/todolistdom.test.js",
    "content": "import { TodoListDom } from '../js/ToDoList/TodoListDom.js';\n\n/** @Test {ToDoList} */\nlet tableLocation;\nlet formLocation;\nlet addBtnLocation;\nlet deleteBtnLocation;\nlet finishTaskBtnLocation;\nlet currentTaskLocation;\nlet myDOM;\n\nbeforeEach(() => {\n  document.body.innerHTML = `<section id=\"tasklist\" class=\"section_container\">\n      <h2>To Do</h2>\n      <table id='todo'>\n        <th>\n          <td>Task</td>\n          <td>Pomos</td>\n          <td>Delete</td>\n        </th>\n      </table>\n    </section>\n    <section id=\"currentTask\" class=\"section-container\">\n    </section>\n    <button id = \"finishTask\">Finish task</button>\n    <div>\n      <form id = \"add-todo\" style = \"display: none;\">\n        <input type=\"text\" name=\"task-name\" placeholder=\"Write Essay\">\n        <input type=\"number\" name=\"task-length\" placeholder=\"1\">\n        <input type=\"submit\">\n      </form>\n      <button id = \"add-button\" type=\"button\">Add a task</button>\n      <button id = \"delete-all-button\" class=\"deleteAllButton\" type=\"button\">Delete All</button>\n\n    </div>\n    <section id=\"delete-all-modal-container\">\n      <div class=\"delete-all-modal\">\n        <h1>Are you sure you want to delete all tasks?</h1>\n        <div id=\"buttonContainers\">\n          <button class=\"confirm-delete-all\" id=\"confirm-delete-all\" type=\"submit\">DELETE</button>\n          <button class=\"cancel-delete-all\" id=\"cancel-delete-all\" type=\"submit\">CANCEL</button>\n        </div>\n      </div>\n    </section> `;\n  tableLocation = document.getElementById('todo');\n  formLocation = document.getElementById('add-todo');\n  addBtnLocation = document.getElementById('add-button');\n  deleteBtnLocation = document.getElementById('delete-all-button');\n  finishTaskBtnLocation = document.getElementById('finishTask');\n  currentTaskLocation = document.getElementById('currentTask');\n  myDOM = new TodoListDom(tableLocation, formLocation, addBtnLocation,\n    deleteBtnLocation, finishTaskBtnLocation, currentTaskLocation);\n  document.body.addEventListener('task-deleted', (e) => {\n    myDOM.todoList.removeTask(e.detail.taskID);\n  });\n});\n\ntest('true', () => {\n  expect(true).toBeTruthy();\n});\n\ntest('Valid construction of TDLDom', () => {\n  expect(myDOM.todoList.taskList).toEqual([]);\n});\n\ntest('TodoList can function without any tasks', () => {\n  const currentTaskFunction = () => { myDOM.updateCurrentTask(); };\n  expect(currentTaskFunction).not.toThrow(Error);\n  const sessionCompleteFunction = () => { myDOM.onSessionComplete(); };\n  expect(sessionCompleteFunction).not.toThrow(Error);\n});\n\ntest('Add a task and click checkoff', () => {\n  formLocation.children[0].setAttribute('value', 'Write Essay');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  expect(tableLocation.children[1].taskText.textContent).toMatch(new RegExp('Write *Essay'));\n  expect(tableLocation.children[1].pomoSessions.textContent).toMatch(new RegExp('0/2'));\n  tableLocation.children[1].checkBox.click();\n  expect(tableLocation.children[1].checkBox.checked).toBe(true);\n  expect(tableLocation.children[1].checkBox.disabled).toBe(false);\n});\n\ntest('Reload the page with local storage', () => {\n  expect(tableLocation.children[1].taskText.textContent).toMatch(new RegExp('Write *Essay'));\n  expect(tableLocation.children[1].pomoSessions.textContent).toMatch(new RegExp('0/2'));\n});\n\ntest('Add another task', () => {\n  formLocation.children[0].setAttribute('value', 'Write Essay');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n});\n\ntest('Reload the page with completed task', () => {\n  expect(tableLocation.children[1].checked).toEqual(false);\n});\n\n// Now has a task\ntest('Clicking remove button should remove task from table and local storage', () => {\n  tableLocation.children[1].deleteButton.click();\n  tableLocation.children[1].deleteButton.click();\n  expect(tableLocation.children[1]).toEqual(undefined);\n  expect(window.localData.length).toEqual(0);\n  localStorage.clear();\n});\n\ntest('Incrementing session updates value accordingly', () => {\n  formLocation.children[0].value = 'Write Essay';\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  myDOM.onSessionComplete();\n  expect(tableLocation.children[1].children[1].textContent).toMatch(new RegExp('Write *Essay'));\n  expect(tableLocation.children[1].children[2].textContent).toMatch(new RegExp('1/2'));\n  localStorage.clear();\n});\n\ntest('Addding an invalid task causes an alert', () => {\n  global.alert = jest.fn();\n  formLocation.submit();\n  expect(global.alert).toHaveBeenCalledTimes(1);\n});\n\ntest('Delete all should remove from table and local storage', () => {\n  const confirmDeleteAllBtnLocation = document.getElementById('confirm-delete-all');\n  formLocation.children[0].setAttribute('value', 'Write Essay');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Write Essay');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  deleteBtnLocation.click();\n  confirmDeleteAllBtnLocation.click();\n  expect(tableLocation.children[1]).toEqual(undefined);\n  expect(window.localData.length).toEqual(0);\n});\n\ntest('Focus Button should reorder the tasks when no tasks are checked off', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  myDOM.onFocusTask('1');\n  expect(myDOM.todoList.getCurrentTask().name).toBe('Task2');\n  expect(myDOM.todoList.taskList[1].name).toBe('Task1');\n  localStorage.clear();\n});\n\ntest('Focus Button should reorder the tasks even if tasks are checked off', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  tableLocation.children[2].checkBox.click();\n  myDOM.onFocusTask('2');\n  expect(myDOM.todoList.getCurrentTask().name).toBe('Task3');\n  expect(myDOM.todoList.taskList[1].name).toBe('Task1');\n  localStorage.clear();\n});\n\ntest('Focus Button should reorder the tasks even if tasks are deleted', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  tableLocation.children[2].deleteButton.click();\n  myDOM.onFocusTask('2');\n  expect(myDOM.todoList.getCurrentTask().name).toBe('Task3');\n  expect(myDOM.todoList.taskList[1].name).toBe('Task1');\n  localStorage.clear();\n});\n\ntest('Current Task gets updated when focus button is clicked', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  myDOM.onFocusTask('1');\n  myDOM.updateCurrentTask();\n  expect(myDOM.currentTask.name).toBe('Task2');\n  localStorage.clear();\n});\n\ntest('Adding first task should not disable the checkbox', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  expect(tableLocation.children[1].checkBox.disabled).toBe(false);\n  localStorage.clear();\n});\n\ntest('Adding two tasks should disable the checkbox for second task', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  expect(tableLocation.children[1].checkBox.disabled).toBe(false);\n  expect(tableLocation.children[2].checkBox.disabled).toBe(true);\n  localStorage.clear();\n});\n\ntest('Focusing on a task updates checkboxes accordingly', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  myDOM.onFocusTask('1');\n  myDOM.updateCurrentTask();\n\n  expect(tableLocation.children[1].checkBox.disabled).toBe(false);\n  expect(tableLocation.children[1].taskText.textContent).toBe('Task2');\n  expect(tableLocation.children[2].checkBox.disabled).toBe(false);\n  localStorage.clear();\n});\n\ntest('Checking a task brings it to the bottom', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  myDOM.onCompletedTask();\n\n  expect(tableLocation.children[2].taskText.textContent).toBe('Task1');\n  localStorage.clear();\n});\n\ntest('Checking a task brings it to the bottom with completed tasks already there', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task4');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  tableLocation.children[1].checked = true;\n  myDOM.onCompletedTask();\n  myDOM.updateCurrentTask();\n  myDOM.onCompletedTask();\n\n  expect(tableLocation.children[4].taskText.textContent).toBe('Task2');\n  expect(tableLocation.children[3].taskText.textContent).toBe('Task1');\n  expect(tableLocation.children[2].taskText.textContent).toBe('Task4');\n  expect(tableLocation.children[1].taskText.textContent).toBe('Task3');\n\n  localStorage.clear();\n});\n\ntest('Unchecking a task brings it to the bottom of the unchecked tasks', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  tableLocation.children[1].checked = true;\n  myDOM.onCompletedTask();\n  myDOM.updateCurrentTask();\n  tableLocation.children[1].checked = true;\n  myDOM.onCompletedTask();\n  myDOM.updateCurrentTask();\n  tableLocation.children[3].checked = false;\n  myDOM.onUncheckedTask(tableLocation.children[3].id);\n  myDOM.updateCurrentTask();\n\n  expect(tableLocation.children[1].taskText.textContent).toBe('Task3');\n  expect(tableLocation.children[2].taskText.textContent).toBe('Task2');\n  expect(tableLocation.children[3].taskText.textContent).toBe('Task1');\n  expect(myDOM.todoList.taskList[0].taskText.textContent).toBe('Task3');\n  expect(myDOM.todoList.taskList[1].taskText.textContent).toBe('Task2');\n  expect(myDOM.todoList.taskList[2].taskText.textContent).toBe('Task1');\n  localStorage.clear();\n});\n\ntest('Current Task shows No current task when no input', () => {\n  expect(currentTaskLocation.textContent).toBe('No current task');\n  localStorage.clear();\n});\n\ntest('Current Task after one input', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  myDOM.updateCurrentTask();\n\n  expect(currentTaskLocation.textContent).toBe('Working on: Task1');\n  localStorage.clear();\n});\n\ntest('Current Task after input deleted', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  tableLocation.children[1].deleteButton.click();\n  myDOM.updateCurrentTask();\n\n  expect(currentTaskLocation.textContent).toBe('No current task');\n  localStorage.clear();\n});\n\ntest('Current Task after input checked off', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  tableLocation.children[1].checkBox.click();\n  myDOM.updateCurrentTask();\n\n  expect(currentTaskLocation.textContent).toBe('No current task');\n  localStorage.clear();\n});\n\ntest('Current Task after a session', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  myDOM.onSessionComplete();\n  myDOM.updateCurrentTask();\n\n  expect(currentTaskLocation.textContent).toBe('Working on: Task1');\n  localStorage.clear();\n});\n\ntest('Moving the third task up should make it the second task', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  myDOM.moveTaskUp('2');\n  myDOM.updateCurrentTask();\n\n  expect(tableLocation.children[2].taskText.textContent).toBe('Task3');\n  expect(tableLocation.children[3].taskText.textContent).toBe('Task2');\n  localStorage.clear();\n});\n\ntest('Moving the first task down should make it the second task', () => {\n  formLocation.children[0].setAttribute('value', 'Task1');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task2');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n  formLocation.children[0].setAttribute('value', 'Task3');\n  formLocation.children[1].value = 2;\n  formLocation.submit();\n\n  myDOM.moveTaskDown('0');\n  myDOM.updateCurrentTask();\n\n  expect(tableLocation.children[1].taskText.textContent).toBe('Task2');\n  expect(tableLocation.children[2].taskText.textContent).toBe('Task1');\n  localStorage.clear();\n});\n",
    "static": true,
    "longname": "/home/runner/work/cse112_team15/cse112_team15/tests/todolistdom.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "test82",
    "testId": 82,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test82",
    "access": null,
    "description": "true",
    "lineNumber": 58
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "test83",
    "testId": 83,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test83",
    "access": null,
    "description": "Valid construction of TDLDom",
    "lineNumber": 62
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "test84",
    "testId": 84,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test84",
    "access": null,
    "description": "TodoList can function without any tasks",
    "lineNumber": 66
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "test85",
    "testId": 85,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test85",
    "access": null,
    "description": "Add a task and click checkoff",
    "lineNumber": 73
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "test86",
    "testId": 86,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test86",
    "access": null,
    "description": "Reload the page with local storage",
    "lineNumber": 84
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "test87",
    "testId": 87,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test87",
    "access": null,
    "description": "Add another task",
    "lineNumber": 89
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "test88",
    "testId": 88,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test88",
    "access": null,
    "description": "Reload the page with completed task",
    "lineNumber": 95
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "test89",
    "testId": 89,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test89",
    "access": null,
    "description": "Clicking remove button should remove task from table and local storage",
    "lineNumber": 100
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "test90",
    "testId": 90,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test90",
    "access": null,
    "description": "Incrementing session updates value accordingly",
    "lineNumber": 108
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "test91",
    "testId": 91,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test91",
    "access": null,
    "description": "Addding an invalid task causes an alert",
    "lineNumber": 118
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "test92",
    "testId": 92,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test92",
    "access": null,
    "description": "Delete all should remove from table and local storage",
    "lineNumber": 124
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "test93",
    "testId": 93,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test93",
    "access": null,
    "description": "Focus Button should reorder the tasks when no tasks are checked off",
    "lineNumber": 138
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "test94",
    "testId": 94,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test94",
    "access": null,
    "description": "Focus Button should reorder the tasks even if tasks are checked off",
    "lineNumber": 151
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "test95",
    "testId": 95,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test95",
    "access": null,
    "description": "Focus Button should reorder the tasks even if tasks are deleted",
    "lineNumber": 168
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "test96",
    "testId": 96,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test96",
    "access": null,
    "description": "Current Task gets updated when focus button is clicked",
    "lineNumber": 185
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "test97",
    "testId": 97,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test97",
    "access": null,
    "description": "Adding first task should not disable the checkbox",
    "lineNumber": 202
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "test98",
    "testId": 98,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test98",
    "access": null,
    "description": "Adding two tasks should disable the checkbox for second task",
    "lineNumber": 210
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "test99",
    "testId": 99,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test99",
    "access": null,
    "description": "Focusing on a task updates checkboxes accordingly",
    "lineNumber": 223
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "test100",
    "testId": 100,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test100",
    "access": null,
    "description": "Checking a task brings it to the bottom",
    "lineNumber": 240
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "test101",
    "testId": 101,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test101",
    "access": null,
    "description": "Checking a task brings it to the bottom with completed tasks already there",
    "lineNumber": 253
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "test102",
    "testId": 102,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test102",
    "access": null,
    "description": "Unchecking a task brings it to the bottom of the unchecked tasks",
    "lineNumber": 280
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "test103",
    "testId": 103,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test103",
    "access": null,
    "description": "Current Task shows No current task when no input",
    "lineNumber": 310
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "test104",
    "testId": 104,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test104",
    "access": null,
    "description": "Current Task after one input",
    "lineNumber": 315
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "test105",
    "testId": 105,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test105",
    "access": null,
    "description": "Current Task after input deleted",
    "lineNumber": 325
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "test106",
    "testId": 106,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test106",
    "access": null,
    "description": "Current Task after input checked off",
    "lineNumber": 336
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "test107",
    "testId": 107,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test107",
    "access": null,
    "description": "Current Task after a session",
    "lineNumber": 347
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "test108",
    "testId": 108,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test108",
    "access": null,
    "description": "Moving the third task up should make it the second task",
    "lineNumber": 358
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "test109",
    "testId": 109,
    "memberof": "tests/todolistdom.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/todolistdom.test.js~test109",
    "access": null,
    "description": "Moving the first task down should make it the second task",
    "lineNumber": 377
  }
]